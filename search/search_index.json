{"config":{"lang":["zh","en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4f60\u597d","text":"<p>\u8fd9\u91cc\u662f JackCheng\u7684\u4e2a\u4eba\u7f51\u7ad9 https://learning.jackcheng.chat</p> <ul> <li>\u901a\u8fc7\u4e3b\u9898\u548c\u76ee\u5f55\u6d4f\u89c8\u6587\u7ae0\u3002<ul> <li>\u7535\u8111\u7aef\uff1a\u5728\u4e0a\u65b9\u6807\u7b7e\u680f\u9009\u62e9\u4e3b\u9898\uff0c\u5728\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0\u3002</li> <li>\u79fb\u52a8\u7aef\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u4e3b\u9898\u548c\u6587\u7ae0\u3002</li> </ul> </li> <li>\u641c\u7d22\u5173\u952e\u8bcd\u67e5\u627e\u6587\u7ae0\u3002</li> </ul> <p>\u4ee5\u4e0b\u4fe1\u606f\u66f4\u65b0\u4e8e 241108</p>"},{"location":"#_2","title":"\u4e3b\u8981\u7ecf\u5386\u4e0e\u4e2a\u4eba\u73b0\u72b6","text":""},{"location":"#_3","title":"\u4e2a\u4eba\u4fe1\u606f","text":"<p>\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b \u4e2a\u4eba\u4ecb\u7ecd</p>"},{"location":"CS/","title":"Computer Science \u5b66\u4e60\u7b14\u8bb0","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"CS/Chatgpt/ChatGPT_Cookbook/","title":"ChatGPT","text":"<p>\u4e00\u3001ChatGPT \u5177\u6709\u7684\u529f\u80fd</p> <p>1\u3001OCR \u8bc6\u522b</p> <p>\u5173\u952e\u8bcd<code>scan</code>,<code>ocr</code>, <code>return</code> a list</p> <p>\u6848\u4f8b\uff1a</p> <p>scan the picture and print out the text in lists, for example:2254 COPLUS</p> <p></p> <p>Chatgpt:</p> <p>Here is the extracted list of companies from the image:</p> <ul> <li>2254 COPLUS</li> <li>2258 FOXTRON</li> <li>2432 AGT</li> <li>3150 SYNCOMM</li> <li>6423 YMC</li> <li>6534 CHBIO</li> <li>6645 KIM FOREST</li> <li>6757 TTW</li> <li>6771 PHET</li> <li>6794 UNICOCELL</li> <li>6854 PLAYNITRIDE</li> <li>6869 J&amp;V ENERGY</li> <li>6873 HDRE</li> <li>6902 GOGOLOOK</li> <li>6949 PELL BMT</li> <li>6951 CHIN HSIN</li> <li>6969 TRANSCENE</li> <li>8162 MSEC</li> <li>8487 ELTA</li> </ul> <p>2\u3001\u5229\u7528\u667a\u80fd\u5224\u65ad\uff0c\u505a\u4e00\u4e2a\u7ffb\u8bd1\u673a\u5668\u4eba</p> <p>\u7ffb\u8bd1\u673a\u5668\u4eba Prompt\uff1a</p> <p>3\u3001\u7528\u5faa\u73af\u529f\u80fd\u505a\u4e00\u4e2a\u884c\u4e1a\u7814\u7a76\u673a\u5668\u4eba</p> <p>\u5e94\u7528\u573a\u666f\uff1a100 \u4e2a\u4e0a\u5e02\u516c\u53f8\u9700\u8981\u7814\u7a76\u5176\u4e3b\u8425\u4e1a\u52a1\uff0c\u5e02\u503c\uff0c\u5458\u5de5\u7b49\uff0c\u5982\u679c\u4e00\u4e2a\u4e2a\u67e5\u8be2\uff0c\u96be\u514d\u6548\u7387\u4f4e\u3002\u8fd9\u5f88\u9002\u5408\u673a\u5668\u4eba\u53bb\u505a\u3002</p> <p>4\u3001\u505a\u4e00\u4e2a\u8868\u683c\uff0c\u63d0\u4f9b\u8868\u5934\u548c\u7ef4\u5ea6</p> <p>\u5148\u8ba9 chatgpt \u751f\u6210 markdown \u683c\u5f0f\u8868\u8fbe\uff0c\u628a\u8868\u8fbe\u590d\u5236\u5230 Typora \u4e4b\u540e\uff0c\u518d\u4ece Typora \u590d\u5236\uff0c\u7c98\u8d34\u5230 Excel \u8fdb\u884c\u8fdb\u4e00\u6b65\u5b8c\u5584\u3002</p> <p>5\u3001\u7ffb\u8bd1\u5916\u6587\u4e66\u7c4d</p> <p>\u63a8\u8350 pdf \u82f1\u6587\u6587\u6863\uff0c\u7528\u8c37\u6b4c\u6d4f\u89c8\u5668\u63d2\u4ef6<code>\u6c89\u6d78\u7ffb\u8bd1</code>+ \u81ea\u5b9a\u4e49 OpenAI API \u6765\u5b8c\u6210\u3002</p> <p>\u5982\u679c\u662f epub\uff0c\u4e5f\u53ef\u4ee5\u7528\u8fd9\u4e2a\u5b8c\u6210\uff0c\u7ffb\u8bd1\u6548\u679c\u6bd4 github \u4e0a\u6709\u4e2a\u5927\u795e\u5199\u7684\u8f6f\u4ef6\u8fd8\u8981\u597d\u4e00\u4e9b\u3002</p> <p>\u4e8c\u3001ChatGPT \u5404\u4e2a\u7aef\u7684\u533a\u522b</p> <p>20241029 \u66f4\u65b0\uff1a</p> <p>\u5728 Web \u7aef\u73b0\u5728\u4e5f\u81ea\u5e26\u641c\u7d22\u529f\u80fd\u4e86\uff0c\u8fd9\u4e2a\u4ee5\u524d\u53ea\u6709 IOS \u7aef\u548c\u684c\u9762\u7aef\u6709\u3002</p> <p>\u6240\u4ee5\uff0c\u8981\u4e0d\u65ad\u5173\u6ce8\u3002</p> <p>\u4e09\u3001\u7528 ChatGPT \u5199\u8d22\u52a1\u5206\u6790\u62a5\u544a</p> <p>Prompt</p> <p>\u6211\u6b63\u5728\u7f16\u5199\u4e00\u4efd\u516c\u53f8\u7684\u8d22\u52a1\u5206\u6790\u62a5\u544a\uff0c\u9700\u5bf92024\u5e74\u524d9\u4e2a\u6708\u8d22\u52a1\u62a5\u8868\u6570\u636e\u8fdb\u884c\u5206\u6790\u5e76\u64b0\u5199\u5bf9\u5e94\u6587\u5b57\u63cf\u8ff0\u3002\u8bf7\u6839\u636e\u4ee5\u4e0b\u6b65\u9aa4\u5b8c\u6210\u62a5\u544a\uff1a </p> <p>\u6839\u636e\u8d22\u52a1\u6570\u636e\u8868\u683c\u4e2d\u91d1\u989d\u7684\u5360\u6bd4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u9ad8\u5230\u4f4e\u6392\u5217\u9879\u76ee\u3002 </p> <p>\u6309\u7167\u6392\u5e8f\u7ed3\u679c\uff0c\u5957\u75282024\u5e74\u4e0a\u534a\u5e74\u8d22\u52a1\u5206\u6790\u6a21\u677f\uff0c</p> <p>\u5c06\u62a5\u544a\u4e2d\u7684\u65f6\u95f4\u548c\u6570\u5b57\u66ff\u6362\u4e3a\u8868\u683c\u4e2d\u7684\u6700\u65b0\u6570\u636e\u3002 \u786e\u4fdd\u6bcf\u4e2a\u9879\u76ee\u7684\u63cf\u8ff0\u548c\u6570\u636e\u4fdd\u6301\u5bf9\u9f50\uff0c\u4e0d\u8981\u53d1\u751f\u9519\u4f4d\u3002 </p> <p>\u8bf7\u6309\u4e0a\u8ff0\u987a\u5e8f\u548c\u8981\u6c42\u64b0\u5199\u6700\u7ec8\u7684\u8d22\u52a1\u5206\u6790\u62a5\u544a\u3002</p> <p>\u4ee5\u4e0b\u662f\u6a21\u677f\uff1a</p> <p>\u622a\u81f32024\u5e746\u670830\u65e5\uff0c\u516c\u53f8\u603b\u8d44\u4ea710,504.92\u4e07\u5143\uff0c\u5176\u4e2d\uff0c\u6d41\u52a8\u8d44\u4ea7\u5360\u6bd486.5%\uff0c\u975e\u6d41\u52a8\u8d44\u4ea7\u5360\u6bd413.5%\u3002 \u622a\u81f32024\u5e746\u670830\u65e5\uff0c\u603b\u8d44\u4ea7\u4e2d\u5360\u6bd4\u6700\u5927\u7684\u51e0\u9879\u8d44\u4ea7\u5305\u62ec\u5b58\u8d27\u3001\u9884\u4ed8\u8d26\u6b3e\u3001\u5e94\u6536\u5e10\u6b3e\u3001\u8d27\u5e01\u8d44\u91d1\uff0c\u5176\u4e2d\u5b58\u8d27\uff08\u5254\u9664\u6298\u65e7\u540e\u51c0\u503c\uff093828.58\u4e07\u5143\uff0c\u5360\u603b\u8d44\u4ea7\u768436.6%\uff1b\u9884\u4ed8\u8d26\u6b3e 2249.72 \u4e07\u5143\uff0c\u5360\u603b\u8d44\u4ea7\u768421.5%\uff1b\u5e94\u6536\u5e10\u6b3e\u51c0\u989d\u4e3a 1903.13 \u4e07\u5143\uff0c\u5360\u603b\u8d44\u4ea7\u768418.2%\uff1b\u8d27\u5e01\u8d44\u91d1 898.89\u4e07\u5143\uff0c\u5360\u603b\u8d44\u4ea7\u76848.6%\u3002 \u622a\u81f32024\u5e746\u670830\u65e5\uff0c\u516c\u53f8\u8d1f\u503a\u5408\u8ba1 10,948.37\u4e07\u5143\uff0c\u5176\u4e2d\u4e3b\u8981\u4e3a\u77ed\u671f\u501f\u6b3e\u3001\u5e94\u4ed8\u8d26\u6b3e\u548c\u5e94\u4ed8\u804c\u5de5\u85aa\u916c\uff0c\u5206\u522b\u4e3a 7507.60\u4e07\u5143\u30011372.15\u4e07\u5143\u3001746.25\u4e07\u5143\u3002\u5176\u4e2d 2024 \u5e74\u4e0a\u534a\u5e74\u65b0\u589e\u77ed\u671f\u501f\u6b3e3228.18 \u4e07\u5143\uff08\u4e3a\u94f6\u884c\u8d37\u6b3e\uff0c\u4ee5\u53ca\u53bb\u5e74\u5df2\u8d37\u6b3e\u9879\u4ea7\u751f\u7684\u5229\u606f\uff09\u3002</p> <p>\u4ee5\u4e0b\u662f 2024 \u5e74\u524d 9 \u4e2a\u6708\u7684\u9879\u76ee\u53ca\u91d1\u989d\uff1a</p> \u79d1\u76ee 2024/9/30 2024\u5e74\u524d\u4e5d\u4e2a\u6708\u5360\u6bd4 \u8d27\u5e01\u8d44\u91d1 2181.23 24.1% \u4ea4\u6613\u6027\u91d1\u878d\u8d44\u4ea7 \u5e94\u6536\u7968\u636e \u5e94\u6536\u8d26\u6b3e\u51c0\u989d 1512.42 16.7% \u9884\u4ed8\u6b3e\u9879 108.56 1.2% \u5e94\u6536\u5229\u606f \u5176\u4ed6\u5e94\u6536\u6b3e\u51c0\u989d 116.27 1.3% \u5b58\u8d27\u51c0\u989d 3523.45 39.0% \u5176\u4ed6\u6d41\u52a8\u8d44\u4ea7 370.96 4.1% \u6d41\u52a8\u8d44\u4ea7\u5408\u8ba1 7812.89 86.5% \u957f\u671f\u80a1\u6743\u6295\u8d44\u51c0\u989d \u6295\u8d44\u6027\u623f\u5730\u4ea7\u51c0\u989d \u56fa\u5b9a\u8d44\u4ea7\u51c0\u989d 447.38 5.0% \u5728\u5efa\u5de5\u7a0b\u51c0\u989d \u4f7f\u7528\u6743\u8d44\u4ea7\u51c0\u989d 333.17 3.7% \u65e0\u5f62\u8d44\u4ea7\u51c0\u989d 400.82 4.4% \u5546\u8a89 \u957f\u671f\u5f85\u644a\u8d39\u7528 7.80 \u9012\u5ef6\u6240\u5f97\u7a0e\u8d44\u4ea7 30.63 \u5176\u4ed6\u975e\u6d41\u52a8\u8d44\u4ea7 \u975e\u6d41\u52a8\u8d44\u4ea7\u5408\u8ba1 1219.80 13.5% \u8d44\u4ea7\u5408\u8ba1 9032.70 \u77ed\u671f\u501f\u6b3e 7406.69 58.5% \u5e94\u4ed8\u8d26\u6b3e 802.67 6.3% \u9884\u6536\u6b3e\u9879 \u5408\u540c\u8d1f\u503a 2359.97 18.7% \u5e94\u4ed8\u804c\u5de5\u85aa\u916c 935.57 7.4% \u5e94\u4ea4\u7a0e\u8d39 211.63 1.7% \u5e94\u4ed8\u5229\u606f \u5176\u4ed6\u5e94\u4ed8\u6b3e \u4e00\u5e74\u5185\u5230\u671f\u7684\u975e\u6d41\u52a8\u8d1f\u503a \u5176\u4ed6\u6d41\u52a8\u8d1f\u503a 1.42 0.0% \u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 11717.95 92.6% \u957f\u671f\u501f\u6b3e 500.00 \u79df\u8d41\u8d1f\u503a 329.04 2.6% \u957f\u671f\u5e94\u4ed8\u6b3e \u9884\u8ba1\u8d1f\u503a \u9012\u5ef6\u6536\u76ca 105 \u975e\u6d41\u52a8\u8d1f\u503a\u5408\u8ba1 934.04 7.4% \u8d1f\u503a\u5408\u8ba1 12,651.99 \u5b9e\u6536\u8d44\u672c(\u6216\u80a1\u672c) 5969.15 \u8d44\u672c\u516c\u79ef 42236.47 \u5176\u4ed6\u7efc\u5408\u6536\u76ca -4.54 \u672a\u5206\u914d\u5229\u6da6 -51820.38 \u5c11\u6570\u80a1\u4e1c\u6743\u76ca \u80a1\u4e1c\u6743\u76ca\u5408\u8ba1 -3,619.30 \u8d1f\u503a\u53ca\u80a1\u4e1c\u6743\u76ca\u5408\u8ba1 9,032.70"},{"location":"CS/Chatgpt/ChatGPT_Cookbook/#searchgpt","title":"\u56db\u3001\u5982\u4f55\u7528\u597d SearchGPT","text":"<p>\u901a\u7528\u7528\u6cd5\uff1a</p> <p>as a [role], do something;</p> <p>Iterative Refinement \u5f88\u6709\u7528\uff0celaborate on sth.</p> <p>\u63d0\u4f9b\u53c2\u8003\u6e90\uff1aprovide sources for further reading.</p> <p>To maximize your efficiency with OpenAI's SearchGPT, consider the following advanced strategies:\ue204</p> <p>1. Craft Precise and Detailed Prompts    - Be Specific: \ue203Clearly articulate your query to guide SearchGPT effectively.\ue204      - Example: \ue203Instead of \"Explain machine learning,\" use \"Provide an overview of supervised learning techniques in machine learning.\"\ue204    - Set Context: \ue203Define the role or perspective you want SearchGPT to assume.\ue204      - Example: \ue203\"As a financial analyst, summarize the latest trends in renewable energy investments.\"\ue204</p> <p>2. Utilize Advanced Prompt Engineering Techniques    - Role Assignment: \ue203Instruct SearchGPT to act as a specific expert.\ue204      - Example: \ue203\"Act as a cybersecurity expert and explain the implications of the latest data breach.\"\ue204    - Step-by-Step Guidance: \ue203Request detailed, sequential explanations for complex topics.\ue204      - Example: \ue203\"Break down the process of setting up a virtual private network (VPN) step by step.\"\ue204    - Iterative Refinement: \ue203Engage in follow-up questions to delve deeper into subjects.\ue204      - Example: \ue203After receiving an initial response, ask, \"Can you elaborate on the security protocols involved in VPNs?\"\ue204</p> <p>3. Leverage SearchGPT's Web Browsing Capabilities    - Access Real-Time Information: \ue203Use SearchGPT to retrieve up-to-date data, such as current events or market trends.\ue204      - Example: \ue203\"Provide the latest stock prices for major tech companies.\"\ue204    - Verify Sources: \ue203Request citations or source links to ensure the credibility of the information provided.\ue204      - Example: \ue203\"Summarize recent advancements in AI research and provide sources for further reading.\"\ue204</p> <p>4. Employ Data Analysis Features    - Upload and Analyze Data: \ue203Utilize SearchGPT's capability to process and interpret datasets.\ue204      - Example: \ue203\"Analyze the attached sales data and identify quarterly trends.\"\ue204    - Generate Visualizations: \ue203Request charts or graphs to visualize data insights.\ue204      - Example: \ue203\"Create a bar chart comparing monthly revenue for the past year.\"\ue204</p> <p>5. Engage with Voice Mode for Natural Interactions    - Activate Voice Conversations: \ue203Use the voice mode to have spoken dialogues with SearchGPT, enhancing the conversational experience.\ue204      - Example: \ue203\"Explain the concept of blockchain technology in simple terms.\"\ue204    - Real-Time Language Translation: \ue203Leverage voice mode for immediate translation between languages.\ue204      - Example: \ue203\"Translate the following English sentence into Spanish: 'What are the benefits of renewable energy?'\"\ue204</p> <p>6. Maintain Security and Privacy    - Avoid Sharing Sensitive Information: \ue203Refrain from inputting personal or confidential data to protect your privacy.\ue204    - Verify Information: \ue203Cross-check critical information from multiple sources to ensure accuracy.\ue204</p> <p>\ue203By implementing these strategies, you can effectively harness the full potential of OpenAI's SearchGPT for a wide range of applications.\ue204 </p>"},{"location":"CS/Excel/Excel-Cheatsheet/","title":"Excel","text":"<p>Excel \u6279\u91cf\u5904\u7406\u6700\u91cd\u8981\u7684\u5c31\u662f\u51fd\u6570\uff0c\u4e3a\u4e86\u6210\u4e3a Excel \u4e13\u5bb6\uff0c\u8fd8\u662f\u5f97\u591a\u5b66\u70b9 Excel \u6709\u54ea\u4e9b\u51fd\u6570\uff0c\u5177\u4f53\u7528\u9014\u5728\u54ea\u91cc\uff1f</p>"},{"location":"CS/Excel/Excel-Cheatsheet/#1xlookup","title":"1\u3001Xlookup","text":"<p>\u5e94\u8be5\u662f\u540e\u9762 Excel 2019 \u5f15\u5165\u7684\uff0c\u8fd9\u4e2a\u6bd4\u4e4b\u524d vlookup \u8981\u7075\u6d3b\u4e0d\u5c11\u3002</p>"},{"location":"CS/Excel/Excel-Cheatsheet/#2let","title":"2\u3001let \u51fd\u6570\uff1a\u907f\u514d\u91cd\u590d\u5f15\u7528\u8f83\u957f\u7684\u51fd\u6570","text":"<p>\u8b6c\u5982\u6211\u4e4b\u524d\u60f3\u8981\u5728Excel \u4e2d\u5bf9 xlookup \u7684\u503c\u505a\u5224\u65ad\uff0c\u5982\u679c\u662f 0\uff0c\u5c31\u8fd4\u56de\u7a7a\u503c\u201c\u201d\uff1b\u5982\u679c\u4e0d\u662f\u96f6\uff0c\u5c31\u8fd4\u56de\u8868\u8fbe\u5f0f\u8fd9\u4e2a\u503c\uff1a</p> <p>=IF(XLOOKUP(A55,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(A\\)3:\\(A\\)67,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(B\\)3:\\(B\\)67,,0,1)=0,\"\",XLOOKUP(A55,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(A\\)3:\\(A\\)67,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(B\\)3:\\(B\\)67,,0,1))</p> <p>\u8fd9\u4e2a\u7b80\u76f4\u592a\u957f\u4e86\uff0c\u7528 let \u51fd\u6570\u7ed3\u5408 xlookup \u4f1a\u7b80\u6d01\u5f88\u591a\uff0c\u5176\u5c06 xlookup \u7684\u503c\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u53d8\u91cf result \u4e0a \uff1b\u540e\u7eed\u7528 if \u7b49\u51fd\u6570\uff0c\u5f15\u7528\u53d8\u91cf\u540d\u5373\u53ef\u3002</p> <p>\u4e0a\u8ff0\u516c\u5f0f\u7684\u7b49\u6548\u8868\u8fbe\u662f\uff1a</p> <p>=LET(result,XLOOKUP(A55,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(A\\)3:\\(A\\)67,'[20241031 \u77fd\u660c 2024 \u5e74 Q3 \u62a5\u8868.xlsx]\u5229\u6da6\u8868'!\\(B\\)3:\\(B\\)67,,0,1),IF(result=0,\"\",result))</p>"},{"location":"CS/Excel/Excel-Cheatsheet/#3","title":"3\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u51fd\u6570","text":"<p>\u7528 WPS \u662f\u514d\u8d39\u7684\uff0cExcel \u53ea\u6709 office 365 \u80fd\u7528\u3002</p>"},{"location":"CS/Python/Lecture0-introduction/","title":"CS50P-Lecture0-Introduction","text":""},{"location":"CS/Python/Lecture0-introduction/#lecture-0","title":"Lecture 0","text":"<ul> <li>Creating Code with Python</li> <li>Functions</li> <li>Bugs</li> <li>Improving Your First Python Program<ul> <li>Variables</li> <li>Comments</li> <li>Pseudocode</li> </ul> </li> <li>Further Improving Your First Python Program</li> <li>Strings and Paremeters<ul> <li>A small problem with quotation marks</li> </ul> </li> <li>Formatting Strings</li> <li>More on Strings</li> <li>Integers or int</li> <li>Readability Wins</li> <li>Float Basics</li> <li>More on Floats</li> <li>Def</li> <li>Returning Values</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#creating-code-with-python","title":"Creating Code with Python","text":"<ul> <li>VS Code is a special type of text editor that is called a compiler. At the top, you\u2019ll notice a text editor. At the bottom, you will see a terminal where you can execute commands.</li> <li>In the terminal, you can execute <code>code hello.py</code> to start coding.</li> <li>In the text editor above, you can type <code>print(\"hello, world\")</code>. This is a famous canonical program that nearly all coders write during their learning process.</li> <li>In the terminal window, you can execute commands. To run this program, you are going to need to move your cursor to the bottom of the screen, clicking in the terminal window. You can now type a second command in the terminal window. Next to the dollar sign, type <code>python hello.py</code> and press the enter key on your keyboard.</li> <li>Recall that computers really only understand zeros and ones. Therefore, when you run <code>python hello.py</code>, python will interpret the text that you created in <code>hello.py</code> and translate it into the zeros and ones that the computer can understand.</li> <li>The result of running the <code>python hello.py</code> program is <code>hello, world</code>.</li> <li>Congrats! You just created your first program.</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#functions","title":"Functions","text":"<ul> <li>Functions are verbs or actions that the computer or computer language will already know how to perform.</li> <li>In your <code>hello.py</code> program, the <code>print</code> function knows how to print to the terminal window.</li> <li>The <code>print</code> function takes arguments. In this case, <code>\"hello, world\"</code> are the arguments that the <code>print</code> function takes.</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#bugs","title":"Bugs","text":"<ul> <li>Bugs are a natural part of coding. These are mistakes, problems for you to solve! Don\u2019t get discouraged! This is part of the process of becoming a great programmer.</li> <li>Imagine in our <code>hello.py</code> program that accidentally typed <code>print(\"hello, world\"</code> notice that we missed the final <code>)</code> required by the compiler. If I purposefully make this mistake, you\u2019ll the compiler will output an error in the terminal window!</li> <li>Often, the error messages will inform you of your mistakes and provide you clues on how to fix them. However, there will be many times when the compiler is not this kind.</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#improving-your-first-python-program","title":"Improving Your First Python Program","text":"<ul> <li>We can personalize your first Python program.</li> <li> <p>In our text editor in <code>hello.py</code> we can add another function. <code>input</code> is a function that takes a prompt as an argument. We can edit our code to say</p> Python<pre><code>input(\"What's your name? \")\nprint(\"hello, world\")\n</code></pre> </li> <li> <p>This edit alone, however, will not allow your program to output what your user inputs. For that, we will need to introduce you to variables</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#variables","title":"Variables","text":"<ul> <li>A variable is just a container for a value within your own program.</li> <li> <p>In your program, you can introduce your own variable in your program by editing it to read</p> Python<pre><code>name = input(\"What's your name? \")\nprint(\"hello, world\")\n</code></pre> <p>Notice that this equal <code>=</code> sign in the middle of <code>name = input(\"What's your name? \")</code> has a special role in programming. This equal sign literally assigns what is on the right to what is on the left. Therefore, the value returned by <code>input(\"What's your name? \")</code> is assigned to <code>name</code>.</p> </li> <li> <p>If you edit your code as follows, you will notice an error</p> Python<pre><code>name = input(\"What's your name? \")\nprint(\"hello, name\")\n</code></pre> </li> <li> <p>The program will return <code>hello, name</code> in the terminal window regardless of what the user types.</p> </li> <li> <p>Further editing our code, you could type</p> Python<pre><code>name = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre> </li> <li> <p>The result in the terminal window would be</p> Python<pre><code>What's your name? David\nhello\nDavid\n</code></pre> </li> <li> <p>We are getting closer to the result we might intend!</p> </li> <li> <p>You can learn more in Python\u2019s documentation on data types.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#comments","title":"Comments","text":"<ul> <li>Comments are a way for programmers to track what they are doing in their programs and even inform others about their intentions for a block of code. In short, they are notes for yourself and others who will see your code!</li> <li> <p>You can add comments to your program to be able to see what it is that your program is doing. You might edit your code as follows:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre> </li> <li> <p>Comments can also serve as a to-do list for you.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#pseudocode","title":"Pseudocode","text":"<ul> <li> <p>Pseudocode is an important type of comment that becomes a special type of to-do list, especially when you don\u2019t understand how to accomplish a coding task. For example, in your code, you might edit your code to say:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Print hello\nprint(\"hello,\")\n\n# Print the name inputted\nprint(name)\n</code></pre> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#further-improving-your-first-python-program","title":"Further Improving Your First Python Program","text":"<ul> <li> <p>We can further edit our code as follows:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Print hello and the inputted name\nprint(\"hello, \" + name)\n</code></pre> </li> <li> <p>It turns out that some functions take many arguments.</p> </li> <li> <p>We can use a comma <code>,</code> to pass in multiple arguments by editing our code as follows:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Print hello and the inputted name\nprint(\"hello,\", name)\n</code></pre> <p>The output in the terminal, if we typed \u201cDavid\u201d we would be <code>hello, David</code>. Success.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#strings-and-paremeters","title":"Strings and Paremeters","text":"<ul> <li>A string, known as a <code>str</code> in Python, is a sequence of text.</li> <li> <p>Rewinding a bit in our code back to the following, there was a visual side effect of having the result appear on multiple lines:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\")\nprint(name)\n</code></pre> </li> <li> <p>Functions take arguments that influence their behavior. If we look at the documentation for <code>print</code> you\u2019ll notice we can learn a lot about the arguments that the print function takes.</p> </li> <li>Looking at this documentation, you\u2019ll learn that the print function automatically includes a piece of code <code>end='\\n'. This</code> \\n <code>indicates that the print function will automatically create a line break when run. The print function takes an argument called</code> end` and the default is to create a new line.</li> <li>However, we can technically provide an argument for <code>end</code> ourselves such that a new line is not created!</li> <li> <p>We can modify our code as follows:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(\"hello,\", end=\"\")\nprint(name)\n</code></pre> <p>By providing <code>end=\"\"</code> we are overwriting the default value of <code>end</code> such that it never creates a new line after this first print statement. Providing the name as \u201cDavid\u201d, the output in the terminal window will be <code>hello, David</code>.</p> </li> <li> <p>Parameters, therefore, are arguments that can be taken by a function.</p> </li> <li> <p>You can learn more in Python\u2019s documentation on <code>print</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#a-small-problem-with-quotation-marks","title":"A small problem with quotation marks","text":"<ul> <li>Notice how adding quotation marks as part of your string is challenging.</li> <li><code>print(\"hello,\"friend\"\")</code> will not work, and the compiler will throw an error.</li> <li>Generally, there are two approaches to fixing this. First, you could simply change the quotes to single quotation marks.</li> <li>Another, more commonly used approach would be code as <code>print(\"hello, \\\"friend\\\"\")</code>. The backslashes tell the compiler that the following character should be considered a quotation mark in the string and avoid a compiler error.</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#formatting-strings","title":"Formatting Strings","text":"<ul> <li> <p>Probably the most elegant way to use strings would be as follows:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice the <code>f</code> in <code>print(f\"hello, {name}\")</code>. This <code>f</code> is a special indicator for Python to treat this string a special way, different than previous approaches we have illustrated in this lecture. Expect that you will be using this style of strings quite frequently in this course.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#more-on-strings","title":"More on Strings","text":"<ul> <li>You should never expect your user to cooperate as intended. Therefore, you will need to ensure that the input of your user is corrected or checked.</li> <li>It turns out that built into strings is the ability to remove whitespace from a string.</li> <li> <p>By utilizing the method <code>strip</code> on <code>name</code> as <code>name = name.strip()</code>, will strip all the whitespaces on the left and right of the users input. You can modify your code to be:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str\nname = name.strip()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> <p>Rerunning this program, regardless of how many spaces you type before or after the name, it will strip off all the whitespace.</p> </li> <li> <p>Using the <code>title</code> method, it would title case the user\u2019s name:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str\nname = name.strip()\n\n# Capitalize the first letter of each word\nname = name.title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> </li> <li> <p>By this point, you might be very tired of typing <code>python</code> repeatedly in the terminal window. You cause use the up arrow of your keyboard to recall the most recent terminal commands you have made.</p> </li> <li> <p>Notice that you can modify your code to be more efficient:</p> Python<pre><code># Ask the user for their name\nname = input(\"What's your name? \")\n\n# Remove whitespace from the str and capitalize the first letter of each word\nname = name.strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> <p>This creates the same result as your previous code.</p> </li> <li> <p>We could even go further!</p> Python<pre><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\nname = input(\"What's your name? \").strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> </li> <li> <p>You can learn more about strings in Python\u2019s documentation on <code>str</code></p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#integers-or-int","title":"Integers or int","text":"<ul> <li>In Python, an integer is referred to as an <code>int</code>.</li> <li>In the world of mathematics, we are familiar with +, -, *, /, and % operators. That last operator <code>%</code> or modulo operator may not be very familiar to you.</li> <li>You don\u2019t have to use the text editor window in your compiler to run Python code. Down in your terminal, you can run <code>python</code> alone. You will be presented with <code>&gt;&gt;&gt;</code> in the terminal window. You can then run live, interactive code. You could type <code>1+1</code>, and it will run that calculation. This mode will not commonly be used during this course.</li> <li>Opening up VS Code again, we can type <code>code calculator.py</code> in the terminal. This will create a new file in which we will create our own calculator.</li> <li> <p>First, we can declare a few variables.</p> Python<pre><code>x = 1\ny = 2\n\nz = x + y\n\nprint(z)\n</code></pre> <p>Naturally, when we run <code>python calculator.py</code> we get the result in the terminal window of <code>3</code>. We can make this more interactive using the <code>input</code> function.</p> Python<pre><code>x = input(\"What's x? \")\ny = input(\"What's y? \")\n\nz = x + y\n\nprint(z)\n</code></pre> </li> <li> <p>Running this program, we discover that the output is incorrect as <code>12</code>. Why might this be?</p> </li> <li> <p>Prior, we have seen how the <code>+</code> sign concatenates two strings. Because your input from your keyboard on your computer comes into the compiler as text, it is treated as a string. We, therefore, need to convert this input from a string to an integer. We can do so as follows:</p> Python<pre><code>x = input(\"What's x? \")\ny = input(\"What's y? \")\n\nz = int(x) + int(y)\n\nprint(z)\n</code></pre> <p>The result is now correct. The use of <code>int(x)</code> is called \u201ccasting,\u201d where a value is temporarily changed from one type of variable (in this case, a string) to another (here, an integer).</p> </li> <li> <p>We can further improve our program as follows:</p> Python<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nprint(x + y)\n</code></pre> <p>This illustrates that you can run functions on functions. The inner function is run first, and then the outer one is run. First, the <code>input</code> function is run. Then, the <code>int</code> function.</p> </li> <li> <p>You can learn more in Python\u2019s documtenation of <code>int</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#readability-wins","title":"Readability Wins","text":"<ul> <li>When deciding on your approach to a coding task, remember that one could make a reasonable argument for many approaches to the same problem.</li> <li>Regardless of what approach you take to a programming task, remember that your code must be readable. You should use comments to give yourself and others clues about what your code is doing. Further, you should create code in a way that is readable.</li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#float-basics","title":"Float Basics","text":"<ul> <li>A floating point value is a real number that has a decimal point in it, such as <code>0.52</code>.</li> <li> <p>You can change your code to support floats as follows:</p> Python<pre><code>x = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\nprint(x + y)\n</code></pre> <p>This change allows your user to enter <code>1.2</code> and <code>3.4</code> to present a total of <code>4.6</code>.</p> </li> <li> <p>Let\u2019s imagine, however, that you want to round the total to the nearest integer. Looking at the Python documentation for <code>round</code>, you\u2019ll see that the available arguments are <code>round(number[n, ndigits])</code>. Those square brackets indicate that something optional can be specified by the programmer. Therefore, you could do <code>round(n)</code> to round a digit to its nearest integer. Alternatively, you could code as follows:</p> Python<pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Create a rounded result\nz = round(x + y)\n\n# Print the result\nprint(z)\n</code></pre> <p>The output will be rounded to the nearest integer.</p> </li> <li> <p>What if we wanted to format the output of long numbers? For example, rather than seeing <code>1000</code>, you may wish to see <code>1,000</code>. You could modify your code as follows:</p> Python<pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Create a rounded result\nz = round(x + y)\n\n# Print the formatted result\nprint(f\"{z:,}\")\n</code></pre> <p>Though quite cryptic, that <code>print(f\"{z:,}\")</code> creates a scenario where the outputted <code>z</code> will include commas where the result could look like <code>1,000</code> or <code>2,500</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#more-on-floats","title":"More on Floats","text":"<ul> <li> <p>How can we round floating point values? First, modify your code as follows:</p> Python<pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result\nz = x / y\n\n# Print the result\nprint(z)\n</code></pre> <p>When inputting <code>2</code> as x and <code>3</code> as y, the result z is <code>0.6666666666</code>, seemingly going on to infinite as we might expect.</p> </li> <li> <p>Let\u2019s imagine that we want to round this down. We could modify our code as follows:</p> Python<pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result and round\nz = round(x / y, 2)\n\n# Print the result\nprint(z)\n</code></pre> <p>As we might expect, this will round the result to the nearest two decimal points.</p> </li> <li> <p>We could also use <code>fstring</code> to format the output as follows:</p> Python<pre><code># Get the user's input\nx = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\n\n# Calculate the result\nz = x / y\n\n# Print the result\nprint(f\"{z:.2f}\")\n</code></pre> <p>This cryptic <code>fstring</code> code displays the same as our prior rounding strategy.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>float</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#def","title":"Def","text":"<ul> <li>Wouldn\u2019t it be nice to create our own functions?</li> <li> <p>Let\u2019s bring back our final code of <code>hello.py</code> by typing <code>code hello.py</code> into the terminal window. Your starting code should look as follows:</p> Python<pre><code># Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\nname = input(\"What's your name? \").strip().title()\n\n# Print the output\nprint(f\"hello, {name}\")\n</code></pre> <p>We can better our code to create our own special function that says \u201chello\u201d for us!</p> </li> <li> <p>Erasing all our code in our text editor, let\u2019s start from scratch:</p> Python<pre><code>name = input(\"What's your name? \")\nhello()\nprint(name)\n</code></pre> <p>Attempting to run this code, your compiler will throw an error. After all, there is no defined function for <code>hello</code>.</p> </li> <li> <p>We can create our own function called <code>hello</code> as follows:</p> Python<pre><code>def hello():\n    print(\"hello\")\n\n\nname = input(\"What's your name? \")\nhello()\nprint(name)\n</code></pre> <p>Notice that everything under <code>def hello()</code> is indented. Python is an indented language. It uses indentation to understand what is part of the above function. Therefore, everything in the <code>hello</code> function must be indented. When something is not indented, it treats it as if it is not inside the <code>hello</code> function. Running <code>python hello.py</code> in the terminal window, you\u2019ll see that your output is not exactly as you may want.</p> </li> <li> <p>We can further improve our code:</p> Python<pre><code># Create our own function\ndef hello(to):\n    print(\"hello,\", to)\n\n\n# Output using our own function\nname = input(\"What's your name? \")\nhello(name)\n</code></pre> <p>Here, in the first lines, you are creating your <code>hello</code> function. This time, however, you are telling the compiler that this function takes a single parameter: a variable called <code>to</code>. Therefore, when you call <code>hello(name)</code> the computer passes <code>name</code> into the <code>hello</code> function as <code>to</code>. This is how we pass values into functions. Very useful! Running <code>python hello.py</code> in the terminal window, you\u2019ll see that the output is much closer to our ideal presented earlier in this lecture.</p> </li> <li> <p>We can change our code to add a default value to <code>hello</code>:</p> Python<pre><code># Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\n# Output using our own function\nname = input(\"What's your name? \")\nhello(name)\n\n# Output without passing the expected arguments\nhello()\n</code></pre> <p>Test out your code yourself. Notice how the first <code>hello</code> will behave as you might expect, and the second hello, which is not passed a value, will, by default, output <code>hello, world</code>.</p> </li> <li> <p>We don\u2019t have to have our function at the start of our program. We can move it down, but we need to tell the compiler that we have a <code>main</code> function and a separate <code>hello</code> function.</p> Python<pre><code>def main():\n\n    # Output using our own function\n    name = input(\"What's your name? \")\n    hello(name)\n\n    # Output without passing the expected arguments\n    hello()\n\n\n# Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n</code></pre> <p>This alone, however, will create an error of sorts. If we run <code>python hello.py</code>, nothing happens! The reason for this is that nothing in this code is actually calling the <code>main</code> function and bringing our program to life.</p> </li> <li> <p>The following very small modification will call the <code>main</code> function and restore our program to working order:</p> Python<pre><code>def main():\n\n    # Output using our own function\n    name = input(\"What's your name? \")\n    hello(name)\n\n    # Output without passing the expected arguments\n    hello()\n\n\n# Create our own function\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\nmain()\n</code></pre> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#returning-values","title":"Returning Values","text":"<ul> <li>You can imagine many scenarios where you don\u2019t just want a function to perform an action but also to return a value back to the main function. For example, rather than simply printing the calculation of <code>x + y</code>, you may want a function to return the value of this calculation back to another part of your program. This \u201cpassing back\u201d of a value we call a <code>return</code> value.</li> <li> <p>Returning to our <code>calculator.py</code> code by typing <code>code calculator.py</code>. Erase all code there. Rework the code as follows:</p> Python<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nmain()\n</code></pre> <p>Effectively, <code>x</code> is passed to <code>square</code>. Then, the calculation of <code>x * x</code> is returned back to the main function.</p> </li> </ul>"},{"location":"CS/Python/Lecture0-introduction/#summing-up","title":"Summing Up","text":"<p>Through the work of this single lecture, you have learned abilities that you will use countless times in your own programs. You have learned about\u2026</p> <ul> <li>Creating your first programs in Python;</li> <li>Functions;</li> <li>Bugs;</li> <li>Variables;</li> <li>Comments;</li> <li>Pseudocode;</li> <li>Strings;</li> <li>Parameters;</li> <li>Formatted Strings;</li> <li>Integers;</li> <li>Principles of readability;</li> <li>Floats;</li> <li>Creating your own functions; and</li> <li>Return values.</li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/","title":"CS50P-Lecture1-Conditionals","text":""},{"location":"CS/Python/Lecture1-Conditionals/#lecture-1","title":"Lecture 1","text":"<ul> <li>Conditionals</li> <li>if Statements</li> <li>Control Flow, elif, and else</li> <li>or</li> <li>and</li> <li>Modulo</li> <li>Creating Our Own Parity Function</li> <li>Pythonic</li> <li><code>match</code><ul> <li>Summing Up</li> </ul> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#conditionals","title":"Conditionals","text":"<ul> <li>Conditionals allow you, the programmer, to allow your program to make decisions: As if your program has the choice between taking the left-hand road or the right-hand road based upon certain conditions.</li> <li>Built within Python are a set of \u201coperators\u201d that are used to ask mathematical questions.</li> <li><code>&gt;</code> and <code>&lt;</code> symbols are probably quite familiar to you.</li> <li><code>&gt;=</code> denotes \u201cgreater than or equal to.\u201d</li> <li><code>&lt;=</code> denotes \u201cless than or equal to.\u201d</li> <li><code>==</code> denotes \u201cequals, though do notice the double equal sign! A single equal sign would assign a value. Double equal signs are used to compare variables.</li> <li><code>!=</code> denotes \u201cnot equal to.</li> <li>Conditional statements compare a left-hand term to a right-hand term.</li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#if-statements","title":"if Statements","text":"<ul> <li>In your terminal window, type <code>code compare.py</code>. This will create a brand new file called \u201ccompare.\u201d</li> <li> <p>In the text editor window, begin with the following:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\n</code></pre> <p>Notice how your program takes the input of the user for both x and y, casting them as integers and saving them into their respective x and y variables. Then, the <code>if</code> statement compares x and y. If the condition of <code>x &lt; y</code> is met, the <code>print</code> statement is executed.</p> </li> <li> <p><code>if</code> statements use <code>bool</code> or boolean values (true or false) to decide whether or not to execute. If the statement of <code>x &gt; y</code> is true, the compiler will register it as <code>true</code> and execute the code.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#control-flow-elif-and-else","title":"Control Flow, elif, and else","text":"<ul> <li> <p>Further revise your code as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nif x &gt; y:\n    print(\"x is greater than y\")\nif x == y:\n    print(\"x is equal to y\")\n</code></pre> <p>Notice how you are providing a series of <code>if</code> statements. First, the first <code>if</code> statement is evaluated. Then, the second <code>if</code> statement runs its evaluation. Finally, the last <code>if</code> statement runs its evaluation. This flow of decisions is called \u201ccontrol flow.\u201d</p> </li> <li> <p>Our code can be represented as follows:</p> Text Only<pre><code>flowchart TD\n  A([start]) --&gt; B{x &lt; y}\n  B -- True --&gt; C[\"#quot;x is less than y#quot;\"]\n  C --&gt; D{x &gt; y}\n  D -- True --&gt; E[\"#quot;x is greater than y#quot;\"]\n  E --&gt; F{x == y}\n  F -- True --&gt; G[\"#quot;x is equal to y#quot;\"]\n  G --&gt; H([stop])\n  B -- False --&gt; D\n  D -- False --&gt; F\n  F -- False --&gt; H\n</code></pre> </li> <li> <p>This program can be improved by not asking three consecutive questions. After all, not all three questions can have an outcome of <code>true</code>! Revise your program as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelif x == y:\n    print(\"x is equal to y\")\n</code></pre> <p>Notice how the use of <code>elif</code> allows the program to make fewer decisions. First, the <code>if</code> statement is evaluated. If this statement is found to be true, all the <code>elif</code> statements will not be run at all. However, if the <code>if</code> statement is evaluated and found to be false, the first <code>elif</code> will be evaluated. If this is true, it will not run the final evaluation.</p> </li> <li> <p>Our code can be represented as follows:</p> Text Only<pre><code>flowchart TD\n  A([start]) --&gt; B{x &lt; y}\n  B -- True --&gt; C[\"#quot;x is less than y#quot;\"]\n  B -- False --&gt; D{x &gt; y}\n  D -- True --&gt; E[\"#quot;x is greater than y#quot;\"]\n  D -- False --&gt; F{x == y}\n  F -- True --&gt; G[\"#quot;x is equal to y#quot;\"]\n  G --&gt; H([stop])\n  F -- False --&gt; H\n  C --&gt; H\n  E --&gt; H\n</code></pre> </li> <li> <p>While your computer may not notice a difference speed-wise between our first program and this revised program, consider how an online server running billions or trillions of these types of calculations each day could definitely be impacted by such a small coding decision.</p> </li> <li> <p>There is one final improvement we can make to our program. Notice how logically <code>elif x == y</code> is not a necessary evaluation to run. After all, if logically x is not less than y AND x is not greater than y, x MUST equal y. Therefore, we don\u2019t have to run <code>elif x == y</code>. We can create a \u201ccatch-all,\u201d default outcome using an <code>else</code> statement. We can revise as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> <p>Notice how the relative complexity of this program has decreased through our revision.</p> </li> <li> <p>Our code can be represented as follows:</p> Text Only<pre><code>flowchart TD\n  A([start]) --&gt; B{x &lt; y}\n  B -- True --&gt; C[\"#quot;x is less than y#quot;\"]\n  B -- False --&gt; D{x &gt; y}\n  D -- True --&gt; E[\"#quot;x is greater than y#quot;\"]\n  D -- False --&gt; F[\"#quot;x is equal to y#quot;\"]\n  F --&gt; G([stop])\n  C --&gt; G\n  E --&gt; G\n</code></pre> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#or","title":"or","text":"<ul> <li> <p><code>or</code> allows your program to decide between one or more alternatives. For example, we could further edit our program as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x &lt; y or x &gt; y:\n    print(\"x is not equal to y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> <p>Notice that the result of our program is the same, but the complexity is decreased. The efficiency of our code is increased.</p> </li> <li> <p>At this point, our code is pretty great. However, could the design be further improved? We could further edit our code as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x != y:\n    print(\"x is not equal to y\")\nelse:\n    print(\"x is equal to y\")\n</code></pre> <p>Notice how we removed the <code>or</code> entirely and simply asked, \u201cIs x not equal to y?\u201d We ask one and only one question. Very efficient!</p> </li> <li> <p>For the purpose of illustration, we could also change our code as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\ny = int(input(\"What's y? \"))\n\nif x == y:\n    print(\"x is equal to y\")\nelse:\n    print(\"x is not equal to y\")\n</code></pre> <p>Notice that the <code>==</code> operator evaluates if what is on the left and right are equal to one another. The use of double equal signs is very important. If you use only one equal sign, an error will likely be thrown by the compiler.</p> </li> <li> <p>Our code can be illustrated as follows:</p> Text Only<pre><code>flowchart TD\n  A([start]) --&gt; B{x == y}\n  B -- True --&gt; C[\"#quot;x is equal to y#quot;\"]\n  B -- False --&gt; E[\"#quot;x is not equal to y#quot;\"]\n  C --&gt; F([stop])\n  E --&gt; F\n</code></pre> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#and","title":"and","text":"<ul> <li>Similar to <code>or</code>, <code>and</code> can be used within conditional statements.</li> <li> <p>Execute in the terminal window <code>code grade.py</code>. Start your new program as follows:</p> Text Only<pre><code>score = int(input(\"Score: \"))\n\nif score &gt;= 90 and score &lt;= 100:\n    print(\"Grade: A\")\nelif score &gt;=80 and score &lt; 90:\n    print(\"Grade: B\")\nelif score &gt;=70 and score &lt; 80:\n    print(\"Grade: C\")\nelif score &gt;=60 and score &lt; 70:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n</code></pre> <p>Notice that by executing <code>python grade.py</code>, you will be able to input a score and get a grade. However, notice how there is potential for bugs.</p> </li> <li> <p>Typically, we do not want to ever trust our users to input the correct information. We could improve our code as follows:</p> Text Only<pre><code>  score = int(input(\"Score: \"))\n\n  if 90 &lt;= score &lt;= 100:\n      print(\"Grade: A\")\n  elif 80 &lt;= score &lt; 90:\n      print(\"Grade: B\")\n  elif 70 &lt;= score &lt; 80:\n      print(\"Grade: C\")\n  elif 60 &lt;= score &lt; 70:\n      print(\"Grade: D\")\n  else:\n      print(\"Grade: F\")\n</code></pre> <p>Notice how Python allows you to chain together the operators and conditions in a way quite uncommon to other programming languages.</p> </li> <li> <p>Still, we can further improve our program:</p> Text Only<pre><code>score = int(input(\"Score: \"))\n\nif score &gt;= 90:\n    print(\"Grade: A\")\nelif score &gt;= 80:\n    print(\"Grade: B\")\nelif score &gt;= 70:\n    print(\"Grade: C\")\nelif score &gt;= 60:\n    print(\"Grade: D\")\nelse:\n    print(\"Grade: F\")\n</code></pre> <p>Notice how the program is improved by asking fewer questions. This makes our program easier to read and far more maintainable in the future.</p> </li> <li> <p>You can learn more in Python\u2019s documentation on control flow.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#modulo","title":"Modulo","text":"<ul> <li>In mathematics, parity refers to whether a number is either even or odd.</li> <li>The modulo <code>%</code> operator in programming allows one to see if two numbers divide evenly or divide and have a remainder.</li> <li>For example, 4 % 2 would result in zero, because it evenly divides. However, 3 % 2 does not divide evenly and would result in a number other than zero!</li> <li> <p>In the terminal window, create a new program by typing <code>code parity.py</code>. In the text editor window, type your code as follows:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\n\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n</code></pre> <p>Notice how our users can type in any number 1 or greater to see if it is even or odd.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#creating-our-own-parity-function","title":"Creating Our Own Parity Function","text":"<ul> <li>As discussed in Lecture 0, you will find it useful to create a function of your own!</li> <li> <p>We can create our own function to check whether a number is even or odd. Adjust your code as follows:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    if is_even(x):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n\ndef is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\nmain()\n</code></pre> <p>Notice that our <code>if</code> statement <code>is_even(x)</code> works even though there is no operator there. This is because our function returns a <code>bool</code> (or boolean), true or false, back to the main function. The <code>if</code> statement simply evaluates whether or not <code>is_even</code> of <code>x</code> is true or false.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#pythonic","title":"Pythonic","text":"<ul> <li> <p>In the programming world, there are types of programming that are called \u201cPythonic\u201d in nature. That is, there are ways to program that are sometimes only seen in Python programming. Consider the following revision to our program:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    if is_even(x):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n\ndef is_even(n):\n    return True if n % 2 == 0 else False\n\n\nmain()\n</code></pre> <p>Notice that this return statement in our code is almost like a sentence in English. This is a unique way of coding only seen in Python.</p> </li> <li> <p>We can further revise our code and make it more and more readable:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    if is_even(x):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n\ndef is_even(n):\n    return n % 2 == 0\n\n\nmain()\n</code></pre> <p>Notice that the program will evaluate what is happening within the <code>n % 2 == 0</code> as either true or false and simply return that to the main function.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#match","title":"<code>match</code>","text":"<ul> <li>Similar to <code>if</code>, <code>elif</code>, and <code>else</code> statements, <code>match</code> statements can be used to conditionally run code that matches certain values.</li> <li> <p>Consider the following program:</p> Text Only<pre><code>  name = input(\"What's your name? \")\n\n  if name == \"Harry\":\n      print(\"Gryffindor\")\n  elif name == \"Hermione\":\n      print(\"Gryffindor\")\n  elif name == \"Ron\": \n      print(\"Gryffindor\")\n  elif name == \"Draco\":\n      print(\"Slytherin\")\n  else:\n      print(\"Who?\")\n</code></pre> <p>Notice the first three conditional statements print the same response.</p> </li> <li> <p>We can improve this code slightly with the use of the <code>or</code> keyword:</p> Text Only<pre><code>  name = input(\"What's your name? \")\n\n  if name == \"Harry\" or name == \"Hermione\" or name == \"Ron\": \n      print(\"Gryffindor\")\n  elif name == \"Draco\":\n      print(\"Slytherin\")\n  else:\n      print(\"Who?\")\n</code></pre> <p>Notice the number of <code>elif</code> statements has decreased, improving the readability of our code.</p> </li> <li> <p>Alternatively, we can use <code>match</code> statements to map names to houses. Consider the following code:</p> Text Only<pre><code>  name = input(\"What's your name? \")\n\n  match name: \n      case \"Harry\":\n          print(\"Gryffindor\")\n      case \"Hermione\":\n          print(\"Gryffindor\")\n      case \"Ron\": \n          print(\"Gryffindor\")\n      case \"Draco\":\n          print(\"Slytherin\")\n      case _:\n          print(\"Who?\")\n</code></pre> <p>Notice the use of the <code>_</code> symbol in the last case. This will match with any input, resulting in similar behavior as an <code>else</code> statement.</p> </li> <li> <p>A match statement compares the value following the <code>match</code> keyword with each of the values following the <code>case</code> keywords. In the event a match is found, the respective indented code section is executed, and the program stops the matching.</p> </li> <li> <p>We can improve the code:</p> Text Only<pre><code>  name = input(\"What's your name? \")\n\n  match name: \n      case \"Harry\" | \"Hermione\" | \"Ron\":\n          print(\"Gryffindor\")\n      case \"Draco\":\n          print(\"Slytherin\")\n      case _:\n          print(\"Who?\")\n</code></pre> <p>Notice, the use of the single vertical bar <code>|</code>. Much like the <code>or</code> keyword, this allows us to check for multiple values in the same <code>case</code> statement.</p> </li> </ul>"},{"location":"CS/Python/Lecture1-Conditionals/#summing-up","title":"Summing Up","text":"<p>You now have the power within Python to use conditional statements to ask questions and have your program take action accordingly. In this lecture, we discussed\u2026</p> <ul> <li>Conditionals;</li> <li><code>if</code> Statements;</li> <li>Control flow, <code>elif</code>, and <code>else</code>;</li> <li><code>or</code>;</li> <li><code>and</code>;</li> <li>Modulo;</li> <li>Creating your own function;</li> <li>Pythonic coding;</li> <li>and <code>match</code>.</li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/","title":"CS50P-Lecture3-Exceptions","text":""},{"location":"CS/Python/Lecture3-Exceptions/#lecture-3","title":"Lecture 3","text":"<ul> <li>Exceptions</li> <li>Runtime Errors</li> <li><code>try</code></li> <li><code>else</code></li> <li>Creating a Function to Get an Integer</li> <li><code>pass</code></li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#exceptions","title":"Exceptions","text":"<ul> <li>Exceptions are things that go wrong within our coding.</li> <li> <p>In our text editor, type <code>code hello.py</code> to create a new file. Type as follows (with the intentional errors included):</p> <p>Notice that we intentionally left out a quotation mark.</p> </li> <li> <p>Running <code>python hello.py</code> in our terminal window, an error is outputted. The compiler states that it is a \u201csyntax error.\u201d\u201d Syntax errors are those that require you to double-check that you typed in your code correction.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of Errors and Exceptions.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#runtime-errors","title":"Runtime Errors","text":"<ul> <li>Runtime errors refer to those created by unexpected behavior within your code. For example, perhaps you intended for a user to input a number, but they input a character instead. Your program may throw an error because of this unexpected input from the user.</li> <li> <p>In your terminal window, run <code>code number.py</code>. Code as follows in your text editor:</p> Text Only<pre><code>x = int(input(\"What's x? \"))\nprint(f\"x is {x}\")\n</code></pre> <p>Notice that by including the <code>f</code>, we tell Python to interpolate what is in the curly braces as the value of <code>x</code>. Further, testing out your code, you can imagine how one could easily type in a string or a character instead of a number. Even still, a user could type nothing at all \u2013 simply hitting the enter key.</p> </li> <li> <p>As programmers, we should be defensive to ensure that our users are entering what we expected. We might consider \u201ccorner cases\u201d such as <code>-1</code>, <code>0</code>, or <code>cat</code>.</p> </li> <li> <p>If we run this program and type in \u201ccat\u201d, we\u2019ll suddenly see <code>ValueError: invalid literal for int() with base 10: 'cat'</code> Essentially, the Python interpreter does not like that we passed \u201ccat\u201d to the <code>print</code> function.</p> </li> <li> <p>An effective strategy to fix this potential error would be to create \u201cerror handling\u201d to ensure the user behaves as we intend.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of Errors and Exceptions.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#try","title":"<code>try</code>","text":"<ul> <li> <p>In Python <code>try</code> and <code>except</code> are ways of testing out user input before something goes wrong. Modify your code as follows:</p> Text Only<pre><code>try:\n    x = int(input(\"What's x?\"))\n    print(f\"x is {x}\")\nexcept ValueError:\n    print(\"x is not an integer\")\n</code></pre> <p>Notice how, running this code, inputting <code>50</code> will be accepted. However, typing in <code>cat</code> will produce an error visible to the user, instructing them why their input was not accepted.</p> </li> <li> <p>This is still not the best way to implement this code. Notice that we are trying to do two lines of code. For best practice, we should only <code>try</code> the fewest lines of code possible that we are concerned could fail. Adjust your code as follows:</p> Text Only<pre><code>try:\n    x = int(input(\"What's x?\"))\nexcept ValueError:\n    print(\"x is not an integer\")\n\nprint(f\"x is {x}\")\n</code></pre> <p>Notice that while this accomplishes our goal of trying as few lines as possible, we now face a new error! We face a <code>NameError</code> where <code>x is not defined</code>. Look at this code and consider: Why is x not defined in some cases?</p> </li> <li> <p>Indeed, if you examine the order of operations in <code>x = int(input(\"What's x?\"))</code>, working right to left, it could take an incorrectly inputted character and attempt to assign it as an integer. If this fails, the assignment of the value of <code>x</code> never occurs. Therefore, there is no x to print on our final line of code.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#else","title":"<code>else</code>","text":"<ul> <li> <p>It turns out that there is another way to implement <code>try</code> that could catch errors of this nature.</p> </li> <li> <p>Adjust your code as follows:</p> Text Only<pre><code>try:\n    x = int(input(\"What's x?\"))\nexcept ValueError:\n    print(\"x is not an integer\")\nelse:\n    print(f\"x is {x}\")\n</code></pre> <p>Notice that if no exception occurs, it will then run the block of code within <code>else</code>. Running <code>python number.py</code> and supplying <code>50</code>, you\u2019ll notice that the result will be printed. Trying again, this time supplying <code>cat</code>, you\u2019ll notice that the program now catches the error.</p> </li> <li> <p>Considering improving our code, notice that we are being a bit rude to our user. If our user does not cooperate, we currently simply end our program. Consider how we can use a loop to prompt the user for <code>x</code> and if they don\u2019t prompt again! Improve your code as follows:</p> Text Only<pre><code>while True:\n    try:\n        x = int(input(\"What's x?\"))\n    except ValueError:\n        print(\"x is not an integer\")\n    else:\n        break\n\nprint(f\"x is {x}\")\n</code></pre> <p>Notice that <code>while True</code> will loop forever. If the user succeeds in supplying the correct input, we can break from the loop and then print the output. Now, a user that inputs something incorrectly will be asked for input again.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#creating-a-function-to-get-an-integer","title":"Creating a Function to Get an Integer","text":"<ul> <li> <p>Surely, there are many times that we would want to get an integer from our user. Modify your code as follows:</p> Text Only<pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            x = int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n        else:\n            break\n    return x\n\n\nmain()\n</code></pre> <p>Notice that we are manifesting many great properties. First, we have abstracted away the ability to get an integer. Now, this whole program boils down to the first three lines of the program.</p> </li> <li> <p>Even still, we can improve this program. Consider what else you could do to improve this program. Modify your code as follows:</p> Text Only<pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            x = int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n        else:\n            return x\n\n\nmain()\n</code></pre> <p>Notice that <code>return</code> will not only break you out of a loop, but it will also return a value.</p> </li> <li> <p>Some people may argue you could do the following:</p> Text Only<pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            return int(input(\"What's x?\"))\n        except ValueError:\n            print(\"x is not an integer\")\n\n\nmain()\n</code></pre> <p>Notice this does the same thing as the previous iteration of our code, simply with fewer lines.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#pass","title":"<code>pass</code>","text":"<ul> <li> <p>We can make it such that our code does not warn our user, but simply re-asks them our prompting question by modifying our code as follows:</p> Text Only<pre><code>def main():\n    x = get_int()\n    print(f\"x is {x}\")\n\n\ndef get_int():\n    while True:\n        try:\n            return int(input(\"What's x?\"))\n        except ValueError:\n            pass\n\n\nmain()\n</code></pre> <p>Notice that our code will still function but will not repeatedly inform the user of their error. In some cases, you\u2019ll want to be very clear to the user what error is being produced. Other times, you might decide that you simply want to ask them for input again.</p> </li> <li> <p>One final refinement that could improve the implementation of this <code>get_int</code> function. Right now, notice that we are relying currently upon the honor system that the <code>x</code> is in both the <code>main</code> and <code>get_int</code> functions. We probably want to pass in a prompt that the user sees when asked for input. Modify your code as follows.</p> Text Only<pre><code>def main():\n    x = get_int(\"What's x? \")\n    print(f\"x is {x}\")\n\n\ndef get_int(prompt):\n    while True:\n        try:\n            return int(input(prompt))\n        except ValueError:\n            pass\n\n\nmain()\n</code></pre> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>pass</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture3-Exceptions/#summing-up","title":"Summing Up","text":"<p>Errors are inevitable in your code. However, you have the opportunity to use what was learned today to help prevent these errors. In this lecture, you learned about\u2026</p> <ul> <li>Exceptions</li> <li>Value Errors</li> <li>Runtime Errors</li> <li><code>try</code></li> <li><code>else</code></li> <li><code>pass</code></li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/","title":"CS50P-Lecture4-Libraries","text":""},{"location":"CS/Python/Lecture4-Libraries/#lecture-4","title":"Lecture 4","text":"<ul> <li>Libraries</li> <li>Random</li> <li>Statistics</li> <li>Command-Line Arguments</li> <li><code>slice</code></li> <li>Packages</li> <li>APIs</li> <li>Making Your Own Libraries</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#libraries","title":"Libraries","text":"<ul> <li>Generally, libraries are bits of code written by you or others can you can use in your program.</li> <li>Python allows you to share functions or features with others as \u201cmodules\u201d.</li> <li>If you copy and paste code from an old project, chances are you can create such a module or library that you could bring into your new project.</li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#random","title":"Random","text":"<ul> <li><code>random</code> is a library that comes with Python that you could import into your own project.</li> <li>It\u2019s easier as a coder to stand on the shoulders of prior coders.</li> <li>So, how do you load a module into your own program? You can use the word <code>import</code> in your program.</li> <li>Inside the <code>random</code> module, there is a built-in function called <code>random.choice(seq)</code>. <code>random</code> is the module you are importing. Inside that module, there is the <code>choice</code> function. That function takes into it a <code>seq</code> or sequence that is a list.</li> <li> <p>In your terminal window type <code>code generate.py</code>. In your text editor, code as follows:</p> Text Only<pre><code>import random\n\ncoin = random.choice([\"heads\", \"tails\"])\nprint(coin)\n</code></pre> <p>Notice that the list within <code>choice</code> has square braces, quotes, and a comma. Since you have passed in two items, Python does the math and gives a 50% chance for heads and tails. Running your code, you will notice that this code, indeed, does function well!</p> </li> <li> <p>We can improve our code. <code>from</code> allows us to be very specific about what we\u2019d like to import. Prior, our <code>import</code> line of code is bringing the entire contents of the functions of <code>random</code>. However, what if we want to only load a small part of a module? Modify your code as follows:</p> Text Only<pre><code>from random import choice\n\ncoin = choice([\"heads\", \"tails\"])\nprint(coin)\n</code></pre> <p>Notice that we now can import just the <code>choice</code> function of <code>random</code>. From that point forward, we no longer need to code <code>random.choice</code>. We can now only code <code>choice</code> alone. <code>choice</code> is loaded explicitly into our program. This saves system resources and potentially can make our code run faster!</p> </li> <li> <p>Moving on, consider the function <code>random.randint(a, b)</code>. This function will generate a random number between <code>a</code> and <code>b</code>. Modify your code as follows:</p> Text Only<pre><code>import random\n\nnumber = random.randint(1, 10)\nprint(number)\n</code></pre> <p>Notice that our code will randomly generate a number between <code>1</code> and <code>10</code>.</p> </li> <li> <p>We can introduce into our card <code>random.shuffle(x)</code> where it will shuffle a list into a random order.</p> Text Only<pre><code>import random\n\ncards = [\"jack\", \"queen\", \"king\"]\nrandom.shuffle(cards)\nfor card in cards:\n    print(card)\n</code></pre> <p>Notice that <code>random.shuffle</code> will shuffle the cards in place. Unlike other functions, it will not return a value. Instead, it will take the <code>cards</code> list and shuffle them inside that list. Run your code a few times to see the code functioning.</p> </li> <li> <p>We now have these three ways above to generate random information.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>random</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#statistics","title":"Statistics","text":"<ul> <li>Python comes with a built-in <code>statistics</code> library. How might we use this module?</li> <li> <p><code>average</code> is a function of this library that is quite useful. In your terminal window, type <code>code average.py</code>. In the text editor window, modify your code as follows:</p> Text Only<pre><code>import statistics\n\nprint(statistics.mean([100, 90]))\n</code></pre> <p>Notice that we imported a different library called <code>statistics</code>. The <code>mean</code> function takes a list of values. This will print the average of these values. In your terminal window, type <code>python average.py</code>.</p> </li> <li> <p>Consider the possibilities of using the <code>statistics</code> module in your own programs.</p> </li> <li>You can learn more in Python\u2019s documentation of <code>statistics</code>.</li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#command-line-arguments","title":"Command-Line Arguments","text":"<ul> <li>So far, we have been providing all values within the program that we have created. What if we wanted to be able to take input from the command-line? For example, rather than typing <code>python average.py</code> in the terminal, what if we wanted to be able to type <code>python average.py 100 90</code> and be able to get the average between <code>100</code> and <code>90</code>?</li> <li><code>sys</code> is a module that allows us to take arguments at the command line.</li> <li> <p><code>argv</code> is a function within the <code>sys</code> module that allows us to learn about what the user typed in at the command line. Notice how you will see <code>sys.argv</code> utilized in the code below. In the terminal window, type <code>code name.py</code>. In the text editor, code as follows:</p> Text Only<pre><code>import sys\n\nprint(\"hello, my name is\", sys.argv[1])\n</code></pre> <p>Notice that the program is going to look at what the user typed in the command line. Currently, if you type <code>python name.py David</code> into the terminal window, you will see <code>hello, my name is David</code>. Notice that <code>sys.argv[1]</code> is where <code>David</code> is being stored. Why is that? Well, in prior lessons, you might remember that lists start at the <code>0</code>th element. What do you think is held currently in <code>sys.argv[0]</code>? If you guessed <code>name.py</code>, you would be correct!</p> </li> <li> <p>There is a small problem with our program as it stands. What if the user does not type in the name at the command line? Try it yourself. Type <code>python name.py</code> into the terminal window. An error <code>list index out of range</code> will be presented by the compiler. The reason for this is that there is nothing at <code>sys.argv[1]</code> because nothing was typed! Here\u2019s how we can protect our program from this type of error:</p> Text Only<pre><code>import sys\n\ntry:\n    print(\"hello, my name is\", sys.argv[1])\nexcept IndexError:\n    print(\"Too few arguments\")\n</code></pre> <p>Notice that the user will now be prompted with a useful hint about how to make the program work if they forget to type in a name. However, could we be more defensive to ensure the user inputs the right values?</p> </li> <li> <p>Our program can be improved as follows:</p> Text Only<pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    print(\"Too few arguments\")\nelif len(sys.argv) &gt; 2:\n    print(\"Too many arguments\")\nelse:\n    print(\"hello, my name is\", sys.argv[1])\n</code></pre> <p>Notice how if you test your code, you will see how these exceptions are handled, providing the user with more refined advice. Even if the user types in too many or too few arguments, the user is provided clear instructions about how to fix the issue.</p> </li> <li> <p>Right now, our code is logically correct. However, there is something very nice about keeping our error checking separate from the remainder of our code. How could we separate out our error handling? Modify your code as follows:</p> Text Only<pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\nelif len(sys.argv) &gt; 2:\n    sys.exit(\"Too many arguments\")\n\nprint(\"hello, my name is\", sys.argv[1])\n</code></pre> <p>Notice how we are using a built-in function of <code>sys</code> called <code>exit</code> that allows us to exit the program if an error was introduced by the user. We can rest assured now that the program will never execute the final line of code and trigger an error. Therefore, <code>sys.argv</code> provides a way by which users can introduce information from the command line. <code>sys.exit</code> provides a means by which the program can exit if an error arises.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>sys</code>.</p> </li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#slice","title":"<code>slice</code>","text":"<ul> <li> <p><code>slice</code> is a command that allows us to take a <code>list</code> and tell the compiler where we want the compiler to consider the start of the <code>list</code> and the end of the <code>list</code>. For example, modify your code as follows:</p> Text Only<pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\n\nfor arg in sys.argv:\n    print(\"hello, my name is\", arg)\n</code></pre> <p>Notice that if you type <code>python name.py David Carter Rongxin</code> into the terminal window, the compiler will output not just the intended output of the names, but also <code>hello, my name is name.py</code>. How then could we ensure that the compiler ignores the first element of the list where <code>name.py</code> is currently being stored?</p> </li> <li> <p><code>slice</code> can be employed in our code to start the list somewhere different! Modify your code as follows:</p> Text Only<pre><code>import sys\n\nif len(sys.argv) &lt; 2:\n    sys.exit(\"Too few arguments\")\n\nfor arg in sys.argv[1:]:\n    print(\"hello, my name is\", arg)\n</code></pre> <p>Notice that rather than starting the list at <code>0</code>, we use square brackets to tell the compiler to start at <code>1</code> and go to the end using the <code>1:</code> argument. Running this code, you\u2019ll notice that we can improve our code using relatively simple syntax.</p> </li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#packages","title":"Packages","text":"<ul> <li>One of the reasons Python is so popular is that there are numerous powerful third-party libraries that add functionality. We call these third-party libraries, implemented as a folder, \u201cpackages\u201d.</li> <li>PyPI is a repository or directory of all available third-party packages currently available.</li> <li><code>cowsay</code> is a well-known package that allows a cow to talk to the user.</li> <li>Python has a package manager called <code>pip</code> that allows you to install packages quickly onto your system.</li> <li>In the terminal window, you can install the <code>cowsay</code> package by typing <code>pip install cowsay</code>. After a bit of output, you can now go about using this package in your code.</li> <li> <p>In your terminal window type <code>code say.py</code>. In the text editor, code as follows:</p> Text Only<pre><code>import cowsay\nimport sys\n\nif len(sys.argv) == 2:\n    cowsay.cow(\"hello, \" + sys.argv[1])\n</code></pre> <p>Notice that the program first checks that the user inputted at least two arguments at the command line. Then, the cow should speak to the user. Type <code>python say.py David</code> and you\u2019ll see a cow saying \u201chello\u201d to David.</p> </li> <li> <p>Further modify your code:</p> Text Only<pre><code>import cowsay\nimport sys\n\nif len(sys.argv) == 2:\n    cowsay.trex(\"hello, \" + sys.argv[1])\n</code></pre> <p>Notice that a t-rex is now saying \u201chello\u201d.</p> </li> <li> <p>You now can see how you could install third-party packages.</p> </li> <li>You can learn more on PyPI\u2019s entry for <code>cowsay</code></li> <li>You can find other third-party packages at PyPI</li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#apis","title":"APIs","text":"<ul> <li>APIs or \u201capplication program interfaces\u201d allow you to connect to the code of others.</li> <li><code>requests</code> is a package that allows your program to behave as a web browser would.</li> <li>In your terminal, type <code>pip install requests</code>. Then, type <code>code itunes.py</code>.</li> <li>It turns out that Apple iTunes has its own API that you can access in your programs. In your internet browser, you can visit https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=weezer and a text file will be downloaded. David constructed this URL by reading Apple\u2019s API documentation. Notice how this query is looking for a <code>song</code>, with a <code>limit</code> of one result, that relates to the <code>term</code> called <code>weezer</code>. Looking at this text file that is downloaded, you might find the format to be similar to that we\u2019ve programmed previously in Python.</li> <li>The format in the downloaded text file is called JSON, a text-based format that is used to exchange text-based data between applications. Literally, Apple is providing a JSON file that we could interpret in our own Python program.</li> <li> <p>In the terminal window, type <code>code itunes.py</code>. Code as follows:</p> Text Only<pre><code>import requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=\" + sys.argv[1])\nprint(response.json())\n</code></pre> <p>Notice how the returned value of <code>requests.get</code> will be stored in <code>response</code>. David, having read the Apple documentation about this API, knows that what is returned is a JSON file. Running <code>python itunes.py weezer</code>, you will see the JSON file returned by Apple. However, the JSON response is converted by Python into a dictionary. Looking at the output, it can be quite dizzying!</p> </li> <li> <p>It turns out that Python has a built-in JSON library that can help us interpret the data received. Modify your code as follows:</p> Text Only<pre><code>import json\nimport requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=1&amp;term=\" + sys.argv[1])\nprint(json.dumps(response.json(), indent=2))\n</code></pre> <p>Notice that <code>json.dumps</code> is implemented such that it utilizes <code>indent</code> to make the output more readable. Running <code>python itunes.py weezer</code>, you will see the same JSON file. However, this time, it is much more readable. Notice now that you will see a dictionary called <code>results</code> inside the output. Inside that dictionary called <code>results</code> there are numerous keys present. Look at the <code>trackName</code> value in the output. What track name do you see in your results?</p> </li> <li> <p>How could we simply output the name of just that track name? Modify your code as follows:</p> Text Only<pre><code>import json\nimport requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit()\n\nresponse = requests.get(\"https://itunes.apple.com/search?entity=song&amp;limit=50&amp;term=\" + sys.argv[1])\n\no = response.json()\nfor result in o[\"results\"]:\n    print(result[\"trackName\"])\n</code></pre> <p>Notice how we are taking the result of <code>response.json()</code> and storing it in <code>o</code> (as in the lowercase letter). Then, we are iterating through the <code>results</code> in <code>o</code> and printing each <code>trackName</code>. Also notice how we have increased the limit number of results to <code>50</code>. Run your program. See the results.</p> </li> <li> <p>You can learn more about <code>requests</code> through the library\u2019s documentation.</p> </li> <li>You can learn more about JSON in Python\u2019s documentation of JSON.</li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#making-your-own-libraries","title":"Making Your Own Libraries","text":"<ul> <li>You have the ability as a Python programmer to create your own library!</li> <li>Imagine situations where you may want to re-use bits of code time and time again or even share them with others!</li> <li> <p>We have been writing lots of code to say \u201chello\u201d so far in this course. Let\u2019s create a package to allow us to say \u201chello\u201d and \u201cgoodbye\u201d. In your terminal window, type <code>code sayings.py</code>. In the text editor, code as follows:</p> Text Only<pre><code>def hello(name):\n    print(f\"hello, {name}\")\n\n\ndef goodbye(name):\n    print(f\"goodbye, {name}\")\n</code></pre> <p>Notice that this code in and of itself does not do anything for the user. However, if a programmer were to import this package into their own program, the abilities created by the functions above could be implemented in their code.</p> </li> <li> <p>Let\u2019s see how we could implement code utilizing this package that we created. In the terminal window, type <code>code say.py</code>. In this new file in your text editor, type the following:</p> Text Only<pre><code>import sys\n\nfrom sayings import goodbye\n\nif len(sys.argv) == 2:\n    goodbye(sys.argv[1])\n</code></pre> <p>Notice that this code imports the abilities of <code>goodbye</code> from the <code>sayings</code> package. If the user inputed at least two arguments at the command line, it will say \u201cgoodbye\u201d along with the string inputed at the command line.</p> </li> </ul>"},{"location":"CS/Python/Lecture4-Libraries/#summing-up","title":"Summing Up","text":"<p>Libraries extend the abilities of Python. Some libraries are included by default with Python and simply need to be imported. Others are third-party packages that need to be installed using <code>pip</code>. You can make your own packages for use by yourself or others! In this lecture, you learned about\u2026</p> <ul> <li>Libraries</li> <li>Random</li> <li>Statistics</li> <li>Command-Line Arguments</li> <li>Slice</li> <li>Packages</li> <li>APIs</li> <li>Making Your Own Libraries</li> </ul>"},{"location":"CS/Python/Lecture5-Unittest/","title":"CS50P-Lecture5-Unittest","text":""},{"location":"CS/Python/Lecture5-Unittest/#lecture-5","title":"Lecture 5","text":"<ul> <li>Unit Tests</li> <li><code>assert</code></li> <li><code>pytest</code></li> <li>Testing Strings</li> <li>Organizing Tests into Folders</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/Lecture5-Unittest/#unit-tests","title":"Unit Tests","text":"<ul> <li>Up until now, you have been likely testing your own code using <code>print</code> statements.</li> <li>Alternatively, you may have been relying upon CS50 to test your code for you!</li> <li>It\u2019s most common in industry to write code to test your own programs.</li> <li> <p>In your console window, type <code>code calculator.py</code>. Note that you may have previously coded this file in a previous lecture. In the text editor, make sure that your code appears as follows:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that you could plausibly test the above code on your own using some obvious numbers such as <code>2</code>. However, consider why you might want to create a test that ensures that the above code functions appropriately.</p> </li> <li> <p>Following convention, let\u2019s create a new test program by typing <code>code test_calculator.py</code> and modify your code in the text editor as follows:</p> Text Only<pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    if square(2) != 4:\n        print(\"2 squared was not 4\")\n    if square(3) != 9:\n        print(\"3 squared was not 9\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we are importing the <code>square</code> function from <code>square.py</code> on the first line of code. By convention, we are creating a function called <code>test_square</code>. Inside that function, we define some conditions to test.</p> </li> <li> <p>In the console window, type <code>python test_calculator.py</code>. You\u2019ll notice that nothing is being outputted. It could be that everything is running fine! Alternatively, it could be that our test function did not discover one of the \u201ccorner cases\u201d that could produce an error.</p> </li> <li>Right now, our code tests two conditions. If we wanted to test many more conditions, our test code could easily become bloated. How could we expand our test capabilities without expanding our test code?</li> </ul>"},{"location":"CS/Python/Lecture5-Unittest/#assert","title":"<code>assert</code>","text":"<ul> <li> <p>Python\u2019s <code>assert</code> command allows us to tell the compiler that something, some assertion, is true. We can apply this to our test code as follows:</p> Text Only<pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    assert square(2) == 4\n    assert square(3) == 9\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we are definitively asserting what <code>square(2)</code> and <code>square(3)</code> should equal. Our code is reduced from four test lines down to two.</p> </li> <li> <p>We can purposely break our calculator code by modifying it as follows:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n + n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we have changed the <code>*</code> operator to a <code>+</code> in the square function.</p> </li> <li> <p>Now running <code>python test_square.py</code> in the console window, you will notice that an <code>AssertionError</code> is raised by the compiler. Essentially, this is the compiler telling us that one of our conditions was not met.</p> </li> <li> <p>One of the challenges that we are now facing is that our code could become even more burdensome if we wanted to provide more descriptive error output to our users. Plausibly, we could code as follows:</p> Text Only<pre><code>from calculator import square\n\n\ndef main():\n    test_square()\n\n\ndef test_square():\n    try:\n        assert square(2) == 4\n    except AssertionError:\n        print(\"2 squared is not 4\")\n    try:\n        assert square(3) == 9\n    except AssertionError:\n        print(\"3 squared is not 9\")\n    try:\n        assert square(-2) == 4\n    except AssertionError:\n        print(\"-2 squared is not 4\")\n    try:\n        assert square(-3) == 9\n    except AssertionError:\n        print(\"-3 squared is not 9\")\n    try:\n        assert square(0) == 0\n    except AssertionError:\n        print(\"0 squared is not 0\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that running this code will produce multiple errors. However, it\u2019s not producing all the errors above. This is a good illustration that it\u2019s worth testing multiple cases such that you might catch situations where there are coding mistakes.</p> </li> <li> <p>The above code illustrates a major challenge: How could we make it easier to test your code without dozens of lines of code like the above?</p> </li> </ul> <p>You can learn more in Python\u2019s documentation of <code>assert</code>.</p>"},{"location":"CS/Python/Lecture5-Unittest/#pytest","title":"<code>pytest</code>","text":"<ul> <li><code>pytest</code> is a third-party library that allows you to unit test your program. That is, you can test your functions within your program.</li> <li>To utilize <code>pytest</code> please type <code>pip install pytest</code> into your console window.</li> <li> <p>Before applying <code>pytest</code> to our own program, modify your <code>test_calculator</code> function as follows:</p> Text Only<pre><code>from calculator import square\n\n\ndef test_assert():\n    assert square(2) == 4\n    assert square(3) == 9\n    assert square(-2) == 4\n    assert square(-3) == 9\n    assert square(0) == 0\n</code></pre> <p>Notice how the above code asserts all the conditions that we want to test.</p> </li> <li> <p><code>pytest</code> allows us to run our program directly through it, such that we can more easily view the results of our test conditions.</p> </li> <li> <p>In the terminal window, type <code>pytest test_calculator.py</code>. You\u2019ll immediately notice that output will be provided. Notice the red <code>F</code> near the top of the output, indicating that something in your code failed. Further, notice that the red <code>E</code> provides some hints about the errors in your <code>calculator.py</code> program. Based upon the output, you can imagine a scenario where <code>3 * 3</code> has outputted <code>6</code> instead of <code>9</code>. Based on the results of this test, we can go correct our <code>calculator.py</code> code as follows:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we have changed the <code>+</code> operator to a <code>*</code> in the square function, returning it to a working state.</p> </li> <li> <p>Re-running <code>pytest test_calculator.py</code>, notice how no errors are produced. Congratulations!</p> </li> <li> <p>At the moment, it is not ideal that <code>pytest</code> will stop running after the first failed test. Again, let\u2019s return our <code>calculator.py</code> code back to its broken state:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n + n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we have changed the <code>*</code> operator to a <code>+</code> in the square function, returning it to a broken state.</p> </li> <li> <p>To improve our test code, let\u2019s modify <code>test_calculator.py</code> to divide the code into different groups of tests:</p> Text Only<pre><code>from calculator import square\n\n\ndef test_positive():\n    assert square(2) == 4\n    assert square(3) == 9\n\n\ndef test_negative():\n    assert square(-2) == 4\n    assert square(-3) == 9\n\n\ndef test_zero():\n    assert square(0) == 0\n</code></pre> <p>Notice that we have divided the same five tests into three different functions. Testing frameworks like <code>pytest</code> will run each function, even if there was a failure in one of them. Re-running <code>pytest test_calculator.py</code>, you will notice that many more errors are being displayed. More error output allows you to further explore what might be producing the problems within your code.</p> </li> <li> <p>Having improved our test code, return your <code>calculator.py</code> code to fully working order:</p> Text Only<pre><code>def main():\n    x = int(input(\"What's x? \"))\n    print(\"x squared is\", square(x))\n\n\ndef square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we have changed the <code>+</code> operator to a <code>*</code> in the square function, returning it to a working state.</p> </li> <li> <p>Re-running <code>pytest test_calculator.py</code>, you will notice that no errors are found.</p> </li> <li> <p>Finally, we can test that our program handles exceptions. Let\u2019s modify <code>test_calculator.py</code> to do just that.</p> </li> </ul> Text Only<pre><code>  import pytest\n\n  from calculator import square\n\n\n  def test_positive():\n      assert square(2) == 4\n      assert square(3) == 9\n\n\n  def test_negative():\n      assert square(-2) == 4\n      assert square(-3) == 9\n\n\n  def test_zero():\n      assert square(0) == 0\n\n\n  def test_str():\n      with pytest.raises(TypeError):\n          square(\"cat\")\n</code></pre> <p>Notice that instead of using <code>assert</code>, we are taking advantage of a function within the <code>pytest</code> library itself called <code>raises</code> which allows you to express that you expect an error to be raised. We need to go to the top of our program and add <code>import pytest</code> and then call <code>pytest.raises</code> with the type of error we are expecting.</p> <ul> <li> <p>Again, re-running <code>pytest test_calculator.py</code>, you will notice that no errors are found.</p> </li> <li> <p>In summary, it\u2019s up to you as a coder to define as many test conditions as you see fit!</p> </li> </ul> <p>You can learn more in Pytest\u2019s documentation of <code>pytest</code>.</p>"},{"location":"CS/Python/Lecture5-Unittest/#testing-strings","title":"Testing Strings","text":"<ul> <li> <p>Going back in time, consider the following code <code>hello.py</code>:</p> Text Only<pre><code>def main():\n    name = input(\"What's your name? \")\n    hello(name)\n\n\ndef hello(to=\"world\"):\n    print(\"hello,\", to)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we may wish to test the result of the <code>hello</code> function.</p> </li> <li> <p>Consider the following code for <code>test_hello.py</code>:</p> Text Only<pre><code>from hello import hello\n\n\ndef test_hello():\n    assert hello(\"David\") == \"hello, David\"\n    assert hello() == \"hello, world\"\n</code></pre> <p>Looking at this code, do you think that this approach to testing will work well? Why might this test not work well? Notice that the <code>hello</code> function in <code>hello.py</code> prints something: That is, it does not return a value!</p> </li> <li> <p>We can change our <code>hello</code> function within <code>hello.py</code> as follows:</p> Text Only<pre><code>def main():\n    name = input(\"What's your name? \")\n    print(hello(name))\n\n\ndef hello(to=\"world\"):\n    return f\"hello, {to}\"\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that we changed our <code>hello</code> function to return a string. This effectively means that we can now use <code>pytest</code> to test the <code>hello</code> function.</p> </li> <li> <p>Running <code>pytest test_hello.py</code>, our code will pass all tests!</p> </li> <li> <p>As with our previous test case in this lesson, we can break out our tests separately:</p> Text Only<pre><code>from hello import hello\n\n\ndef test_default():\n    assert hello() == \"hello, world\"\n\n\ndef test_argument():\n    assert hello(\"David\") == \"hello, David\"\n</code></pre> <p>Notice that the above code separates our test into multiple functions such that they will all run, even if an error is produced.</p> </li> </ul>"},{"location":"CS/Python/Lecture5-Unittest/#organizing-tests-into-folders","title":"Organizing Tests into Folders","text":"<ul> <li>Unit testing code using multiple tests is so common that you have the ability to run a whole folder of tests with a single command.</li> <li>First, in the terminal window, execute <code>mkdir test</code> to create a folder called <code>test</code>.</li> <li>Then, to create a test within that folder, type in the terminal window <code>code test/test_hello.py</code>. Notice that <code>test/</code> instructs the terminal to create <code>test_hello.py</code> in the folder called <code>test</code>.</li> <li> <p>In the text editor window, modify the file to include the following code:</p> Text Only<pre><code>from hello import hello\n\n\ndef test_default():\n    assert hello() == \"hello, world\"\n\n\ndef test_argument():\n    assert hello(\"David\") == \"hello, David\"\n</code></pre> <p>Notice that we are creating a test just as we did before.</p> </li> <li> <p><code>pytest</code> will not allow us to run tests as a folder simply with this file (or a whole set of files) alone without a special <code>__init__</code> file. In your terminal window, create this file by typing <code>code test/__init__.py</code>. Note the <code>test/</code> as before, as well as the double underscores on either side of <code>init</code>. Even leaving this <code>__init__.py</code> file empty, <code>pytest</code> is informed that the whole folder containing <code>__init__.py</code> has tests that can be run.</p> </li> <li>Now, typing <code>pytest test</code> in the terminal, you can run the entire <code>test</code> folder of code.</li> </ul> <p>You can learn more in Pytest\u2019s documentation of import mechanisms.</p>"},{"location":"CS/Python/Lecture5-Unittest/#summing-up","title":"Summing Up","text":"<p>Testing your code is a natural part of the programming process. Unit tests allow you to test specific aspects of your code. You can create your own programs that test your code. Alternatively, you can utilize frameworks like <code>pytest</code> to run your unit tests for you. In this lecture, you learned about\u2026</p> <ul> <li>Unit tests</li> <li><code>assert</code></li> <li><code>pytest</code></li> </ul>"},{"location":"CS/Python/Python-Notes-202410/","title":"Python\u7b14\u8bb0","text":"<ul> <li>\u4e00\u3001\u5173\u4e8e\u5982\u4f55\u8bfb\u6280\u80fd\u4e66<ul> <li>\u5fc3\u7406\u5efa\u8bbe</li> <li>\uff08\u4e8c\uff09\u4e00\u4e9b\u6709\u7528\u7684\u5de5\u5177\u548c\u8bfe\u7a0b</li> </ul> </li> <li>\u4e8c\u3001\u505a\u4e9b\u9879\u76ee\uff0c\u5e72\u4e2d\u5b66<ul> <li>1\u3001\u6279\u91cf\u67e5\u8be2\u5355\u8bcd\u7684\u7f8e\u5f0f\u53d1\u97f3</li> <li>2\u3001\u6279\u91cf tts\uff0c\u5229\u7528 openai</li> <li>3\u3001\u5229\u7528\u6279\u91cf\u67e5\u8be2\u7684\u5355\u8bcd\uff0c\u7ed3\u5408Openai prompt\uff0c\u751f\u62102\u4e2a\u4f8b\u53e5\uff0c\u7136\u540e\u7528 tts \u6587\u672c\u8f6c\u8bed\u97f3\u3002</li> <li>4\u3001\u5c06 conversation \u4e2d\u7684 Alloy \u548c Nova\uff0c\u5206\u522b\u7528\u4e0d\u540c\u8bed\u97f3\u751f\u6210\uff0c\u6700\u540e\u5408\u5e76\u5728\u4e00\u8d77\u3002</li> </ul> </li> <li>\u4e09\u3001\u603b\u7ed3\uff1a\u4e00\u4e9b\u5e38\u7528\u7684\u5c0f\u7247\u6bb5<ul> <li>1\u3001\u8f93\u5165\u5bc6\u7801\u7b49\u65f6\u5019\uff0c\u9700\u8981\u8bbe\u5b9a\u4e00\u5b9a\u7684\u89c4\u8303\u3002</li> <li>2\u3001For \u5faa\u73af\u53ef\u4ee5\u548c\u5217\u8868\u7ed3\u5408</li> <li>3\u3001\u5bf9\u5927\u578b JSON \u6587\u4ef6\u3001TXT \u6587\u4ef6\u8bfb\u53d6\u7684\u5fc3\u5f97</li> </ul> </li> <li>\u4e09\u3001\u6846\u67b6<ul> <li>1\u3001\u6570\u636e<ul> <li>\uff081\uff09\u6570\u5b57 Nubmers</li> <li>\uff082\uff09\u5e03\u5c14\u503c</li> </ul> </li> <li>2\u3001\u6d41\u7a0b\u63a7\u5236</li> <li>3\u3001\u51fd\u6570</li> <li>4\u3001\u5176\u4ed6</li> </ul> </li> <li>\u56db\u3001Python\u7c7b\u578b\u53ca\u5176\u8fd0\u7b97<ul> <li>\uff08\u4e00\uff09Boolean Types</li> <li>\uff08\u4e8c\uff09\u6570\u5b57 Numeric Types</li> <li>\uff08\u4e09\uff09Text Sequence\u2014\u2014Str</li> <li>\uff08\u56db\uff09Sequence Types: list, tuple, range<ul> <li>1\u3001Common Sequence Operations</li> <li>2\u3001\u5217\u8868 \uff08list\uff09\uff0c\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668</li> <li>3\u3001\u5143\u7ec4 Tuple\uff0c\u4e0d\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668</li> <li>4\u3001range</li> </ul> </li> <li>\uff08\u4e94\uff09\u96c6\u5408\uff08set\uff09\uff0c\u65e0\u5e8f\uff0c\u4e0d\u5305\u542b\u91cd\u590d\u5143\u7d20</li> <li>\uff08\u516d\uff09Mapping Types: dict</li> <li>5\u3001Iterator Types :list, range, tuple, str, sets, dict</li> <li>6\u3001\u6587\u4ef6</li> </ul> </li> <li>\u4e94\u3001if \u8bed\u53e5\u4e0efor\u5faa\u73af\u3001While\u5faa\u73af<ul> <li>1\u3001if \u8bed\u53e5</li> <li>2\u3001for \u5faa\u73af</li> <li>3\u3001while \u5faa\u73af</li> </ul> </li> <li>\u516d\u3001\u51fd\u6570<ul> <li>1\u3001Print</li> <li>2\u3001\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570</li> <li>2.1 Positional Arguments</li> <li>2.2 Keyword Arguments</li> <li>2.3 \u4e8c\u8005\u6df7\u5408\uff1apositional or keyword arguments</li> </ul> </li> <li>\u4e03\u3001\u7c7b</li> <li>\u516b\u3001\u6587\u4ef6\u548c\u5f02\u5e38<ul> <li>1\u3001\u8bfb\u53d6\u6587\u4ef6</li> <li>\uff081\uff09\u5404\u79cd\u6253\u5370\u6587\u672c\u5185\u5bb9\u7684\u65b9\u6cd5</li> <li>\uff082\uff09\u8d85\u5927\u6587\u672c\u5904\u7406</li> <li>2\u3001\u5199\u5165\u6587\u4ef6</li> <li>3\u3001\u5f02\u5e38</li> </ul> </li> <li>\u4e5d\u3001Regular Expressions \u6b63\u5219\u8868\u8fbe\u5f0f<ul> <li>\u4e00\u3001RE \u7684\u7528\u9014</li> <li>\u4e8c\u3001RE \u76f8\u5173\u8bed\u6cd5<ul> <li>\uff08\u4e00\uff09\u5143\u5b57\u7b26 metacharacters</li> <li>\uff08\u4e8c\uff09modules/methods</li> <li>(\u4e09\uff09Special Sequences</li> <li>\uff08\u56db\uff09repeated numbers/Quantifiers</li> <li>(\u4e94\uff09Sets</li> <li>\uff08\u516d\uff09Boundaries</li> </ul> </li> <li>\u4e09\u3001RE \u7684\u8d44\u6e90</li> <li>\u9644\u5f55\uff1aJupyter Notebooks \u5e38\u7528\u5feb\u6377\u952e</li> </ul> </li> </ul> <p>\u6765\u81ea\u4e8e\u300a\u81ea\u5b66\u662f\u95e8\u624b\u827a\u300b</p>"},{"location":"CS/Python/Python-Notes-202410/#_1","title":"\u4e00\u3001\u5173\u4e8e\u5982\u4f55\u8bfb\u6280\u80fd\u4e66","text":""},{"location":"CS/Python/Python-Notes-202410/#_2","title":"\u5fc3\u7406\u5efa\u8bbe","text":"<p>1\u3001\u4ece\u4e70\u4e00\u672c\u4e66\u7684\u65f6\u5019\uff0c\u81ea\u5b66\u6280\u80fd\u7684\u5f00\u59cb\uff0c\u5c31\u61c2\u5f97\uff0c\u8fd9\u672c\u4e66\u662f\u8981\u4e0d\u6b62\u8bfb\u4e00\u904d\u7684</p> <p>\u7b2c\u4e00\u904d\u5c31\u662f\u56eb\u56f5\u541e\u67a3\u7684\u8bfb</p> <p>\u62ff\u6765\u4e00\u672c\u4e66\u5f00\u59cb\u81ea\u5b66\u6280\u80fd\u7684\u65f6\u5019\uff0c\u4ed6\u4f1a\u5148\u7ffb\u7ffb\u76ee\u5f55\uff08Table Of Contents\uff09\uff0c\u770b\u770b\u5176\u4e2d\u6709\u6ca1\u6709\u81ea\u5df1\u5b8c\u5168\u6ca1\u6709\u63a5\u89e6\u8fc7\u7684\u6982\u5ff5\uff1b\u7136\u540e\u518d\u7ffb\u7ffb\u672f\u8bed\u8868\uff08Glossary\uff09\uff0c\u770b\u770b\u662f\u5426\u53ef\u4ee5\u5c3d\u91cf\u7406\u89e3\uff1b\u800c\u540e\u4f1a\u770b\u770b\u7d22\u5f15\uff08Index\uff09\uff0c\u6839\u636e\u9875\u7801\u63d0\u793a\uff0c\u76f4\u63a5\u7ffb\u5230\u76f8\u5173\u9875\u9762\u8fdb\u4e00\u6b65\u67e5\u627e\u2026\u2026 \u5728\u901a\u8bfb\u4e66\u7c4d\u4e4b\u524d\uff0c\u8fd8\u4f1a\u770b\u770b\u4e66\u540e\u7684\u53c2\u8003\u6587\u732e\uff08References\uff09\uff0c\u770b\u770b\u6b64\u4e66\u90fd\u5f15\u7528\u4e86\u54ea\u4e9b\u5927\u725b\u7684\u4e66\u7c4d\uff0c\u5f04\u4e0d\u597d\u4f1a\u987a\u624b\u591a\u4e70\u51e0\u672c\u3002</p> <p>2\u3001\u4e3a\u4e86\u4e60\u5f97\u65b0\u6280\u80fd\u53bb\u9605\u8bfb\uff0c\u5c31\u8981\u65bd\u5c55 \u201c\u53ea\u5b57\u4e0d\u5dee\u5730\u9605\u8bfb\u201d \u8fd9\u9879\u4e13\u95e8\u7684\u6280\u80fd\u3002\u6240\u4ee5\u7b2c\u4e8c\u904d\u3001\u7b2c\u4e09\u904d\u5c31\u8981\u53ea\u5b57\u4e0d\u5dee\u7684\u9605\u8bfb\u4e86\u3002</p> <p>3\u3001\u5728\u9605\u8bfb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u53cd\u590d\u505a\u5f52\u7eb3\u6574\u7406\uff0c\u4e3a\u7684\u5c31\u662f\u8bb0\u4f4f\u77e5\u8bc6\u70b9</p> <p>\u51c6\u5907\u4e00\u4e2a\u5c0f\u672c\u5b50\uff0c\u5f88\u91cd\u8981\u3002</p> <p>\u6211\u4e4b\u540e\u81ea\u5b66 Python\uff0c\u4e5f\u5728\u5370\u8c61\u7b14\u8bb0\u5efa\u7acb\u4e00\u4e2a Python \u81ea\u5b66\u65e5\u8bb0\u3002</p> <p>4\u3001\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u5148\u7528\u8d77\u6765\uff0c\u540e\u9762\u6162\u6162\u4fee\u6b63</p> <p>5\u3001\u5c0a\u91cd\u524d\u4eba\u7684\u603b\u7ed3\u548c\u5efa\u8bae\u3002</p> <p>6\u3001\u591a\u53c2\u8003Python\u5b98\u65b9\u6587\u6863\uff1ahttps://docs.python.org/3/</p> <p>\u5176\u4e2d\u5bf9\u521d\u5b66\u8005\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u94fe\u63a5\u662f\uff1a</p> <ul> <li>Tutorial:\u00a0https://docs.python.org/3/tutorial/index.html</li> <li>Library Reference:\u00a0https://docs.python.org/3/library/index.html</li> </ul> <p>\u4ee5\u540e\u9047\u5230\u4e0d\u61c2\u7684\uff0c\u7b2c\u4e00\u67e5\u8be2\u5bf9\u8c61\u5e94\u8be5\u662fPython Tutorial\uff0c\u800c\u4e0d\u662f\u767e\u5ea6\u3001\u8c37\u6b4c\u7b49\u6d4f\u89c8\u5f15\u64ce\u3002</p> <p>\u53ef\u4ee5\u7528 site:python.org</p> <p>\u8c37\u6b4c\u7684\u641c\u7d22\u79d8\u7c4d\uff0c\u591a\u53c2\u8003\uff1a</p> <p>7\u3001\u63d0\u524d\u5efa\u7acb\u9884\u7b97\u89c2\u5ff5\u5f88\u91cd\u8981</p> <p>\u5f88\u591a\u4eba\u5b66Python\u534a\u9014\u800c\u5e9f\uff0c\u5f80\u5f80\u5c31\u662f\u5e0c\u671b\u80fd\u591f\u5728\u534a\u4e2a\u6708\u5185\u638c\u63e1\u6240\u6709\u7684Python\u77e5\u8bc6\uff0c\u8fd9\u662f\u4e0d\u592a\u53ef\u80fd\u7684\uff0c\u63e0\u82d7\u52a9\u957f\u3002\u6240\u4ee5\u5b66Python\u8fc7\u7a0b\u4e2d\uff0c\u6211\u8981\u6709\u8db3\u591f\u7684\u8010\u5fc3\u3002\u6bcf\u5929\u7f16\u7a0b\uff0c100\u5929\u540e\u518d\u8bf4\u3002</p> <p>\u671f\u95f4\u8fd8\u8981\u4e0d\u65ad\u5730\u91cd\u590d\uff0c\u770bPython Tutorial\uff0c\u4e0d\u65ad\u5730\u53bb\u770b\u4ee5\u524d\u7684\u7b14\u8bb0\uff0c\u5f52\u7eb3\u603b\u7ed3\u3002</p> <p>\u4e00\u5207\u201c\u4e3b\u8981\u9760\u65f6\u95f4\u201d\u7684\u6d3b\u52a8\u90fd\u4e00\u6837\uff0c\u90fd\u9700\u8981\u5728\u4ece\u4e8b\u4e4b\u524d\u8ba4\u771f\u505a\u201c\u5fc3\u7406\u5efa\u8bbe\u201d\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bfb\u4e00\u672c\u6559\u7a0b\uff0c\u4e0a\u4e00\u4e2a\u57f9\u8bad\u73ed\u5c31\u4f1a\u4e86\u2014\u2014\u8fd9\u51e0\u4e4e\u662f\u9519\u89c9\u3002</p> <p>\u9996\u5148\u8981\u660e\u767d\uff0c\u8fd9\u80af\u5b9a\u662f\u4e2a\u6bd4\u201c\u5929\u771f\u7684\u60f3\u8c61\u201d\u8981\u957f\u7684\u591a\u7684\u8fc7\u7a0b\u3002</p> <p>\u5176\u6b21\u8981\u660e\u767d\uff0c\u5e76\u4e14\u8981\u8d8a\u6765\u8d8a\u81ea\u7136\u5730\u660e\u767d\uff0c\u54ea\u513f\u54ea\u513f\u90fd\u9700\u8981\u5f88\u591a\u91cd\u590d\u3002\u8bfb\uff0c\u8981\u8bfb\u5f88\u591a\u904d\uff1b\u7ec3\uff0c\u8981\u7ec3\u5f88\u591a\u904d\uff0c\u505a\u8981\u505a\u5f88\u591a\u904d\u3002</p> <p>8\u3001\u523b\u610f\u7ec3\u4e60</p> <p>\u8b6c\u5982\u5148\u5728\u7eb8\u4e0a\u628a\u7a0b\u5e8f\u5199\u4e0b\u6765\uff0c\u660e\u5929\u53bb\u4e70\u4e00\u4e2a\u672c\u5b50\uff0c\u4e13\u95e8\u5199Python\u7a0b\u5e8f\uff0c\u81ea\u5df1\u5728\u8111\u5b50\u91cc\u6267\u884c\uff0c\u770b\u662f\u5426\u4f1a\u62a5\u9519\uff0c\u4e4b\u540e\u8f6c\u5230\u7535\u8111\u4e0a\u7f16\u8f91\u5668\u8fd0\u884c\u3002</p> <p>\u5173\u95edPycharm\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff0c\u8001\u8001\u5b9e\u5b9e\u6253\u51fa\u4ee3\u7801\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#_3","title":"\uff08\u4e8c\uff09\u4e00\u4e9b\u6709\u7528\u7684\u5de5\u5177\u548c\u8bfe\u7a0b","text":"<p>1\u3001\u7528 VS Code \u4f5c\u4e3a\u4e3b\u8981\u7684\u7f16\u7a0b\u5de5\u5177\uff0c\u8fd9\u6837\u540c\u65f6\u53ef\u4ee5\u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u5199C \u8bed\u8a00\u548c Python \u4ee3\u7801\uff0c\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd\uff0c\u5c31\u50cf CS50x \u7b2c\u516d\u8bfe\u8bb2\u5f97\u90a3\u6837\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u4e0d\u9519\u3002</p> <p>2\u3001VS Code \u4e00\u4e9b\u5feb\u6377\u952e\uff1a - \u5c06 C \u7a0b\u5e8f\u548c Python \u4ee3\u7801\u5e76\u884c\u67e5\u770b\uff0c\u9996\u5148\u4e24\u4e2a\u7a0b\u5e8f\u90fd\u6253\u5f00\uff0c\u7136\u540e\u53ef\u4ee5\u62d6\u4f4f Python \u7a97\u53e3\u5f80\u53f3\u8fb9\u79fb\u52a8\u3002 - \u6ce8\u610fC \u7a0b\u5e8f\u8981\u8fd0\u884c\uff0c\u7528 <code>make xxx</code>\u547d\u4ee4(\u5047\u8bbe C \u4ee3\u7801\u6587\u4ef6\u540d\u79f0\u662f <code>xxx.c</code>)\uff0c\u800c\u4e0d\u662f\u53f3\u4e0a\u89d2\u7684 run code \u529f\u80fd\uff1b\u8fd0\u884c Python \u7a0b\u5e8f\u53ef\u4ee5\u7528\u547d\u4ee4\u884c <code>python xx.py</code>\uff0c\u4e5f\u53ef\u4ee5\u7528\u53f3\u4e0a\u89d2\u7684 run code \u529f\u80fd\u3002 - \u6279\u91cf\u52a0\u884c\u6ce8\u91ca\uff1a\u9009\u4e2d\u591a\u884c\u540e\uff0c\u6309\u5feb\u6377\u952e<code>Option+ Shift +K</code> \uff0c\u6279\u91cf\u53d6\u6d88\u6ce8\u91ca\uff1a<code>Option + Shift + -</code>\u3002 - \u82e5\u9700\u8981\u67e5\u770b C \u8bed\u8a00\u5173\u4e8e\u4efb\u4f55\u51fd\u6570\u7684\u6ce8\u91ca\uff0c\u53ef\u4ee5\u5728 terminal \u4e2d\u8f93\u5165 <code>man 3 keyword</code>\uff0c\u8b6c\u5982\u8bf4<code>man 3 printf</code>\uff0c\u53ef\u4ee5\u7528\u6765\u67e5\u770b printf\u7684\u7528\u6cd5\u3002\u6216\u8005\u53c2\u8003\u5b98\u7f51cpp reference</p> <p>3\u3001\u5728\u7ebf debugger \u5de5\u5177\uff0c\u53ef\u4ee5 vusialize \u53ef\u89c6\u5316Python\u3001C\u3001JavaScript \u6bcf\u4e00\u6b65\u6267\u884c\u7684\u8fc7\u7a0b\u3002</p> <p>https://pythontutor.com/</p> <p>\uff08\u4e09\uff09Python\u3001C\u3001Scratch \u7684\u5bf9\u6bd4\uff0c\u5305\u62ec\u5b9e\u73b0\u540c\u4e00\u4e2a\u529f\u80fd\uff0c\u5728\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u7684\u5b9e\u73b0\u7684\u533a\u522b \u53c2\u8003 c code \u6587\u4ef6\u5939</p> C(\u4ee5\u4e0b\u6bcf\u4e00\u53e5\u672b\u5c3e\u90fd\u8981\u52a0;) Python type conversion /casting (float) 3;(float)x / y; Float(3) \u6253\u5370 printf(\"%s\", \"Hello world.\\n\");\u4e0d\u540c\u5b57\u7b26\u4e32\u7528\u4e0d\u540c\u7684\u6807\u5fd7\u7b26 %i, %s,%c,%f\uff0c\u53c2\u8003 printf()\u51fd\u6570 print(\"Hello world.\",end =\"\\n\" )print(f\"Hello, {name}\", name), string comparison if(strcmp(s, \"+\") == 0){ }C \u8bed\u8a00\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8fdb\u884c\u5b57\u7b26\u4e32\u5224\u65ad\uff0c\u4e24\u4e2a\u76f8\u540c\u5b57\u7b26\u4e32\u4e5f\u65e0\u6cd5\u76f4\u63a5\u7528 == \u6bd4\u8f83\u3002 if (s = \"+\"):"},{"location":"CS/Python/Python-Notes-202410/#_4","title":"\u4e8c\u3001\u505a\u4e9b\u9879\u76ee\uff0c\u5e72\u4e2d\u5b66","text":""},{"location":"CS/Python/Python-Notes-202410/#1","title":"1\u3001\u6279\u91cf\u67e5\u8be2\u5355\u8bcd\u7684\u7f8e\u5f0f\u53d1\u97f3","text":"<p>\uff081\uff09\u7b2c\u4e00\u9636\u6bb5\u5b9e\u73b0\uff1aword\uff0c\u67e5\u8be2\u5355\u8bcd\uff0c\u5e76\u6279\u91cf\u5199\u56de csv</p> <p>\u76ee\u524d\u7ed3\u5408 POE \u7684 prompt \u5b8c\u6210\u4e86\u3002</p> <p>\uff082\uff09\u4efb\u52a1\uff1a\u5373\u540c\u65f6\u63d0\u53d6\u51faword\u3001prounciation\u548c\u5bf9\u5e94\u7684\u4f8b\u53e5\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09</p> <p>\u4e3e\u4e00\u53cd\u4e09\uff1a\u540c\u6837\u7684\u7a0b\u5e8f\u6211\u53ef\u4ee5\u505a\u53d8\u901a\uff0c\u8b6c\u5982\u628a\u5bf9\u5e94\u7684\u4f8b\u53e5\u4e5f\u63d0\u53d6\u51fa\u6765\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u81ea\u5df1\u5bf9 POE \u5f97\u6765\u7684\u7a0b\u5e8f\u7684\u7406\u89e3\uff0c\u53ea\u6709\u4e3e\u4e00\u53cd\u4e09\uff0c\u8fd9\u9879\u76ee\u4e2d\u953b\u70bc\u51fa\u6765\u7684\u80fd\u529b\u624d\u662f\u81ea\u5df1\u7684\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#2-tts-openai","title":"2\u3001\u6279\u91cf tts\uff0c\u5229\u7528 openai","text":"<p>\u8fd9\u91cc\u6709\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9\uff0c\u4e00\u5b9a\u8981\u9605\u8bfb\u5b98\u65b9\u6587\u6863API Reference Audio- Create speech \uff0c\u5176\u5b9e\u6587\u672c\u8f6c\u8bed\u97f3tts\u662f\u53ef\u4ee5\u63a7\u5236\u8bed\u97f3\u901f\u5ea6(speed)\u7684\u3002\u5982\u679c\u53ea\u770b[tts doc]https://platform.openai.com/docs/guides/text-to-speech\u4e2d\u7684\u4f8b\u53e5\uff0c\u662f\u6ca1\u6709\u7684\u3002\u8fd9\u5c31\u662f\u9605\u8bfb\u6240\u6709\u76f8\u5173\u6587\u6863\u7684\u597d\u5904\u3002</p> <p>\u6ce8\u610f\uff1a\u53f3\u8fb9\u7684 example request\uff0c\u53ef\u4ee5\u9009\u62e9 curl \u8fd8\u662f Python \u8bed\u8a00</p> <p></p>"},{"location":"CS/Python/Python-Notes-202410/#3openai-prompt2-tts","title":"3\u3001\u5229\u7528\u6279\u91cf\u67e5\u8be2\u7684\u5355\u8bcd\uff0c\u7ed3\u5408Openai prompt\uff0c\u751f\u62102\u4e2a\u4f8b\u53e5\uff0c\u7136\u540e\u7528 tts \u6587\u672c\u8f6c\u8bed\u97f3\u3002","text":"<p>\u6ce8\u610f\u9605\u8bfb Assisstant API</p>"},{"location":"CS/Python/Python-Notes-202410/#4-conversation-alloy-nova","title":"4\u3001\u5c06 conversation \u4e2d\u7684 Alloy \u548c Nova\uff0c\u5206\u522b\u7528\u4e0d\u540c\u8bed\u97f3\u751f\u6210\uff0c\u6700\u540e\u5408\u5e76\u5728\u4e00\u8d77\u3002","text":"<p>\u7ed3\u5408 Prompt \u751f\u6210\u7684\uff0c\u8fd9\u4e2a\u8fd8\u8981\u518d\u5b66\u4e60\u5b66\u4e60</p> <p>\u5fc5\u5907\u77e5\u8bc6\uff1a\u628a python pydub \u5e93\u597d\u597d\u770b\u770b\uff0c\u6709\u54ea\u4e9b method</p> Text Only<pre><code>\u6211\u8fd9\u91cc\u6709\u6bb5\u5bf9\u8bdd\uff0c\u662f\u7537\u5b69\u548c\u5973\u5b69\u7684\u4e00\u6bb5\u5bf9\u8bdd\u6587\u672c\uff0c\u6211\u60f3\u5b9e\u73b0\u5982\u4e0b\u529f\u80fd\uff1a1\u3001\u7537\u5b69\u7684\u6587\u672c\u7528 openai tts \u6a21\u578b\u7684nova voice \u8f6c\u5199\u6210\u97f3\u9891\uff0c\u5973\u5b69\u7684\u5bf9\u8bdd\u6587\u672c\u7528 openai tts \u6a21\u578b\u7684alloy voice \u8f6c\u5199\u6210\u97f3\u9891\u3002\u5982\u6b64\u5f80\u590d\uff0c2\u3001\u5c06\u5404\u6bb5\u97f3\u9891\u6309\u7167\u5bf9\u8bdd\u987a\u5e8f\u5408\u5e76\u4e3a\u4e00\u4e2a\u6587\u4ef6\uff0c\u8bf7\u7ed9\u51fa python \u4ee3\u7801\u3002 \u5047\u8bbe\u5bf9\u8bdd\u662f\u8fd9\u6837\u7684\uff1aNova\uff1aYou know, I believe life-long learning is essential in today's fast-paced world. Alloy\uff1aAbsolutely! It's amazing how much knowledge we can gain if we keep our minds open.Right? Nova\uff1a Like, every day brings a new opportunity to learn something new. Alloy\uff1aFor sure! But don\u2019t you think some people struggle to find the time for it?\n</code></pre> Text Only<pre><code># Prompt\u751f\u6210\u7684\u4ee3\u7801\nimport yaml\nimport openai\nfrom pydub import AudioSegment\n\n# Load the API key from the YAML file\nwith open('config.yaml', 'r') as file:\n    config = yaml.safe_load(file)\n\n# Set the API key\nopenai.api_key = config['openai']['api_key']\n\n# Define the conversation\nconversation = [\n    {\"speaker\": \"Nova\", \"text\": \"You know, I believe life-long learning is essential in today's fast-paced world.\"},\n    {\"speaker\": \"Alloy\", \"text\": \"Absolutely! It's amazing how much knowledge we can gain if we keep our minds open. Right?\"},\n    {\"speaker\": \"Nova\", \"text\": \"Like, every day brings a new opportunity to learn something new.\"},\n    {\"speaker\": \"Alloy\", \"text\": \"For sure! But don\u2019t you think some people struggle to find the time for it?\"}\n]\n\n# Function to generate TTS audio using OpenAI API\ndef generate_tts(text, voice):\n    response = openai.Audio.create(\n        engine=\"text-to-speech\",\n        voice=voice,\n        text=text\n    )\n    return response['audio_data']\n\n# Function to save audio to a file\ndef save_audio(filename, audio_data):\n    with open(filename, 'wb') as f:\n        f.write(audio_data)\n\n# Generate and save audio files\naudio_files = []\nfor i, line in enumerate(conversation):\n    voice = 'nova' if line['speaker'] == 'Nova' else 'alloy'\n    audio_data = generate_tts(line['text'], voice)\n    filename = f\"line_{i}.mp3\"\n    save_audio(filename, audio_data)\n    audio_files.append(filename)\n\n# Merge audio files\ncombined_audio = AudioSegment.empty()\nfor file in audio_files:\n    audio = AudioSegment.from_file(file)\n    combined_audio += audio\n\n# Export combined audio to a file\ncombined_audio.export(\"conversation.mp3\", format=\"mp3\")\n</code></pre> <p>5\u3001\u8bfb\u53d6 json</p> <p>\u5fc5\u5907\u77e5\u8bc6\uff1a\u628a python json \u6587\u6863\u597d\u597d\u770b\u770b</p>"},{"location":"CS/Python/Python-Notes-202410/#_5","title":"\u4e09\u3001\u603b\u7ed3\uff1a\u4e00\u4e9b\u5e38\u7528\u7684\u5c0f\u7247\u6bb5","text":""},{"location":"CS/Python/Python-Notes-202410/#1_1","title":"1\u3001\u8f93\u5165\u5bc6\u7801\u7b49\u65f6\u5019\uff0c\u9700\u8981\u8bbe\u5b9a\u4e00\u5b9a\u7684\u89c4\u8303\u3002","text":"Text Only<pre><code>while True:\n    n = int(input(\"How many times do you want to meow? \"))\n    if n &gt; 0:\n        break\n\nfor i in range(n):\n    print(\"meow\")\n</code></pre> <p>\u4e4b\u540e\u5b66\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5c31\u53ef\u4ee5\u50cf\u73b0\u5728\u5f88\u591a\u7f51\u7ad9\u6ce8\u518c\u65f6\u5bf9\u5bc6\u7801\u7684\u8981\u6c42\u4e00\u6837\uff0c\u53ef\u4ee5\u8981\u6c42\u5bc6\u7801\u957f\u5ea6\u4e0d\u4f4e\u4e8e 6\uff0c\u5fc5\u987b\u81f3\u5c11\u6709 1 \u4e2a\u6570\u5b57\uff0c1 \u4e2a\u5b57\u6bcd\u548c 1 \u4e2a\u7279\u6b8a\u7b26\u53f7\uff08?!@\uff09\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#2for","title":"2\u3001For \u5faa\u73af\u53ef\u4ee5\u548c\u5217\u8868\u7ed3\u5408","text":"<p>\u4e4b\u524d\u8981\u6253\u5370\u5217\u8868list \u7684\u5404\u4e2a\u5143\u7d20\uff1a</p> Text Only<pre><code>for i in range(len(list_instance)):\n        print(list_instance[i])\n</code></pre> <p>\u73b0\u5728\u8fd8\u6709\u66f4\u7b80\u5355\u7684\uff1a</p> Text Only<pre><code>for i in list_instance:\n        print(list_instance[i])\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#3-json-txt","title":"3\u3001\u5bf9\u5927\u578b JSON \u6587\u4ef6\u3001TXT \u6587\u4ef6\u8bfb\u53d6\u7684\u5fc3\u5f97","text":"<p>\u9996\u5148\u662f\u641e\u6e05\u695a\u5176\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff0c\u901a\u5e38\u957f\u8fd9\u6837\u3002</p> <p></p> <p>\u65b9\u6cd5\u5c31\u662f\u901a\u8fc7\u5404\u79cd\u6253\u5370\uff0c\u4e00\u7ea7\u4e00\u7ea7\u7684\u8f93\u51fa dict.keys()\u3002</p> <p></p> <p>\u4ee5\u4e0b\u662f\u7f16\u7a0b\u5e8f\u65f6\u5019\u6ce8\u610f\u4e8b\u9879\uff1a</p> <p>\u8bfb\u53d6\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u4e00\u884c\u4e00\u884c\u8bfb\u53d6\uff0c\u7528 for line in file:</p> <p>\u5176\u6b21\u8bb0\u5f97\uff0c\u5bb9\u6613\u51fa\u73b0 index out of range\uff0c\u8fd9\u91cc\u53ef\u80fd\u662f\u56e0\u4e3a\u5728\u4e0a\u9762\u51e0\u4e2a\u7ea7\u522b\u7ed3\u6784\u4e2d\uff0c\u53ef\u80fd\u6709\u7684 key \u6ca1\u6709 value\uff0c\u6240\u4ee5\u8981\u5d4c\u5957\u597d\u51e0\u5c42\uff0c\u5728\u8d4b\u503c\u4e4b\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5b58\u5728 value\uff0c\u5982\u679c\u662f dict \u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528 dict.get('key1',[])\u6765\u83b7\u53d6\u5bf9\u5e94\u7684 value1\uff0c\u7136\u540e\u518d\u7528 if \u8bed\u53e5\u5224\u65ad\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u518d\u8d4b\u503c\u3002</p> <p></p>"},{"location":"CS/Python/Python-Notes-202410/#_6","title":"\u4e09\u3001\u6846\u67b6","text":"<p>1\u3001\u6839\u9664\u6765\u81ea\u5927\u8111\u91cc\u6839\u6df1\u8482\u56fa\u7684\u89c2\u5ff5\uff1a\u4ee5\u4e3a\u53ea\u6709\u7406\u79d1\u751f\u3001\u5de5\u79d1\u751f\u624d\u80fd\u7f16\u7a0b\uff0c\u6587\u79d1\u751f\u5c31\u662f\u5929\u751f\u4e0d\u80fd\u7f16\u7a0b\u3002</p> <p>\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u6587\u7406\u5206\u79d1\u662f\u4e2d\u56fd\u6559\u80b2\u7684\u7279\u6b8a\u5206\u7c7b\u65b9\u5f0f\uff0c\u633a\u5bb3\u4eba\u7684\u3002</p> <p>2\u3001\u5199\u4ee3\u7801\u8fd9\u4e8b\u521a\u5f00\u59cb\u5b66\u8d77\u6765\u597d\u50cf\u95e8\u69db\u633a\u9ad8\uff0c\u4f46\u662f\u8fd9\u53ea\u4e0d\u8fc7\u662f\u4e2a\u5e7b\u89c9\uff0c\u5230\u6700\u540e\u8fd8\u662f\u5f97\u9760\u601d\u8003\u80fd\u529b\u3002\u4f60\u80fd\u5199\u51fa\u591a\u4f18\u79c0\u7684\u4ee3\u7801\uff0c\u8fd8\u662f\u5f97\u9760\u5199\u4ee3\u7801\u7684\u4eba\u672c\u8eab\u3002</p> <p>\u5199\u4ee3\u7801\u672c\u8eab\u5c31\u662f\u50cf\u8ba4\u8bc6\u5b57\u4e00\u6837\u57fa\u672c\u7684\u6280\u80fd\uff0c\u5c5e\u4e8e\u4fe1\u606f\u65f6\u4ee3\u6bcf\u4e2a\u4eba\u8981\u638c\u63e1\u7684\u6280\u80fd\u3002</p> <p>1\u3001\u6982\u5ff5\u4e0e\u5b9a\u4e49</p> <p>Definition: </p> <p>Each programming language has a set of primitive constructs, a syntax, a static semantics, and a semantics.</p> \u7c7b\u6bd4 English Python primitive constructs words literals and infix operators syntax describes which strings of words constitute well-formed sentences which strings of characters and symbols are well formed. static semantics defines which sentences are meaningful defines which syntactically valid stringshave a meaning. semantics defines the meaning of those sentences. associates a meaning with eachsyntactically correct string of symbols that has no static semantic errors. <p>\u6765\u81ea Introduction to Computation and Programming P30</p> <p>Errors \u7c7b\u578b\uff1a</p> <p>Syntax errors \u4e0e static sementic errors\uff1a\u524d\u4e00\u79cd\u5f88\u5bb9\u6613\u8bc6\u522b\uff0c\u7f16\u7a0b\u8f6f\u4ef6\u5e2e\u4f60\u505a\u4e86\uff0c\u540e\u4e00\u79cdbug \u66f4\u4e3a\u9690\u853d\u3002</p> <p>\u5176\u4ed6\u7684\u6982\u5ff5\uff1a</p> <ul> <li>declarative knowledge</li> <li>imperative knowledge</li> <li>Church-Turing thesis</li> <li>halting problem</li> <li>Turing completeness</li> </ul> <p>\u4ee5\u4e0b\u6982\u5ff5\u6765\u81ea\u674e\u7b11\u6765\u300a\u81ea\u5b66\u662f\u95e8\u624b\u827a\u300b</p> <p>\u4e0d\u7ba1\u662fPython\u3001C\u8bed\u8a00\u3001Java\u3001C++\u3001R\u7b49\u8bed\u8a00\uff0c\u6240\u6709\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u6982\u5ff5\u65e0\u975e\u662f\u4ee5\u4e0b\u8fd9\u4e9b\uff1a</p> <ul> <li>\u6570\u636e\uff1a\u6574\u6570\u3001\u5e03\u5c14\u503c\uff1b\u64cd\u4f5c\u7b26\uff1b\u53d8\u91cf\u3001\u8d4b\u503c\uff1b\u8868\u8fbe\u5f0f</li> <li>\u51fd\u6570\u3001\u5b50\u7a0b\u5e8f\u3001\u53c2\u6570\u3001\u8fd4\u56de\u503c\u3001\u8c03\u7528</li> <li>\u6d41\u7a0b\u63a7\u5236\u3001\u5206\u652f\u3001\u5faa\u73af</li> <li>\u7b97\u6cd5\u3001\u4f18\u5316</li> <li>\u7a0b\u5e8f\uff1a\u8bed\u53e5\u3001\u6ce8\u91ca\u3001\u8bed\u53e5\u5757</li> <li>\u8f93\u5165\u3001\u5904\u7406\u3001\u8f93\u51fa</li> <li>\u89e3\u91ca\u5668</li> </ul> <p>\u51e0\u4e4e\u6240\u6709\u7684\u7f16\u7a0b\u5165\u95e8\u6559\u5b66\u4e66\u7c4d\u7ed3\u6784\u90fd\u5dee\u4e0d\u591a\u662f\u7531\u8fd9\u4e9b\u6982\u5ff5\u6784\u6210\u7684\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#1_2","title":"1\u3001\u6570\u636e","text":""},{"location":"CS/Python/Python-Notes-202410/#1-nubmers","title":"\uff081\uff09\u6570\u5b57 Nubmers","text":"<p>\u6570\u5b57\u7c7b\u578b\uff1aInt float char</p> <p>\u2460\u6570\u5b57\u64cd\u4f5c\u7b26</p> <p>\u52a0\uff1a+</p> <p>\u51cf\uff1a -</p> <p>\u4e58 *</p> <p>\u9664 /</p> <p>\u53d6\u4f59%</p> <p>\u5e42**</p> <p>\u2461\u903b\u8f91\u64cd\u4f5c\u7b26\uff1a\u6570\u5b57</p> <p>== \u5224\u65ad\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u5f53</p> <p>!= \u5224\u65ad\u4e24\u4e2a\u503c\u662f\u5426\u4e0d\u5f53</p> <p>&gt;\u5927\u4e8e</p> <p>&lt; \u5c0f\u4e8e</p> <p>&gt;= \u5927\u4e8e\u7b49\u4e8e</p> <p>&lt;= \u5c0f\u4e8e\u7b49\u4e8e</p> <p>in \u5c5e\u4e8e\u5173\u7cfb\uff0c\u8fd9\u4e2a\u662fPython\u4e2d\u6bd4\u8f83\u7279\u6b8a\u7684</p>"},{"location":"CS/Python/Python-Notes-202410/#2","title":"\uff082\uff09\u5e03\u5c14\u503c","text":"<p>Python\u4e2d\uff0c\u5e03\u5c14\u503c\u662fTrue \u6216\u8005False\uff0c\u4efb\u4f55\u903b\u8f91\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\uff0c\u90fd\u4f1a\u662f\u5176\u4e2d\u4e4b\u4e00</p> <p>\u2460\u5e03\u5c14\u8fd0\u7b97\u64cd\u4f5c\u7b26</p> Python<pre><code>print('(True and Flase) Yield: ', True and False)  #\u6ce8\u610f\u5e03\u5c14\u503c\uff0c\u662fTrue\uff0c\u4e0d\u662ftrue \u4e5f\u4e0d\u662fTRUE\uff0cPython\u4e2d\u6ce8\u91cd\u5927\u5c0f\u5199\n... print('(True 0r Flase) Yield: ', True or False)\n... print('(True and True ) Yield: ', True and True)\n... print('(True 0r True ) Yield: ', True or True)\n... print('(False and False ) Yield: ', False and False)\n... print('(False 0r False ) Yield: ', False or False)\n</code></pre> <p>(True and Flase) Yield:  False </p> <p>(True 0r Flase) Yield:  True </p> <p>(True and True ) Yield:  True </p> <p>(True 0r True ) Yield:  True </p> <p>(False and False ) Yield:  False </p> <p>(False 0r False ) Yield:  False              </p>"},{"location":"CS/Python/Python-Notes-202410/#2_1","title":"2\u3001\u6d41\u7a0b\u63a7\u5236","text":"<p>\uff081\uff09if\u8bed\u53e5</p> <p>if \u8bed\u53e5\uff0c\u9009\u62e9\u6027\u6267\u884c</p> Python<pre><code>import random\nr = random.randrange(1, 1000)\n\nif r % 2 == 0:\n        print(r,\"is even.\")\nelse:\n        print(r,\"is odd.\")\n</code></pre> <p>\u5176\u4e2dr \u662f\u53d8\u91cf </p> <p>r = random.randrange(1, 1000)\uff0c\u5c31\u662f\u8d4b\u503c\u8bed\u53e5</p> <p>\uff082\uff09\u5faa\u73af\u6267\u884c\uff1a</p> <p>\u2460 for \u5faa\u73af</p> Python<pre><code>for i in range(10):\n    if i % 2 != 0:\n        print(i)\n</code></pre> <p>if \u8bed\u53e5\u4e0efor \u8bed\u53e5\u7684\u5d4c\u5957\u6267\u884c\uff1a</p> Python<pre><code>for n in range(2,100):   #\u5305\u542b2\uff0c\u4e0d\u5305\u542b100\n    if n == 2:\n        print(n)\n        continue\n    for i in range(2,n):\n        if(n % i ==0):\n            break\n    else:\n        print(n)\n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662f\u4e00\u5957\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u662f\u7b97\u6cd5\u5c31\u53ef\u4ee5\u4f18\u5316\uff0c\u7b97\u6cd5\u4f53\u73b0\u7684\u662f\u7a0b\u5e8f\u5458\u7684\u601d\u7ef4\u65b9\u5f0f\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#3","title":"3\u3001\u51fd\u6570","text":"<p>\u51fd\u6570\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u6838\u5fc3\u6784\u6210\u5c31\u662f\u8f93\u5165\u3001\u5904\u7406\u3001\u8f93\u51fa\uff1a</p> <p>\u8f93\u5165\uff1a\u80fd\u63a5\u6536\u5916\u90e8\u901a\u8fc7\u53c2\u6570\u4f20\u9012\u7684\u503c</p> <p>\u5904\u7406\uff1a\u5185\u90e8\u6709\u80fd\u591f\u5b8c\u6210\u67d0\u4e00\u7279\u5b9a\u4efb\u52a1\u7684\u4ee3\u7801\uff0c\u5c24\u5176\u662f\u53ef\u4ee5\u6839\u636e\u201c\u8f93\u5165\u201d\u5f97\u5230\u201c\u8f93\u51fa\u201d</p> <p>\u8f93\u51fa\uff1a\u80fd\u5411\u5916\u90e8\u8f93\u9001\u8fd4\u56de\u503c\u3002</p> <p>\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u5b50\u7a0b\u5e8f\uff08sub-Program\uff09\uff0c\u4e3b\u7a0b\u5e8f\u6267\u884c\u5230\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5c31\u5f00\u59cb\u6267\u884c\u5b9e\u73b0\u51fd\u6570\u7684\u54ea\u4e9b\u4ee3\u7801\uff0c\u7136\u540e\u518d\u8fd4\u56de\u4e3b\u7a0b\u5e8f\u3002</p> Python<pre><code>#\u5199\u4e00\u4e2a\u5224\u65ad\u6307\u5b9a\u6570\u5b57\u662f\u5426\u662f\u8d28\u6570\u7684\u51fd\u6570\n\ndef is_prime(n):\n    if n &lt; 2:\n        return False\n    if n == 2:\n        return True\n    for m in range(2, int(n**0.5)+1):\n        if(n % m) == 0:\n            return False\n    else:\n        return True\n\nfor i in range(80, 110):\n    if is_prime(i):\n        print(i)\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#4","title":"4\u3001\u5176\u4ed6","text":"<p>\uff081\uff09\u6ce8\u91ca</p> <p>Python\u4e2d\u5355\u884c\u7528 #</p> <p>\u591a\u884c\u7528\u4e09\u4e2a\u5355\u5f15\u53f7</p> Python<pre><code>'''\n\u8fd9\u662f\u591a\u884c\u6ce8\u91ca\n\u7684\u6548\u679c\n'''\n\n#\u8fd9\u662f\u5355\u884c\u6ce8\u91ca\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#python","title":"\u56db\u3001Python\u7c7b\u578b\u53ca\u5176\u8fd0\u7b97","text":"<p>https://docs.python.org/3/library/stdtypes.html</p> <p>\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u603b\u662f\u5305\u542b\u6700\u57fa\u672c\u7684\u4e09\u79cd\u6570\u636e\u7c7b\u578b\uff1a</p> <ul> <li>Boolean Types\uff0c\u5373\u5e03\u5c14\u503c\uff0c\u5305\u62ec True False</li> <li>Numeric Types\uff0c\u5373\u6570\u5b57\u7c7b\u578b\uff0c\u5305\u62ec\u6574\u6570(int)\u3001\u6d6e\u70b9\u6570(float)\u3001\u590d\u6570(Complex Numbers)</li> <li>Sequence Types\uff0c\u5373\u5e8f\u5217\u7c7b\u578b\uff0c\u5305\u62ec \u5217\u8868(list)\uff0c\u5143\u7ec4(Tuple)\uff0c\u6570\u5217(Range)\uff0c\u5b57\u7b26\u4e32(String)</li> <li>Set Types\uff0c\u5373\u96c6\u5408\u7c7b\u578b </li> <li>Mapping Types\uff0c\u5373\u5b57\u5178\uff0c\u66f4\u4e3a\u590d\u6742\uff0c\u4f46\u66f4\u7b26\u5408\u73b0\u4ee3\u4e16\u754c\u7684\u8ba4\u77e5</li> <li>\u5176\u4ed6\uff0c\u5305\u62ecModules\uff0cClasses\uff0cFunctions\uff0cMethods \u4e5f\u662f\u4e00\u79cd Type</li> </ul> <p>\u67e5\u770b Python \u4e2d\u7684 Type\u5c5e\u6027\u7528 type()\u51fd\u6570</p> Python<pre><code>type(3)          #int\ntype(3.0)        #float\ntype('Jack')     #str\ntype(True)       #Boolean\ntype(range(10))  #range\ntype([1,2,3])    #list\ntype((1,2,3)) /type('Jack','Royer')   #tuple\ntype({1,2,3})    #set\ntype({'name':'Jack', 'age':28, 'hometown':'HuBei'})  #Dict\n</code></pre> <p>\u51e0\u4e4e\u6240\u6709\u7684 Type \u90fd\u652f\u6301\uff1a\u771f\u5047\u5224\u522b(Truth Testing)\u548c \u6bd4\u8f83\uff08comparison)</p> <p>Truth Testing</p> <p>\u4ee5\u4e0b\u4e3a False\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u57fa\u672c\u90fd\u662f True</p> <ul> <li>\u6574\u6570\uff1a<code>None</code> and <code>false</code></li> <li>zero of any numeric type: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li> <li>empty sequences and collections: <code>''</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>set()</code>, <code>range(0)</code></li> </ul> Text Only<pre><code>print(True and True)\nprint(True and False)\nprint(False and False)\nprint(True or True)\nprint(True or False)\nprint(False or False)\nprint(Not True)\nprint(Not False)\n</code></pre> <p>Comparison\uff1a\u53ea\u4e0d\u8fc7\u6bcf\u79cd Type \u7684 Comparison \u7ec6\u5219\u4e0d\u540c</p>"},{"location":"CS/Python/Python-Notes-202410/#boolean-types","title":"\uff08\u4e00\uff09Boolean Types","text":"<p>1\u3001\u5b9a\u4e49\uff1a</p> <ul> <li>True </li> <li>False</li> </ul> <p><code>bool</code>\u662f <code>int</code>\u7684\u5b50\u96c6, \u7ecf\u5e38\u7528 1 \u8868\u793a <code>True</code>\uff0c0 \u8868\u793a <code>False</code></p> <p>2\u3001Boolean Operations</p> <p>or</p> <p>and </p> <p>Not</p> <p>\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\uff1anot &gt; and &gt; or</p> <p>\u5f53\u6570\u503c\u8ba1\u7b97\u64cd\u4f5c\u7b26\u3001\u903b\u8f91\u64cd\u4f5c\u7b26\u3001\u5e03\u5c14\u64cd\u4f5c\u7b26\u4e00\u8d77\u51fa\u73b0\u65f6\uff1a</p> <p>\u6570\u503c\u8ba1\u7b97\u64cd\u4f5c\u7b26\u6700\u9ad8\uff0c\u5176\u6b21\u662f\u903b\u8f91\u64cd\u4f5c\u7b26\uff0c\u6700\u540e\u662f\u5e03\u5c14\u64cd\u4f5c\u7b26</p> <p>\u4ee5\u4e0b\u9762\u4ee3\u7801\u4e3a\u4f8b</p> Python<pre><code>n = -95\nn &lt; 0 and (n+1) % 2 ==0 \n</code></pre> <p>\u7b2c\u4e00\u6b65\uff0c\u5148\u8ba1\u7b97(n+1) % 2 \u7b49\u4e8e0</p> <p>\u7b2c\u4e8c\u6b65\uff0c\u7136\u540e n&lt;0 \u903b\u8f91\u64cd\u4f5c\u7b26\uff0c\u5f97\u5230True\uff1b 0==0\u903b\u8f91\u8fd0\u7b97\u7b26\u7b49\u4e8eTrue</p> <p>\u7b2c\u4e09\u6b65\uff0c\u5e03\u5c14\u64cd\u4f5c\u7b26 True and True\uff0c\u8fd4\u56deTrue</p>"},{"location":"CS/Python/Python-Notes-202410/#numeric-types","title":"\uff08\u4e8c\uff09\u6570\u5b57 Numeric Types","text":"<p>\uff081\uff09\u5b9a\u4e49</p> <p>\u5206\u4e3a\u6574\u578b int\u548c\u6d6e\u70b9\u578bfloat\u3001\u590d\u6570 complex\uff0cPython\u4e2d\u6ca1\u6709Long\u957f\u6574\u578b</p> <p>\uff082\uff09\u6570\u5b57\u8ba1\u7b97\u7684\u64cd\u4f5c\u7b26\uff1a</p> Operation Result Notes x + y \u52a0\u6cd5 x- y \u51cf\u6cd5 x * y \u4e58\u6cd5 x / y \u9664\u6cd5 x // y \u53d6\u6574 \u598217//5 \u53d6\u6574\u6570\u5c31\u662f3. x % y \u53d6\u4f59 \u5982 17%5\uff0c\u8fd4\u56de 2. x ** y \u5e42 \u7b49\u540c\u4e8e power(x, y) Abs(x) \u53d6\u7edd\u5bf9\u503c int(x) \u8f6c\u6362\u4e3a\u6574\u6570 Float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570 Complex(re, im) \u6784\u9020\u590d\u6570 Divmond(x, y) \u8fd4\u56de\u6570\u7ec4(x//y, x %y) <p>\u6ce8\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7</p> <p>\u5bf9\u4e24\u4e2a\u503c\u8fdb\u884c\u64cd\u4f5c\u7684+\u3001-\u7684\u4f18\u5148\u7ea7\u6700\u4f4e\uff1b</p> <p>\u7a0d\u9ad8\u7684\u662f*\u3001/\u3001//\u3001%</p> <p>\u66f4\u9ad8\u7684\u662f\u5bf9\u5355\u4e2a\u503c\u8fdb\u884c\u64cd\u4f5c\u7684+\u3001-</p> <p>\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u662f**</p> <p>\u5f53\u6253\u5370\u5b57\u7b26\u4e32\u65f6\uff0c\u9700\u8981\u5f15\u7528\u6570\u5b57\uff0c\u8fd9\u65f6\u5019\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\uff0c\u53ef\u4ee5\u7528str(numer)</p> <p>\u540e\u9762\u300a\u5b57\u5178\u300b\u4e00\u7ae0\u4f1a\u5b66\u5230\uff0c\u5982\u679c\u5c06\u5b57\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u7528int(str)</p> Python<pre><code>#str()\u7684\u7528\u6cd5\n&gt; name = \"Jack\"   #\u5b57\u7b26\u578b\u53d8\u91cf\n&gt; age = 28  #\u6570\u5b57\u7c7b\u578b\u53d8\u91cf\n&gt; print(name+\" is \"+str(age)+\" years old.\")\n</code></pre> <p>\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5730\u65b9\uff1a</p> <p>\u5f53\u7528Python\u89e3\u91ca\u5668\u4f5c\u4e3a\u8ba1\u7b97\u5668\u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u7528\"_\"\u4f5c\u4e3a\u5c40\u90e8\u53d8\u91cf\u5f15\u7528\uff08\u6765\u81eaPython tutorial\uff09\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a</p> Python<pre><code>2+2\n_+3\n</code></pre> <p>\uff082\uff09\u6570\u503c\u7684\u6bd4\u8f83\uff0c\u6570\u503c\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528\u903b\u8f91\u64cd\u4f5c\u7b26\uff0c\u5982\uff1a</p> <p>2&gt;3 \u8fd4\u56deFalse</p> <p>2&lt;3 \u8fd4\u56de True</p> <p>&gt;=</p> <p>&lt;= </p> <p>== \u7b49\u4e8e</p> <p>!= \u4e0d\u7b49\u4e8e</p>"},{"location":"CS/Python/Python-Notes-202410/#text-sequencestr","title":"\uff08\u4e09\uff09Text Sequence\u2014\u2014Str","text":"<p>\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u548c\u5143\u7ec4\u4e00\u6837\uff0c\u662f\u4e0d\u53ef\u66f4\u6539\u7684\uff0c\u8981\u66f4\u6539\uff0c\u53ea\u80fd\u901a\u8fc7\u5207\u7247\u548c\u62fc\u63a5\u5b9e\u73b0\u3002</p> <p>string \u548c tuple \u6bd4\u8f83\u50cf\uff0c\u53ef\u4ee5\u88abconcatenated, indexed, and sliced.</p> <p>\uff081\uff09\u5b57\u7b26\u4e32\u4e0e\u7801\u503c\u7684\u8f6c\u6362</p> <p>\u5c06\u5355\u4e2a\u5b57\u7b26\u8f6c\u6362\u6210\u7801\u503c\uff0cord()\uff1b</p> <p>\u53cd\u8fc7\u6765\u628a\u7801\u503c\u8f6c\u6362\u6210\u5b57\u7b26\uff0cchr()</p> Python<pre><code>ord('a')   #97\nchr(90)    # 'Z'\uff0c\u5927\u5199\u7684Z\n</code></pre> <p>\uff082\uff09\u5b57\u7b26\u4e32\u8868\u793a</p> <p>\u52a0\u5f15\u53f7\u5373\u53ef\uff0c\u65e2\u53ef\u4ee5\u7528\u5355\u5f15\u53f7\uff0c\u4e5f\u53ef\u4ee5\u7528\u53cc\u5f15\u53f7</p> Python<pre><code>&gt; name = \"Jack\"    #\u7528\u53cc\u5f15\u53f7\n&gt; name\n# \u8fd4\u56de'Jack'\n&gt; name = 'Yong'    #\u4e5f\u53ef\u7528\u5355\u5f15\u53f7\n&gt; name\n#\u8fd4\u56de'Yong'\n\n&gt; #\u591a\u884c\u7528\"\"\" \"\"\"\u6216\u8005''' '''\n</code></pre> <p>\uff083\uff09\u5b57\u7b26\u4e32\u4e0e\u6570\u503c\u4e4b\u95f4\u7684\u8f6c\u6362</p> <p>\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570 int(), \u8f6c\u6362\u6210\u6d6e\u70b9\u578bfloat()</p> <p>\u5c06\u6570\u503c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7c7b\u578bstr()</p> <p>input()\u51fd\u6570\u4e00\u822c\u8f93\u5165\u7684\u662f\u5b57\u7b26\uff0c\u56e0\u6b64\u5982\u679c\u8ba9\u4f60\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u6765\u6bd4\u8f83\uff0c\u53ef\u80fd\u5c31\u9700\u8981\u6d89\u53ca\u5230\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u3002</p> <p>\u8f6c\u4e49\u5b57\u7b26\uff1a</p> <p>\u7528\u5904\uff1a\u8b6c\u5982\u5728\u53cc\u5f15\u53f7\u4e2d\uff0c\u8981\u7528\u5230\u5355\u5f15\u53f7\uff0c\u4e14\u5355\u5f15\u53f7\u8981\u6253\u5370\u51fa\u6765\u3002</p> Python<pre><code>'He said, it\\'s fun!!'   #\u7531\u4e8e\u5355\u5f15\u53f7\u6709\u4e09\u4e2a\uff0c\u56e0\u6b64\u5982\u679c\u4e0d\u7528\u8f6c\u4e49\u7b26\uff0c\u53ef\u80fd\u4f1a\u62a5\u9519\n\" He said, it's fun~~\"   #\u7531\u4e8e\u5355\u5f15\u53f7\u53ea\u6709\u4e00\u4e2a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u62a5\u9519\n</code></pre> <p>\\t \u4ee3\u8868\u5236\u8868\u7b26,  \\n \u4ee3\u8868\u6362\u884c\u7b26</p> <p>\uff084\uff09\u5b57\u7b26\u4e32\u64cd\u4f5c\u7b26\uff1a\u548c\u5217\u8868\u3001\u5143\u7ec4\u4e00\u6837</p> <ul> <li>\u62fc\u63a5\uff1a+\u548c' '\uff08\u7a7a\u683c\uff09  //\u771f\u662f\u6ca1\u60f3\u5230 \u7a7a\u683c\u4e5f\u53ef\u4ee5\u8d77\u5230\u8fde\u63a5\u7b26\u7684\u4f5c\u7528</li> <li>\u62f7\u8d1d\uff1a*</li> <li>\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff1a &lt;\u3001&lt;=\u3001&gt;\u3001&gt;=\u3001==\u3001!=</li> <li>\u6210\u5458\u5173\u7cfb\u64cd\u4f5c\u7b26\uff1ain \u3001not in</li> </ul> Python<pre><code>#\u4e0d\u540c\u53d8\u91cf\u7c7b\u578b\n&gt; 'Awesome' +' Python'\n'Awesome Python'\n\n&gt; 'Awesome' ' Python'\n'Awesome' ' Python'\n\n&gt;'Python,' + ' Awesome' * 3\n'Python, Awesome Awesome Awesome'\n\n'o' in 'Awesome' and 'o' not in 'Python'\n</code></pre> <p>\u62fc\u63a5\u5b57\u7b26\u4e32</p> Python<pre><code>&gt; my_brother = \"Cheng Qiang\"\n&gt; my_self = \"Cheng Yong\"\n&gt; print(my_brother+\" and \"+my_self+\" were both born in 1992.\")\nCheng Qiang and Cheng Yong were both born in 1992.\n</code></pre> <p>\u5b57\u7b26\u4e4b\u95f4\u3001\u5b57\u7b26\u4e32\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u7528\u903b\u8f91\u8fd0\u7b97\u7b26\u6bd4\u8f83\uff0c\u56e0\u4e3a\u5b57\u7b26\u5bf9\u5e94\u7740Unicode\u7801</p> <p>A~Z \u5206\u522b\u5bf9\u5e94\u774065~90</p> <p>a~z \u5206\u522b\u5bf9\u5e94\u774097~122</p> <p>\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u662f\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8fdb\u884c\u9010\u4e2a\u6bd4\u8f83\uff0c\u201c\u4e00\u65e6\u51b3\u5b9a\u80dc\u8d1f\u9a6c\u4e0a\u505c\u6b62\u201d</p> <p>(5) \u5b57\u7b26\u4e32\u7d22\u5f15</p> <p>\u5b57\u7b26\u4e32\u6709\u4e13\u95e8\u7684\u5207\u7247\u51fd\u6570s()</p> Python<pre><code>s = 'Python'\nfor char in s:\n        print(s.index(char), char)\n</code></pre> <p>s[2:5]\uff0c\u6307\u7b2c\u4e8c\u4e2a\u5230\u7b2c\u56db\u4e2a\u5b57\u7b26\uff0c\u4e0d\u5305\u542b\u7b2c\u4e94\u4e2a</p> Python<pre><code>s = 'Python'\ns[1]   #\u8d77\u59cb\u5e8f\u53f7\u662f0\uff0c\u6240\u4ee5s[1]\u662f'y'\ns[2:]   # 'thon'\ns[2:5]   # 'tho'\uff0c\u6ce8\u610f\u4e0d\u5305\u542bs[5]\ns[:5]    #'Pytho'\ns[1:5:2]  #'yh'\n</code></pre> <p>\uff086\uff09\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5185\u5efa\u51fd\u6570</p> <p>\u628a\u5b57\u7b26\u4e32\u5f53\u505a\u5904\u7406\u5bf9\u8c61\u7684\u6709\uff1aord()\u3001input()\u3001int()\u3001float()\u3001len()\u3001print()</p> <p>ord('a') \u8fd4\u56deUnicode\u6570\u5b57 97\uff0c\u76f8\u5bf9\u7684\u51fd\u6570\u5c31\u662fchr(97)</p> <p>int()\uff0c\u628a\u5b57\u7b26\u4e32\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u6570</p> <p>float()\uff0c\u628a\u5b57\u7b26\u4e32\u6570\u5b57\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570</p> <p>len()\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e2a\u6570</p> <p>\uff087\uff09\u5b57\u7b26\u4e32\u5904\u7406\u7684method</p> <p>\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u6709\u7cfb\u7edf\u5185\u90e8\u7684\u51fd\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u5904\u7406\uff0c\u79f0\u4e3a\u7c7b\u7684\u65b9\u6cd5\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\uff1a</p> <p>\u2460str .title()\uff0cstr.upper() , str.lower()</p> Python<pre><code>&gt; name = 'jack is so hansome.'\n&gt; name.title()  #\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u4f46\u662f\u5b57\u7b26\u4e32\u7684\u503c\u6ca1\u6709\u53d8\n'Jack Is So Hansome.'\n&gt; name.upper()  #\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u6bcd\u90fd\u5927\u5199\n'JACK IS SO HANSOME.'\n&gt; name.lower()  #\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u6bcd\u90fd\u5c0f\u5199\n'jack is so hansome.'\n&gt; name.capitalize() #\u8fd9\u4e00\u884c\u7684\u9996\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\nname.casefold()  #\u5c06\u6240\u6709\u82f1\u6587\u5b57\u6bcd\u5c0f\u5199\n</code></pre> <p>\u2461str.count()</p> Python<pre><code>str2 = \"\u4e0a\u6d77\u81ea\u6765\u6c34\u6765\u81ea\u6d77\u4e0a\"\nstr2.count('\u4e0a')\n</code></pre> <p>\u2462str.find() , sth.rfind(), sth. index() , rindex()</p> <p>\u2463replace()</p> <p>\u2463\u5b57\u7b26\u4e32\u4e2d\u7a7a\u767d</p> <p>\u5b9e\u9645\u4e0aPython\u4f1a\u8bc6\u522b\u51fa\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u767d\uff0c\u5c31\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u4e00\u6837</p> <p>strip()\u53ef\u5904\u7406\u5b57\u7b26\u4e32\u9996\u4f4d\u7684\u7a7a\u767d\uff0c\u5236\u8868\u7b26\u3001\u6362\u884c\u4ed8</p> Python<pre><code>&gt; name = \" Jack \" #\u6b64\u5904\u5b57\u7b26\u4e32\u5de6\u53f3\u90fd\u6709\u7a7a\u767d\n&gt; name.rstrip() #\u4e34\u65f6\u5220\u9664\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u767d\uff0c\u5e76\u6253\u5370\u51fa\u6765\uff0cname\u7684\u503c\u4ecd\u7136\u4e0d\u53d8\n' Jack'\n&gt; name.lstrip()  #\u5220\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u7a7a\u767d\n'Jack '\n&gt; name.strip()   #\u540c\u65f6\u5220\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u672b\u5c3e\u7684\u7a7a\u767d\n'Jack'\n</code></pre> <p>\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd4\u56deTrue or False\uff0c\u7528In\u63cf\u8ff0</p> Python<pre><code>'a' in 'Jack'\n#True\n</code></pre> <p>\u2464\u5b57\u7b26\u4e32\u62c6\u5206</p> <p>s.splitlines()    #\u8fd4\u56de\u7684\u662f\u4e2a\u5217\u8868\uff0c\u7531\u88ab\u62c6\u5206\u7684\u6bcf\u4e00\u884c\u4f5c\u4e3a\u5176\u4e2d\u7684\u5143\u7d20\u3002</p> Python<pre><code>r = 'Mike,22,San Francisco'\nr.split()   #\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4e3a\u7528 None \u5206\u5272\uff08\u5404\u79cd\u7a7a\u767d\uff0c\u6bd4\u5982\uff0c\\t \u548c \\r \u90fd\u88ab\u5f53\u4f5c None\uff09\nr.split(sep=',')   #\u6307\u4ee5\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\n\nr.split(sep=',', maxsplit=1)  # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u62c6\u5206\u51e0\u6b21\uff0c\u5982\u679c\u662f\u4e00\u6b21\uff0c\u5c31\u4ee5\u7b2c\u4e00\u4e2a\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u4f4d\u7f6e\nr.split(sep=',', maxsplit=0)   #\u7b2c\u4e8c\u4e2a\u62c6\u5206\u82e5\u4e3a\u96f6\u6b21\uff0c\u5373\u4e0d\u62c6\u5206\nr.split(sep=',', maxsplit=-1)  # \u9ed8\u8ba4\u503c\u662f -1\uff0c\u62c6\u5206\u5168\u90e8\n</code></pre> <p>\u6ce8\u610f.splitlines()\u548c.splitline()\uff0c\u5b9e\u9645\u4e0a\u540e\u8005\u6ca1\u6709\u76f8\u5e94\u51fd\u6570\uff0c\u5199\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u4e86\u7528\u590d\u6570</p> <p>\u8fd8\u6709readlines()\u548creadline()\uff0c\u6709\u533a\u522b</p> <p>Writelines()\u548cwriteline()\uff0c\u6709\u533a\u522b</p> <p>\u2465\u5408\u5e76\u5b57\u7b26\u4e32</p> <p>\u548csplit()\u76f8\u53cd\uff0cjoin(iterable)\u65b9\u6cd5\u7528\u4e8e\u62fc\u63a5\u5b57\u7b26\u4e32</p> Python<pre><code>s = 'a'\nt = ['P', 'y', 't', 'h', 'o', 'n']\n''.join(t)\n'Python'\n\n'-'.join(t)\n'P-y-t-h-o-n'\n\n','.join(t)\n</code></pre> <p>join()\u7684\u53c2\u6570\u652f\u6301\u4e00\u5207\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5982\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u5178\u3001\u6587\u4ef6\u3001\u96c6\u5408\u6216\u8005\u751f\u6210\u5668\u7b49\u3002</p> <p>Python\u7a0b\u5e8f\u5458\u66f4\u559c\u6b22\u7528Join()\u65b9\u6cd5\u4ee3\u66ff\u52a0\u597d\u6765\u62fc\u63a5\u5b57\u7b26\u4e32\u3002</p> <p>\u2466 \u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316</p> <p>format()\u65b9\u6cd5\u63a5\u6536\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5373\u5f85\u8f6c\u5316\u7684\u53c2\u6570</p> Python<pre><code>#\u4f4d\u7f6e\u53c2\u6570\n\"{0} love {1}.{2}\".format(\"I\", \"FishC\", \"com\")\n\"I love FishC.com\"\n\n#\u5173\u952e\u5b57\u53c2\u6570\n\"{a} love {b}.{c}\".format(a=\"I\", b=\"FishC\", c=\"com\")\n\"I love FishC.com\"\n\n#\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u6df7\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f4d\u7f6e\u53c2\u6570\u653e\u6700\u524d\u9762\n#\u5173\u952e\u5b57\u53c2\u6570\n\"{0} love {b}.{c}\".format(\"I\", b=\"FishC\", c=\"com\")\n\"I love FishC.com\"\n\n#\u6570\u5b57\n\"{0}:{1:.2f}\".format(\"\u5706\u5468\u7387\", 3.14159)  #2\u8868\u793a\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u5c0f\u6570\n</code></pre> <p>\u2467\u5b57\u7b26\u4e32\u72ec\u4eab\u7684\u64cd\u4f5c\u7b26%</p> <p>%c: \u683c\u5f0f\u5316\u5b57\u7b26\u53ca\u5176ASCII\u7801</p> <p>%s: \u683c\u5f0f\u5316\u5b57\u7b26\u4e32</p> <p>%d: \u683c\u5f0f\u5316\u6574\u6570</p> <p>%o: \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u516b\u8fdb\u5236\u6570</p> <p>%x\uff1a\u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570</p> <p>%X: \u683c\u5f0f\u5316\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09</p> <p>%f: \u683c\u5f0f\u5316\u6d6e\u70b9\u6570\u5b57\uff0c\u53ef\u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u7684\u7cbe\u5ea6</p> <p>%e: \u79d1\u5b66\u8ba1\u6570\u6cd5\u683c\u5f0f\u5316\u6d6e\u70b9\u6570</p> Python<pre><code>&gt;&gt;&gt;'%c' % 97\n'a'\n&gt;&gt;&gt;'%d\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u6570\u4e3a\uff1a%o' % (123, 123)\n'123\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u6570\u4e3a\uff1a173'\n\n#\u4f7f\u7528\u683c\u5f0f\u5316\u65b9\u6cd5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u62fc\u63a5\n&gt;&gt;&gt;str1 = \"\u5e8a\u524d\u660e\u6708\u5149,\"\n&gt;&gt;&gt;str2 = \"\u7591\u662f\u5730\u4e0a\u971c\"\n&gt;&gt;&gt;\"%s%s\" % (str1, str2)\n'\u5e8a\u524d\u660e\u6708\u5149,\u7591\u662f\u5730\u4e0a\u971c'\n</code></pre> <p>\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26\u8f85\u52a9\u547d\u4ee4\uff1a</p> m.n m\u663e\u793a\u7684\u662f\u6700\u5c0f\u603b\u5bbd\u5ea6\uff0cn\u662f\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570 - \u7ed3\u679c\u5de6\u5bf9\u9f50 + \u5728\u6b63\u6570\u524d\u9762\u663e\u793a\u52a0\u53f7\uff08+) # \u5728\u516b\u8fdb\u5236\u6570\u524d\u9762\u663e\u793a'0o', \u5728\u5341\u516d\u8fdb\u5236\u6570\u524d\u9762\u663e\u793a'0x' \u6216'0X' 0 \u663e\u793a\u7684\u6570\u5b57\u524d\u9762\u586b\u5145'0'\u4ee3\u66ff\u7a7a\u683c Python<pre><code> #\u5b9e\u9645\u4e0a\u5982\u679c\u4fdd\u7559\u4e00\u4f4d\u5c0f\u657027.6\u603b\u51714\u4e2a\u5b57\u8282\u5bbd\uff0c'%1.1f'\u548c'%4.1f'\u683c\u5f0f\u5316\u6548\u679c\u4e00\u6837\n&gt;&gt;&gt;'%5.1f' % 27.568 \n' 27.6'\n&gt;&gt;&gt;'%.2e' % 27.568\n'2.76e+01'\n&gt;&gt;&gt;'%10d' % 5  #10\u4e2a\u5bbd\u5ea6\n'         5'\n&gt;&gt;&gt;'%-10d' % 5\n'5         '\n&gt;&gt;&gt;'%010d' % 5\n'0000000005'\n&gt;&gt;&gt;'%#x' % 100\n'0x64'\n</code></pre> <p>\u603b\u7ed3\uff1a\u5b57\u7b26\u4e32\u7684\u8fde\u63a5\u76ee\u524d\u6709\u4e09\u79cd\u65b9\u6cd5</p> <ul> <li>\u7b80\u5355\u5b57\u7b26\u4e32\u8fde\u63a5\uff0c\u7528\u52a0\u53f7\uff08+\uff09</li> <li>\u590d\u6742\u7684\uff0c\u5c24\u5176\u662f\u6709\u683c\u5f0f\u5316\u9700\u6c42\u662f\uff0c\u4f7f\u7528\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26\uff08%\uff09\u8fdb\u884c\u683c\u5f0f\u5316\u8fde\u63a5\uff0c\u5982\uff1a</li> </ul> <p>result = \"result is %s:%d\" % (name, score)</p> <ul> <li>\u5f53\u6709\u5927\u91cf\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u5c24\u5176\u53d1\u751f\u5728\u5faa\u73af\u4f53\u5185\u90e8\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u7684join()\u65b9\u6cd5\u65e0\u7591\u662f\u6700\u68d2\u7684\uff0c\u4f8b\u5982 result = \"\".join(iterator)</li> </ul>"},{"location":"CS/Python/Python-Notes-202410/#sequence-types-list-tuple-range","title":"\uff08\u56db\uff09Sequence Types: list, tuple, range","text":"<p>\u6570\u636e\u5bb9\u5668\u7684\u8303\u56f4\u5e7f\u6cdb\uff0c\u5176\u4e2d\u5305\u62ec\u5b57\u7b26\u4e32\u3001\u7531 range() \u51fd\u6570\u751f\u6210\u7684\u7b49\u5dee\u6570\u5217\u3001\u5217\u8868\uff08List\uff09\u3001\u5143\u7ec4\uff08Tuple\uff09\u3001\u96c6\u5408\uff08Set\uff09\u3001\u5b57\u5178\uff08Dictionary\uff09\u3002</p> <p>\u603b\u7ed3\uff1a</p> string list Tuple range Set Dict Representation 'Python'\"Python\" ['ann', 'Bob'] ('ann','Bob') range(10) {'ann':6575, 'bob':8982} Mutability No Yes No No Set mutable Frozen set immutable Yes Operator indexsliceiteration indexsliceiteration Method"},{"location":"CS/Python/Python-Notes-202410/#1common-sequence-operations","title":"1\u3001Common Sequence Operations","text":"<p>\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5171\u540c\u70b9\uff1a</p> <ul> <li>\u90fd\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u5f97\u5230\u6bcf\u4e00\u4e2a\u5143\u7d20\uff1b</li> <li>\u9ed8\u8ba4\u7d22\u5f15\u503c\u603b\u662f\u4ece0\u5f00\u59cb</li> <li>\u53ef\u4ee5\u901a\u8fc7\u5207\u7247\u7684\u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u5143\u7d20\u7684\u96c6\u5408</li> <li>\u6709\u5f88\u591a\u5171\u540c\u7684\u64cd\u4f5c\u7b26\uff08\u91cd\u590d\u64cd\u4f5c\u7b26\u3001\u62fc\u63a5\u64cd\u4f5c\u7b26\u3001\u6210\u5458\u5173\u7cfb\u64cd\u4f5c\u7b26\uff09</li> </ul> <p>\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u5171\u540c\u7684method\uff1a\u9002\u7528\u4e8e mutable \u548c immutable types</p> Operation Result Notes x in s \u5224\u65ad s \u4e2d\u662f\u5426\u5b58\u5728 x \u5143\u7d20 s + t \u62fc\u63a5 s * n \u5143\u7d20\u590d\u5236 n \u6b21 n is interger, s is a sequence s[i] \u4ece\u5de6\u5f80\u53f3\uff0c\u8fd4\u56de\u7b2c i \u7684\u5143\u7d20\uff0c\u6ce8\u610f 0 \u662f\u7b2c\u4e00\u4e2a s[i:j] \u8fd4\u56de\u5207\u7247\uff0c\u4ece \u7b2c i \u5230\u7b2c j \u4e2a\u5143\u7d20 s[i:j:k] \u8fd4\u56de\u5207\u7247\uff0c\u4ece \u7b2c i \u5230\u7b2c j \u4e2a\u5143\u7d20\uff0c\u6b65\u957f\u4e3a k Len(s) \u8fd4\u56de s \u7684\u5143\u7d20\u4e2a\u6570 min(s) s \u4e2d\u6700\u5c0f\u7684\u5143\u7d20 max(s) s \u4e2d\u6700\u5927\u7684\u5143\u7d20 s.index(x[,i[,j]]) \u5728 s \u4e2d x \u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5e8f\u53f7\uff08\u5728\u5305\u62ec i \u5728\u5185\u7684\u5e8f\u53f7 i \u548c j \u4e4b\u95f4\uff0c\u5982\u6709\u5b9a\u4e49\uff09 s.count(x) s\u4e2d x \u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 <p>\u6b64\u5916\uff0c\u540c\u79cd sequence \u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u3002  </p> <p>In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length.</p> <p>\u4ee5\u4e0b operation \u53ea\u9002\u7528\u4e8e mutable types\uff1a</p> Operation Result Notes s[i] = x \u5bf9 s \u7684\u7b2c i \u4e2a\u5143\u7d20\u8d4b\u503c x s[i: j] = t slice of s from i to j is replaced by the contents of the iterable t t \u7684\u6570\u91cf\u8981\u4e0e\u5207\u7247\u5143\u7d20\u6570\u91cf\u4e00\u6837\uff0c\u540e\u9762\u770b\u770b\u80fd\u5426\u6279\u91cf\u8d4b\u540c\u4e00\u4e2a\u503c del s[i:j] same as <code>s[i:j] = []</code> s[i:j:k] = t the elements of <code>s[i:j:k]</code> are replaced by those of t del s[i:j:k] removes the elements of <code>s[i:j:k]</code> from the list s.append(x) appends x to the end of the sequence (same as <code>s[len(s):len(s)] = [x]</code>) s.clear() removes all items from s (same as <code>del s[:]</code>) s.copy() creates a shallow copy of s (same as <code>s[:]</code>) s.extend(t)<code>or</code>s += t extends s with the contents of t (for the most part the same as <code>s[len(s):len(s)] = t</code>) s *= n updates s with its contents repeated n times <code>s.insert(i, x)</code> inserts x into s at the index given by i (same as <code>s[i:i] = [x]</code>) s.pop()<code>or</code>s.pop(i) retrieves the item at i and also removes it from s s.remove(x) remove the first item from s where <code>s[i]</code> is equal to x s.reverse() reverses the items of s in place"},{"location":"CS/Python/Python-Notes-202410/#2-list","title":"2\u3001\u5217\u8868 \uff08list\uff09\uff0c\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668","text":"<p>\u2460 \u8868\u793a</p> <p>Python\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5bb9\u5668\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u50a8\u5b58\u6279\u91cf\u7684\u6570\u636e\u3002</p> <p>\u5b57\u7b26\u4e32\u4e5f\u662f\u5bb9\u5668\u7684\u4e00\u79cd\u3002</p> <p>\u5217\u8868\uff08List\uff09\u4e5f\u662f\u4e00\u79cd\u5bb9\u5668\uff0c\u6ce8\u610f\u5217\u8868\u548c\u5b57\u5178\u7684\u533a\u522b\u3002</p> <p>\u5217\u8868\u53ef\u4ee5\u5b58\u653e\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c</p> Python<pre><code>mix = [520, \"\u5c0f\u7532\u9c7c\", 3.14, [1, 2, 3]]\n</code></pre> <p>\u521b\u5efa\u5217\u8868\uff0c\u53ef\u4ee5\u5148\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e00\u6dfb\u52a0</p> Python<pre><code>name = []\nname.append('Jack')\nname.append('Sally')\nname.append('Coco')\n</code></pre> <p>\u5217\u8868\u7684\u8868\u793a\u65b9\u5f0f\uff1a\u7528\u65b9\u62ec\u53f7[ ]\u8868\u793a</p> Python<pre><code>bikes =['Mobike', 'HelloBike', '\u9752\u6854\u5355\u8f66']\nbikes[0]  #\u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20,\u6ce8\u610f\u7528\u5927\u62ec\u53f7\n\n#\u5982\u4f55\u8bbf\u95ee\u6307\u5b9a\u987a\u5e8f\u7684\u5143\u7d20\nprint(bikes[0])              #\u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20,\u6ce8\u610f\u7528\u5927\u62ec\u53f7\nprint(bikes[0].title())      #\u9996\u5b57\u6bcd\u5927\u5199\nprint(bike[-1])              #-1\u4ee3\u8868\u8bbf\u95ee\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\n\n\n#\u5982\u679c\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\nfor bike in bikes\n    print(bike+\"\\n\")\n</code></pre> <p>\u2461\u5217\u8868\u7684\u64cd\u4f5c\u7b26</p> <p>\u5217\u8868\u7684\u64cd\u4f5c\u7b26\u5408\u5b57\u7b26\u4e32\u76f8\u540c\uff1a</p> <ul> <li>\u62fc\u63a5\uff1a+   \uff08\u548c\u5b57\u7b26\u4e32\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 \u7a7a\u683c\u8868\u793a\u62fc\u63a5\uff0c\u5217\u8868\u5c31\u4e0d\u53ef\u4ee5\u4e86\uff09</li> <li>\u62f7\u8d1d\uff1a*</li> <li>\u903b\u8f91\u8fd0\u7b97\uff1ain \u3001not in\uff1b\u4ee5\u53ca &lt;\u3001&lt;=\u3001&gt;\u3001&gt;=\u3001==\u3001!=</li> </ul> <p>\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u5bf9\u5217\u8868\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u7684\u9700\u6c42\u3002</p> <p>in \u548cnot in\u64cd\u4f5c\u7b26</p> <p>in \u548cnot in\u53ea\u80fd\u5224\u65ad\u4e00\u4e2a\u5c42\u6b21\u7684\u6210\u5458\u5173\u7cfb\uff0c\u8b6c\u5982\u4e0b\u9762\u7684\u5c31\u65e0\u6cd5\u8bc6\u522b7 \u548c9\u7684\u5b58\u5728</p> <p>a = [3, 5, [7, 9], 11, 13]</p> <p>\u2462\u5217\u8868\u5207\u7247\uff0c\u6839\u636e\u7d22\u5f15\u63d0\u53d6\u5217\u8868\u5143\u7d20</p> <p>\u5217\u8868\u5207\u7247\u4e0d\u4f1a\u6539\u53d8\u5217\u8868\u81ea\u8eab\u7684\u7ec4\u6210\u7ed3\u6784\u548c\u6570\u636e\uff0c\u5b83\u5176\u5b9e\u662f\u4e3a\u5217\u8868\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u62f7\u8d1d\uff08\u526f\u672c\uff09\u5e76\u8fd4\u56de\u3002</p> Python<pre><code>#\u8bbf\u95ee\u5217\u8868\na = [1, 3, 5, 7, 8, 9, 11, 13]\na[3]    #\u8fd4\u56de\u7b2c4\u4e2a\u5143\u7d20\na[:]    #\u8fd4\u56de\u6240\u6709\u5217\u8868\u7684\u5143\u7d20\na[5:]   #\u8fd4\u56de\u7b2c6\u4e2a\u5230\u6700\u540e\u7684\u5143\u7d20\na[:3]    #\u6ce8\u610f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5305\u62eca[3]\na[2:6]   # \u6ce8\u610f\uff0c\u8f93\u51faa[2]\u5230a[5]\n\n#\u5207\u7247\u7684\u9ad8\u9636\u73a9\u6cd5\na[0:7:2]  #\u8fd4\u56de1,5,8,11\na[-1]    #\u8fd4\u56de\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\na[::-1]  #\u4f1a\u5c06\u6574\u4e2a\u5217\u8868\u7ffb\u8f6c\u8fc7\u6765\n</code></pre> <p>\u5217\u8868\u53ef\u4ee5\u6839\u636e\u7d22\u5f15\u6765\u5220\u5bf9\u5e94\u7684\u4e00\u4e2a\u503c</p> <p>\u5b57\u7b26\u4e32\u65e0\u6cd5\u6839\u636e\u7d22\u5f15\u6765\u5220\u5bf9\u5e94\u7684\u503c</p> <p>\u5207\u7247\u8fd8\u6709\u66f4\u9ad8\u9636\u7684\u73a9\u6cd5\uff0c\u5373\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u4e3a\u6b65\u957f</p> <p>\u2463\u5217\u8868\u7684\u5185\u5efa\u51fd\u6570BIF</p> <p>len(a)    #\u8fd4\u56de\u5217\u8868\u4e2d\u5143\u7d20\u4e2a\u6570</p> <p>max(a)    #\u8fd4\u56de\u5217\u8868\u4e2d\u6700\u5927\u7684\u5143\u7d20</p> <p>min(a)    #\u8fd4\u56de\u5217\u8868\u4e2d\u6700\u5c0f\u7684\u5143\u7d20</p> Python<pre><code>&gt; a=[1, 3, 5, 8, 9, 11, 13]\n&gt; len(a)\n7\n&gt; max(a)\n13\n&gt; min(a)\n1\n</code></pre> <p>\u2464\u5217\u8868\u7684Method</p> Python<pre><code>['__add__', '__class__', '__class_getitem__', '__contains__', \n'__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__',\n'__format__', '__ge__', '__getattribute__', '__getitem__', \n'__gt__', '__hash__', '__iadd__', '__imul__', '__init__',\n'__init_subclass__', '__iter__', '__le__', '__len__', \n'__lt__', '__mul__', '__ne__', '__new__', '__reduce__', \n'__reduce_ex__', '__repr__', '__reversed__', '__rmul__',\n'__setattr__', '__setitem__', '__sizeof__', '__str__', \n'__subclasshook__', 'append', 'clear', 'copy', 'count',\n'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n</code></pre> <p>\u53ef\u53d8\u5e8f\u5217\u8fd8\u6709\u4e00\u7cfb\u5217\u53ef\u7528\u7684 Methods\uff1aa.append()\uff0ca.clear()\uff0ca.copy()\uff0ca.extend(t)\uff0ca.insert(i\uff0cx)\uff0ca.pop([i])\uff0ca.remove(x)\uff0ca.reverse()\u2026\u2026</p> <p>\u4e0d\u8bba\u5217\u8868\u4e2d\u7684\u5143\u7d20\u5168\u662f\u6570\u5b57\u4e5f\u597d\uff0c\u5168\u662f\u5b57\u7b26\u4e32\u4e5f\u597d\uff0c\u90fd\u53ef\u4ee5\u7528\u5230\u6392\u5e8f</p> <p>sort()</p> Python<pre><code>a =[3, 85, 5, 7, 12, 10]\na.sort()\nprint(a)\n[3, 5, 7, 10, 12, 85]\n\na.sort(reverse = True)\nprint(a)\n[85, 12, 10, 7, 5, 3]\n</code></pre> <p>\u5217\u8868\u7684\u589e\uff1alist.append()</p> <p>append()\u4e0d\u662f\u4e00\u4e2aBIF\u51fd\u6570\uff0c\u800c\u662f\u5217\u8868\u7684\u4e00\u4e2a\u65b9\u6cd5\uff1b</p> <p>append\u4e00\u6b21\u53ea\u652f\u6301\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20</p> Python<pre><code>b = [1, 2, 3]\nb.append(4)\nb.append(4,5)  #\u4e0d\u5141\u8bb8\u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u5143\u7d20\n</code></pre> <p>\u540c\u65f6\u589e\u52a0\u591a\u4e2a\u5143\u7d20\uff1alist.extend()</p> <p>\u5b9e\u9645\u4e0a\u662f\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u589e\u52a0\u7684</p> Python<pre><code>b = [1, 2, 3]\nb.extend([4,5])\n</code></pre> <p>\u6307\u5b9a\u7d22\u5f15\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\uff1alist.insert(i, x)</p> Python<pre><code>a = [85, 12, 10, 7, 5, 3]\na.insert(2,30)\na\n[85, 12, 30, 10, 7, 5, 3]\n</code></pre> <p>\u5220\u9664\u6307\u5b9a\u7684\u503c\uff1aremove()</p> <p>\u5982\u679c\u5217\u8868\u6ca1\u6709\u8fd9\u4e2a\u503c\u4f1a\u62a5\u9519</p> Python<pre><code>a = [85, 12, 10, 7, 5, 3]\na.remove(85)  \n</code></pre> <p>\u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u6570\uff1alist.pop(i)</p> Python<pre><code>a\n[85, 12, 30, 10, 7, 5, 3]\nb = a.pop(3)\na\n[85, 12, 30, 7, 5, 3]\nb\n10\n</code></pre> <p>\u6709\u4e00\u4e2a\u547d\u4ee4\u3001\u4e24\u4e2a Methods \u4e0e\u5220\u9664\u5355\u4e2a\u5143\u7d20\u76f8\u5173\u8054\uff0cdel\uff0ca.pop([i])\uff0ca.remove(x)\uff0c\u8bf7\u6ce8\u610f\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u3002</p> <p>list.choice\u65b9\u6cd5\u5b9e\u73b0\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u5217\u8868\u4e2d\u5143\u7d20\u7684\u529f\u80fd</p> Python<pre><code>import random\na = [85, 12, 30, 7, 5, 3]\nrandom.choice(a)\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#3-tuple","title":"3\u3001\u5143\u7ec4 Tuple\uff0c\u4e0d\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668","text":"<p>string \u548c tuple \u6bd4\u8f83\u50cf\uff1a</p> <ul> <li>immutable</li> <li>can be concatenated</li> <li>can be indexed</li> <li>can be sliced</li> </ul> <p>\u5217\u8868\u548c\u5143\u7ec4\u4e0d\u540c\u7684\u5730\u65b9\uff1a</p> <p>List\u662f\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668\uff0cTuple\u662f\u4e0d\u53ef\u53d8\u6709\u5e8f\u5bb9\u5668\uff0c\u4e5f\u79f0\u5143\u7ec4\u662f\u5143\u7d20\u4e0a\u4e86\u9501\u7684\u5217\u8868\uff0c\u53ea\u80fd\u8bfb\u53d6\uff0c\u4e0d\u80fd\u4fee\u6539\u6216\u5220\u9664\u5176\u4e2d\u7684\u5143\u7d20\u3002\u6b64\u5916\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u7d20\u4e5f\u4e0d\u53ef\u66f4\u6539</p> <p>\u9996\u5148\u662f\u4f7f\u7528\u573a\u666f\uff0c\u5728\u5c06\u6765\u9700\u8981\u66f4\u6539\u7684\u65f6\u5019\uff0c\u521b\u5efa List \uff1b\u5728\u5c06\u6765\u4e0d\u9700\u8981\u66f4\u6539\u7684\u65f6\u5019\uff0c\u521b\u5efa Tuple\u3002\u5176\u6b21\uff0c\u4ece\u8ba1\u7b97\u673a\u7684\u89d2\u5ea6\u6765\u770b\uff0cTuple \u76f8\u5bf9\u4e8e List \u5360\u7528\u66f4\u5c0f\u7684\u5185\u5b58\u3002</p> <p>\u62fc\u63a5\u64cd\u4f5c\u7b26\uff08+\uff09\uff0c\u91cd\u590d\u64cd\u4f5c\u7b26\uff08\u5143\u7ec4\u540d*3)\uff0c\u5173\u7cfb\u64cd\u4f5c\u7b26\uff0c\u903b\u8f91\u64cd\u4f5c\u7b26\uff0c\u6210\u5458\u5173\u7cfb\u7b26\uff08in \u548cnot in\uff09\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u5728\u5143\u7ec4\u4e0a\uff0c\u4e0e\u5217\u8868\u662f\u4e00\u6837\u7684\u3002</p> <p>\u2460\u521b\u5efatuple</p> <p>List\u7528\u4e2d\u62ec\u53f7\u6807\u8bc6\uff0cTuple\u7528\u5c0f\u62ec\u53f7\u6807\u8bc6</p> <p>a = (2, )   #\u53ea\u6709\u5355\u4e2a\u5143\u7d20\u65f6\uff0c\u4e00\u5b9a\u8981\u5e26\u4e0a\u62ec\u53f7</p> <p>\u6216\u8005\u4e0d\u5e26\u62ec\u53f7\uff0ca = 2, \u4e5f\u53ef\u4ee5\u521b\u5efa\u5143\u7ec4\uff0c\u4f46\u6700\u597d\u5e26\u4e0a\u62ec\u53f7</p> Python<pre><code>b = (2)   #\u7528type()\u51fd\u6570\uff0cb \u662f\u4e00\u4e2aint\nc = (2,)  #\u7528type()\u51fd\u6570\uff0cc \u662f\u4e00\u4e2atuple\nc = 2,    #\u4e5f\u662f\u4e00\u4e2atuple\n</code></pre> <p>\u2461\u8bbf\u95ee\u5143\u7ec4</p> <p>\u4e0e\u5217\u8868\u4e2d\u7684\u5207\u7247\u7c7b\u4f3c\uff0c\u4f46\u7d22\u5f15\u8981\u7528\u4e2d\u62ec\u53f7\u62ec\u8d77\u6765</p> <p>\u590d\u5236\u5143\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u5b9e\u73b0</p> Python<pre><code>a = (1, 3, 5)\na[0]  #\u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\nb = a[:]  #\u590d\u5236\u5143\u7ec4\n</code></pre> <p>\u2462\u6dfb\u52a0\u5143\u7d20 </p> <p>\u4e0d\u53ef\u5220\u9664\u5143\u7d20\uff0c\u4f46\u53ef\u4ee5\u8ffd\u52a0\u5143\u7d20</p> Python<pre><code>c = c+(3,5)  \n</code></pre> <p>\u2463\u66f4\u65b0\u5143\u7ec4</p> <p>\u5143\u7ec4\u672c\u8eab\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\uff0c\u4f46\u901a\u8fc7\u5207\u7247+\u8d4b\u503c\u53ef\u4ee5\u95f4\u63a5\u5b9e\u73b0\u5143\u7ec4\u7684\u66f4\u65b0\u3002</p> Python<pre><code>x_men = (\"\u91d1\u521a\u72fc\",\"X\u6559\u6388\",\"\u66b4\u98ce\u5973\",\"\u706b\u51e4\u51f0\",\"\u956d\u5c04\u773c\")\nx_men = (x_men[0], \"\u5c0f\u7532\u9c7c\") + x_men[2:]\n#\u4ee5\u4e0a\u7a0b\u5e8f\u7684\u7ed3\u679c\u5c31\u662f\u628a\u5143\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u5143\u7d20\u66f4\u6539\u4e3a\u5c0f\u7532\u9c7c\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#4range","title":"4\u3001range","text":"<p>All of the operations on tuples are also available for ranges, except for concatenation and repitition.</p>"},{"location":"CS/Python/Python-Notes-202410/#set","title":"\uff08\u4e94\uff09\u96c6\u5408\uff08set\uff09\uff0c\u65e0\u5e8f\uff0c\u4e0d\u5305\u542b\u91cd\u590d\u5143\u7d20","text":"<p>\u96c6\u5408\u53c8\u5206\u4e3a\u4e24\u79cd\uff1a</p> <ul> <li> <p>Set\uff0c\u53ef\u53d8\u7684\uff1b</p> </li> <li> <p>Frozen Set\uff0c\u4e0d\u53ef\u53d8\u7684\u3002</p> </li> </ul> <p>\u96c6\u5408\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\uff08\u56de\u987e\uff0c\u5217\u8868\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5143\u7ec4\u7528\u5c0f\u62ec\u53f7\uff09\uff0c\u6ce8\u610f\u5b57\u5178\u4e5f\u662f\u7528\u5927\u62ec\u53f7\u521b\u5efa\uff0c\u53ea\u4e0d\u8fc7dict\u5185\u90e8\u7684\u5143\u7d20\u8868\u793a\u65b9\u5f0f\u4e0e\u96c6\u5408\u4e0d\u540c\u3002</p> <p>\u5217\u8868\u4e2d\u53ef\u5b58\u50a8\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u7b49\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e</p> <p>\u5143\u7ec4\u53ea\u80fd\u5b58\u50a8\u5143\u7ec4\uff08\u8981\u4e48\u90fd\u662f\u6570\u5b57\uff0c\u8981\u4e48\u90fd\u662f\u5b57\u7b26\u4e32\uff09</p> <p>\u2460\u96c6\u5408\u7684\u521b\u5efa </p> <p>b= set() </p> <p>\u53ef\u4ee5\u628a\u5217\u8868 \u3001\u5143\u7ec4\u3001\u5e8f\u5217\u90fd\u8f6c\u6362\u4e3a\u96c6\u5408\uff0c\u4f7f\u7528set\u51fd\u6570\u5373\u53ef\uff0c\u8f6c\u6362\u4e4b\u540e\uff0c\u540c\u65f6\u4e5f\u5bf9\u5143\u7d20\u53bb\u91cd\u3002</p> Python<pre><code>&gt; a=(1, 2, 3)\n&gt; type(a)\n&lt;class 'tuple'&gt;\n\n&gt; name=[1, 'Jack']\n&gt; type(name)\n&lt;class 'list'&gt;\n\n&gt; set(a)\n{1, 2, 3}\n&gt; set(name)\n{1, 'Jack'}\n#\u53bb\u91cd\n&gt; a = (1,2,2,3,3,4)\n&gt; set(a)\n{1, 2, 3, 4}\n</code></pre> <p>\u2461\u96c6\u5408\u7684\u64cd\u4f5c</p> <p>len()\u3001max()\u3001min()</p> <p>in\u64cd\u4f5c</p> Python<pre><code>&gt; set(a)\n{1, 2, 3, 4}\n&gt; 2 in set(a)\nTrue\n&gt; 5 in set(a)\nFalse\n\n&gt; max(a)\n4\n&gt; len(a)\n6\n&gt; min(a)\n1\n</code></pre> <p>\u5220\u9664\u5143\u7d20 set.remove(\uff09</p> Python<pre><code>&gt; a=(1, 2, 2, 3, 3, 4)\n&gt; b = set(a)\n&gt; print(b)\n{1, 2, 3, 4}\n&gt; len(b)\n4\n&gt; b.remove(2)\n&gt; print(b)\n{1, 3, 4}\n</code></pre> <p>\u96c6\u5408\u8fd0\u7b97\uff1a</p> <ul> <li>\u5e76\u96c6\uff1a I\uff0c\u7528method\u5c31\u662f set_1.union(set_2)</li> <li>\u4ea4\u96c6\uff1a&amp;, \u7528method\u5c31\u662f set_1.intersection(set_2)</li> <li>\u5dee\u96c6\uff1a - ,\u7528method\u5c31\u662f set_1.difference(set_2)</li> <li>\u5bf9\u79f0\u5dee\u96c6\uff1a^ , \u7528method\u5c31\u662fsymmetric_difference(set_2)</li> </ul> Python<pre><code>&gt; admins = {'Moose', 'Joker', 'Joker'}\n&gt; moderators = {'Chris', 'Moose', 'Jane', 'Zero'}\n\n&gt; admins.union(moderators)\n... \n{'Moose', 'Chris', 'Jane', 'Zero', 'Joker'}\n\n&gt; admins.intersection(moderators)\n... \n{'Moose'}\n\n&gt; admins.difference(moderators)\n... \n{'Joker'}\n\n&gt; admins.symmetric_difference(moderators)\n{'Chris', 'Zero', 'Jane', 'Joker'}\n</code></pre> <p>\u2462\u96c6\u5408\u7684\u903b\u8f91\u8fd0\u7b97</p> <p>\u4ee5\u4e0b\u5747\u8fd4\u56deTrue and False</p> <p>==</p> <p>!=</p> <p>isdisjoint(set_2) </p> <p>issubset(set_2)</p> <p>set &lt; other</p> <p>issuperset(set_2)  </p> <p>set_1 &gt;= set_2</p> <p>\u2463\u66f4\u65b0</p> Python<pre><code>b\n{1, 3, 4}\nb.add(5)\nb\n{1, 3, 4, 5}\nb.remove(5)\nb\n{1, 3, 4}\nb.discard(1)\nb\n{3, 4}\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#mapping-types-dict","title":"\uff08\u516d\uff09Mapping Types: dict","text":"<p>\u5b57\u5178\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u7531\u4e24\u90e8\u5206\u6784\u6210\uff0ckey\u548cvalue\uff0c\u4e8c\u8005\u7531\u4e00\u4e2a\u5192\u53f7\u8fde\u63a5\u3002</p> Python<pre><code>&gt; phonebook = {'Ann':6575, 'Bob':8982, 'Joe':2598}\n&gt; phonebook['Ann']   #\u6ce8\u610f\u8bbf\u95ee\u65f6\uff0c\u4e2d\u62ec\u53f7\u628akey\u62ec\u8d77\u6765\n</code></pre> <p>\u2460\u589e</p> Python<pre><code>update_pb = {'Jack': 1234}\nphonebook.update(update_pb)   #\u6240\u4ee5update\u51fd\u6570\u91cc\u4e5f\u5e94\u8be5\u662f\u4e00\u4e2adict\u7c7b\u578b\n\nphonebook\n{'Ann': 8888, 'Bob': 8982, 'Joe': 2598, 'Jack': 1234}\n</code></pre> <p>\u2461\u6539</p> Python<pre><code>phonebook\n{'Ann': 6575, 'Bob': 8982, 'Joe': 2598}\nphonebook['Ann']\n6575\nphonebook['Ann'] = 8888   #\u66f4\u6539\u67d0\u4e2akey\u7684value\nphonebook\n{'Ann': 8888, 'Bob': 8982, 'Joe': 2598}\n</code></pre> <p>\u2462\u5220</p> Python<pre><code>phonebook\n{'Ann': 8888, 'Bob': 8982, 'Joe': 2598, 'Jack': 1234}\ndel phonebook['Jack']  #\nphonebook\n{'Ann': 8888, 'Bob': 8982, 'Joe': 2598}\n</code></pre> <p>\u2463\u5185\u5efa\u51fd\u6570</p> <p>len(phonebook)</p> <p>max(phonebook)</p> <p>min(xx)</p> <p>sorted(phonebook)</p> <p>sorted(phonebook, reverse = True)</p> <p>\u8fed\u4ee3\u5bb9\u5668\u4e2d\u5143\u7d20</p> Python<pre><code>#\u5982\u679c\u8981\u904d\u5386\u5b57\u5178\u6240\u6709\u7684\u503c\nfor name, bike in transportation:\n    print(name.title()+\": \"+bike.title())\n</code></pre> <p>dict \u6709 get()\u65b9\u6cd5\uff0clist \u5217\u8868\u6ca1\u6709\u3002</p> <p>\u53c2\u8003\uff1ahttps://stackoverflow.com/questions/5125619/why-doesnt-list-have-safe-get-method-like-dictionary</p>"},{"location":"CS/Python/Python-Notes-202410/#5iterator-types-list-range-tuple-str-sets-dict","title":"5\u3001Iterator Types :list, range, tuple, str, sets, dict","text":"<p>\u2460 \u6570\u5217</p> <p>\u2461\u5217\u8868</p> Python<pre><code>L = ['ann', 'bob', 'joe', 'john', 'mike']\nfor i, L in enumerate(L):\n    print(i, L)\n\n0 Ann\n1 Bob\n2 Joe\n</code></pre> <p>\u2462\u5b57\u7b26\u4e32</p> Text Only<pre><code>s = 'Python'\nfor ch in s:\n    print(ch)\n\nP\ny\nt\nh\no\nn\n</code></pre> <p>\u8fed\u4ee3\u540c\u65f6\uff0c\u83b7\u53d6\u5b57\u6bcd\u7d22\u5f15</p> Python<pre><code>s = 'Python'\nfor i, c in enumerate(s):\n    print(i, c)\n\n0 P\n1 y\n2 t\n3 h\n4 o\n5 n\n</code></pre> <p>\u2463\u5143\u7ec4</p> Python<pre><code>t = ('ann', 'bob', 'joe', 'john', 'mike')\nfor i, t in enumerate(t):\n    print(i, t)\n\n0 ann\n1 bob\n2 Cindy\n</code></pre> <p>\u2464\u5b57\u5178</p> Python<pre><code>phonebook1 = {'ann':6575, 'bob':8982, 'joe':2598, 'zoe':1225, 'ann':6585}\nfor key,value in phonebook1.items():\n    print(key, value)\n</code></pre> <p>\u603b\u7ed3\uff1a\u4ee5\u4e0b\u7edf\u79f0\u4e3a\u5bb9\u5668</p> Text Only<pre><code>L = ['ann', 'bob', 'joe', 'john', 'mike'] #list\ns = 'Python' # String\nr = range(10) #range\nt = ('ann', 'bob', 'joe', 'john', 'mike') #\u5143\u7ec4 tuple\nphonebook1 = {'ann':6575, 'bob':8982, 'joe':2598, 'zoe':1225, 'ann':6585} # dictionary\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#6","title":"6\u3001\u6587\u4ef6","text":"<p>open(file, mode = 'r')</p> <p>mode\u7684\u53c2\u6570\u5b57\u7b26\u5982\u4e0b</p> <p></p> <p>\u8bfb\u53d6\u6587\u4ef6\u540d\u79f0\uff0c\u5e76\u6253\u5370\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u659c\u6760\u8981\u6362\u6210\u53f3\u659c\u6760|'/'\uff0cWindows\u7684\u6587\u4ef6\u76ee\u5f55\u662f\u5de6\u659c\u6760\u201c\\\"\uff0c</p> Python<pre><code>f = open('C:/Users/anzch/Documents/Python_Practice/test.txt', 'w')\nprint(f.name)\nf.close()\n</code></pre> <p>\u7ec3\u4e60\uff1a\u4ece37\u4e07\u82f1\u6587\u5355\u8bcd\u4e2d\uff0c\u627e\u51fa \u4e00\u4e9b\u6309\u7167\u540c\u6837\u7684\u8ba1\u7b97\u65b9\u5f0f\u80fd\u5f97\u5230 100 \u7684\u5355\u8bcd\uff0c\u5e76\u4e14\u8fd8\u662f\u90a3\u79cd\u4e00\u770b\u5c31\u662f \u201c\u53cd\u4f8b\u201d \u7684\u5355\u8bcd\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#if-forwhile","title":"\u4e94\u3001if \u8bed\u53e5\u4e0efor\u5faa\u73af\u3001While\u5faa\u73af","text":"<p>\u4e24\u79cd\u8bed\u53e5\uff1a\u5206\u652f\u548c\u5faa\u73af\uff0c\u5faa\u73af\u53c8\u5305\u62ecfor \u5faa\u73af\u548cwhile\u5faa\u73af</p>"},{"location":"CS/Python/Python-Notes-202410/#1if","title":"1\u3001if \u8bed\u53e5","text":"<p>\uff081\uff09if\u8bed\u53e5\u7684\u6784\u6210</p> <p>\u6ce8\u610f\uff1a</p> <p>expression\uff0c\u540e\u9762\u7d27\u8ddf\u5192\u53f7</p> <p>statements\u8981\u7a7a\u4e24\u683c</p> <p>if \u548celse\u8981\u662f\u540c\u7b49\u7f29\u8fdb</p> Python<pre><code>if expression:\n    statements\n\n#\u5982\u679c\u7a0d\u5fae\u590d\u6742\u70b9\uff0c\u5e26else\u5faa\u73af\nif expression:\n    statements_for_True  \nelse:\n    statements_for_False\n</code></pre> <p>\u591a\u4e2a\u5206\u652f\u5c31\u7528elif\u5904\u7406</p> Python<pre><code>if expression_1:\n    statements_for_expression_1_True\n\nelif expression_2:\n    statements_for_expression_2_True\n\nelif expression_3:\n    statements_for_expression_3_True  \n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#2for_1","title":"2\u3001for \u5faa\u73af","text":"<p>Python\u8bed\u8a00\u4e2d\uff0cfor\u5faa\u73af\u4e0d\u4f7f\u7528\u5176\u5b83\u8bed\u8a00\u4e2d\u90a3\u6837\u7684\u8ba1\u6570\u5668\uff0c\u800c\u662f\u7528range\uff08\uff09,\u66ff\u4ee3\u8ba1\u6570\u5668</p> <p>\u8b6c\u5982\uff0c\u7528C\u8bed\u8a00\u5199\u5faa\u73af\u662f\u8fd9\u6837\uff1a</p> C<pre><code>for( a = 0; a &lt; 10; a = a + 1) {\n    print(\"Value of a:%d\\n\", a);\n}\n</code></pre> <p>\u7528python\u5199\u540c\u6837\u7684\u4e1c\u897f\uff0c\u662f\u8fd9\u6837\u7684\uff1a</p> Python<pre><code>for a in range(10):\n    print(\"Value of a:\" + str(a))\n</code></pre> <p>\uff081\uff09range()\u51fd\u6570 \u7b49\u5dee\u5217\u8868\u51fd\u6570</p> <p>range(10) \uff0c\u6307[0 ,1,2,3,4,5,6,7,8,9]</p> <p>\u7b49\u540c\u4e8erange(0, 10)</p> <p>\u4e0d\u8fc7\u8981\u8ba9\u4e0a\u8ff0\u6570\u7ec4\u5b8c\u5168\u663e\u793a\u51fa\u6765\uff0c\u9700\u8981\u7528\u5230list()</p> Python<pre><code>&gt; range(10)\nrange(0, 10)\n&gt; range(0, 10)\nrange(0, 10)\n&gt; list(range(0,10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>range\u51fd\u6570\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6b65\u957f</p> Python<pre><code>list(range(0, 12, 2))\n[0, 2, 4, 6, 8, 10]\n</code></pre> <p>\uff082\uff09Continue\u3001Break \u548cPass</p> <p>continue \u8bed\u53e5\u5c06\u5ffd\u7565\u5176\u540e\u7684\u8bed\u53e5\u5f00\u59cb\u4e0b\u6b21\u5faa\u73af\uff0c\u800cbreak\u8bed\u53e5\u5c06\u4ece\u6b64\u7ed3\u675f\u5f53\u524d\u5faa\u73af\uff08\u4e5f\u4e0d\u4f1a\u518d\u6709\u4e0b\u6b21\u5faa\u73af\uff0c\u5b9e\u9645\u4e0a\u8df3\u51fa\u4e86\u5faa\u73af\uff09\uff0c\u6267\u884c\u5faa\u73af\u4e4b\u540e\u7684\u8bed\u53e5\u3002</p> <p>\u7279\u522b\u7684\u4f53\u9a8c\u4e00\u4e0b\u6ca1\u6709break\u548c\u6709break\u7684\u533a\u522b</p> Python<pre><code>#\u6253\u5370\u51fa1~1000\u4ee5\u5185\u7684\u8d28\u6570\nfor n in range(2, 100):\n    if n == 2:\n        print(n)\n        continue\n    for i in range(2, n):\n        if(n % i)== 0:\n            break\n    print(n)\n</code></pre> <p>\u8be5\u79cd\u60c5\u51b5\u4e0b\uff0cprint(n)\u5c5e\u4e8e\u8bed\u53e5\u5757for n in range(2, 100)\uff0c\u4e5f\u5c31\u662f2~99\u5168\u90e8\u90fd\u4f1a\u8f93\u51fa\u4e00\u904d</p> Python<pre><code>for n in range(2, 100):\n    if n == 2:\n        print(n)\n        continue\n    for i in range(2, n):\n        if(n % i)== 0:\n            break\n        print(n)\n</code></pre> <p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cprint(n)\u5c5e\u4e8e\u8bed\u53e5 for i in range(2, n)\uff0c\u6bcf\u78b0\u5230\u4e00\u4e2a\u8d28\u6570\uff0c\u90fd\u4f1a\u6253\u5370\u4e00\u904d\uff0c\u8b6c\u59825\uff0c\u90a3\u4e482,3,4\uff0c\u90fd\u6ee1\u8db3 n % i !=0\uff0c\u90a3\u4e485\u4f1a\u6253\u53703\u6b21\u3002</p> <p>\u53ea\u6253\u5370\u4e00\u6b21 \u7684\u505a\u6cd5\u662f\uff1a</p> Python<pre><code>for n in range(2, 100):\n    if n == 2:\n        print(n)\n        continue\n    for i in range(2, n):\n        if(n % i)== 0:\n            break\n    else:       #\u53ea\u5728\u5927\u5faa\u73afrange(2,100)\u4e2d\uff0c\u53ea\u6709\u5f53\u4e0d\u51fa\u73b0break\u65f6\uff0c\u624d\u6253\u5370n\n        print(n)\n</code></pre> <p>\uff082\uff09\u53e6\u5916\u4e00\u4e2a\u7528\u4e8e\u7406\u89e3break\u548ccontinue\u8bed\u53e5\u533a\u522b\u7684\u4f8b\u5b50</p> Python<pre><code>#\u8be5\u7a0b\u5e8f\u627e\u5230\u7b2c\u4e00\u4e2a\u7b26\u5408if\u6761\u4ef6\u7684\u95f0\u5e74\uff0c\u5c31\u7ed3\u675f\u4e86\u5faa\u73af\nfor year in range(2018,2100):\n    if (year % 4 ==0) and (year %100 !=0) or (year %400 ==0):\n        break\nprint(\"2018\u5e74\u4ee5\u540e\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u95f0\u5e74\u662f\", year)\n</code></pre> Python<pre><code>#\u8be5\u7a0b\u5e8f\u4f1a\u6253\u5370\u51fa2018\u52302100\u4e4b\u95f4\u6240\u6709\u7684\u95f0\u5e74\nfor year in range(2018,2100):\n    if (year % 4 ==0) and (year %100 !=0) or (year %400 ==0):\n    print(year)\n    continue\n</code></pre> <p>\uff083\uff09for \u4e0eelse\u8bed\u53e5\u7684\u7ec4\u5408</p> <p>for\u5faa\u73af\u4ee5\u53ca\u63a5\u4e0b\u6765\u7684while\u5faa\u73af\u8bed\u53e5\u7684\u540e\u9762\u4e5f\u53ef\u4ee5\u52a0\u4e0a\u4e00\u4e2aelse\u8bed\u53e5\uff0celse\u8bed\u53e5\u53ea\u5728\u5faa\u73af\u5b8c\u6210\u540e\u6267\u884c\u3002</p> <p>\u5982\u679c\u5faa\u73af\u4e2d\u95f4\u4f7f\u7528break\u8bed\u53e5\u8df3\u51fa\u5faa\u73af\uff0c\u90a3\u4e48else\u91cc\u8fb9\u7684\u5185\u5bb9\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u4e86\u3002</p> <p>\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <p>for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61:</p> <p>\u200b   \u5faa\u73af\u4f53</p> <p>else:</p> <p>\u200b   \u6761\u4ef6\u4e0d\u6210\u7acb\u65f6\u6267\u884c\u7684\u5185\u5bb9</p> <p>\u4f8b\u5b501\uff1a\u6c42\u95f0\u5e74</p> Python<pre><code>for year in range(2018,2100):\n    if (year % 4 ==0) and (year %100 !=0) or (year %400 ==0):\n        break\nelse:\nprint(\"2018\u5e74\u4ee5\u540e\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u95f0\u5e74\u662f\", year) #\n</code></pre> <p>\u4f8b\u5b502\uff1a\u6c4220\u4ee5\u5185\u7684\u8d28\u6570</p> Python<pre><code>for num in range(1, 20):\n    if num == 2:\n        print(num)\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                break       #\u5f53\u6709\u4e00\u4e2ai\u4f7f\u5f97num\u80fd\u88abi\u6574\u9664\uff0c\u90a3\u4e48\u5faa\u73af\u7ed3\u675f\uff0celse\u8bed\u53e5\u4e0d\u4f1a\u88ab\u6267\u884c\n        else:               #\u6ce8\u610felse\u662f\u548cfor\u5728\u4e00\u4e2a\u7f29\u8fdb\n            print(num)\n</code></pre> <p>\u4f8b\u5b503\uff1a\u6c42\u6700\u5927\u516c\u7ea6\u6570</p> Python<pre><code>def showMaxFactor(num):\n    count = num // 2\n    while count &gt; 1:\n        if num % count == 0:\n            print(\"\u6700\u5927\u516c\u7ea6\u6570\u662f\uff1a%d\" % count)\n            break\n        count = count - 1   #\u6ce8\u610fcount\u7f29\u8fdb\u7684\u4f4d\u7f6e\uff0c\u5e94\u8be5\u5728while\u5faa\u73af\u4f53\u91cc\uff0c\u800c\u4e0d\u662fif\u5d4c\u5957\u91cc\n    else:\n        print('%d \u662f\u7d20\u6570' % num)\n\nnum = input(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff1a\")\nshowMaxFactor(int(num))   #\u8fd9\u91cc\u5e94\u8be5\u7528Int\u5c06\u5b57\u7b26\u7c7b\u578b\u8f6c\u6362\u4e3a\u6570\u5b57\u7c7b\u578b\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#3while","title":"3\u3001while \u5faa\u73af","text":"<p>\u4eca\u5929\uff0c\u7edd\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u90fd\u63d0\u4f9b\u4e24\u79cd\u5faa\u73af\u7ed3\u6784\uff1a</p> <p>Collection-controlled loops\uff0c\u4ee5\u96c6\u5408\u4e3a\u57fa\u7840\u7684\u5faa\u73af\uff0cPython\u4e2d\u6307for in\u5faa\u73af</p> <p>Condition-controlled loops, \u4ee5\u6761\u4ef6\u4e3a\u57fa\u7840\u7684\u5faa\u73af\uff0cPython\u4e2d\u6307while\u5faa\u73af</p> <p>for\u9002\u5408\u5904\u7406\u5e8f\u5217\u7c7b\u578b\u7684\u6570\u636e\u7684\u8fed\u4ee3\uff0c\u6bd4\u5982\u5904\u7406\u5b57\u7b26\u4e32\uff08\u5b57\u5178\uff09\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26</p> <p>while\u66f4\u7075\u6d3b\uff0c\u56e0\u4e3a\u5b83\u540e\u9762\u53ea\u9700\u8981\u63a5\u4e0a\u4e00\u4e2a\u903b\u8f91\u8868\u8fbe\u5f0f\u5373\u53ef\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#_7","title":"\u516d\u3001\u51fd\u6570","text":"<p>\u5173\u4e8e\u6700\u7b80\u5355\u51fd\u6570\u8be5\u600e\u4e48\u5199\uff0c\u6ce8\u610f\u5192\u53f7\u4e0d\u8981\u5fd8\u4e86\uff0c\u6ce8\u610f\u7f29\u8fdb\u3002</p> Python<pre><code>def greet_user(username):       #\u6ce8\u610f\u51fd\u6570\u4f53\u7684\u5192\u53f7\u4e0d\u8981\u5fd8\u4e86\n    print('Hello, '+ username.title()+\"!\")\n\ngreet_user('Jack')\n</code></pre> <p>\u5176\u4e2dusername\u662f\u4e00\u4e2a\u5f62\u53c2\uff0c\u800c\u5b57\u7b26\u4e32'Jack'\u662f\u5b9e\u53c2\uff0c\u5b9e\u53c2\u662f\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4fe1\u606f\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#1print","title":"1\u3001Print","text":"<p>print\u7684\u5b98\u65b9\u529f\u80fd\uff1a</p> <p>print(*object, sep=' ', end='\\n', file=sys.stdout, flush=False)</p> <p>\u5176\u4e2dprint()\u51fd\u6570\u9ed8\u8ba4 \u5728\u5355\u8bcd\u95f4\u4ee5\u7a7a\u683c\u952e\u4f5c\u4e3a\u4e24\u4e2a\u5355\u8bcd\u4e4b\u95f4\u76f8\u9694\u7684\u5360\u4f4d\u7b26\uff0c\u9ed8\u8ba4\u7ed3\u5c3e\u81ea\u52a8\u6362\u884c</p> Python<pre><code>print('hello', 'World!', sep='-', end='\\n')\nhello-World!\nprint('hello', 'World!', sep='~', end='\\t')\nhello~World!\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#2_2","title":"2\u3001\u4f4d\u7f6e\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570","text":"<p>\u5411\u51fd\u6570\u4f20\u9012\u5b9e\u53c2\u7684\u65b9\u5f0f\u7531\u5f88\u591a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u5b9e\u53c2\uff0c\u4e5f\u53ef\u4ee5\u7528\u5173\u952e\u5b57\u5b9e\u53c2</p> <p>\u4f4d\u7f6e\u53c2\u6570\uff1apositional arguments \uff0c\u8981\u6c42\u5b9e\u53c2\u7684\u987a\u5e8f\u4e0e\u5f62\u53c2\u7684\u987a\u5e8f\u76f8\u540c\uff1b</p> <p>\u5173\u952e\u5b57\u53c2\u6570\uff1akeyword arguments \uff0c\u6bcf\u4e2a\u5b9e\u53c2\u90fd\u7531\u53d8\u91cf\u540d\u548c\u503c\u7ec4\u6210\uff1b</p>"},{"location":"CS/Python/Python-Notes-202410/#21-positional-arguments","title":"2.1 Positional Arguments","text":"<p>\u8c03\u7528\u4f4d\u7f6e\u5b9e\u53c2\u7684\u4f8b\u5b50\u5982\u4e0b\uff0c\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u5b9e\u53c2'dog'\u5bf9\u5e94\u5f62\u53c2animal_type\uff0c\u7b2c\u4e8c\u4e2a\u5b9e\u53c2\u2018Lion\u2019\u5bf9\u5e94\u5f62\u53c2pet_name\u3002</p> Python<pre><code>#\u4f4d\u7f6e\u5b9e\u53c2\u4f20\u9012\u6570\u503c\u7ed9\u5f62\u53c2\u7684\u4f8b\u5b50\ndef describe_pet(animal_type, pet_name):\n    '''\u663e\u793a\u5ba0\u7269\u7684\u4fe1\u606f'''\n    print(\"I have a \"+ animal_type +\".\")\n    print(\"My \"+ animal_type +\"'s name is \"+ pet_name.title()+\".\")\n\ndescribe_pet('dog', 'Lion')    #\u4f4d\u7f6e\u5b9e\u53c2\ndescribe_pet('Cat', 'Silly')   #\u4f4d\u7f6e\u5b9e\u53c2\n\n#\u5173\u952e\u5b57\u5b9e\u53c2\u548c\u4f4d\u7f6e\u65e0\u5173\ndescribe_pet(animal_type = 'dog', pet_name = 'Lion')   #\u5173\u952e\u5b57\u5b9e\u53c2\ndescribe_pet(pet_name = 'Lion', animal_type = 'dog')   #\u5173\u952e\u5b57\u5b9e\u53c2\n</code></pre> <p>\u4f4d\u7f6e\u5b9e\u53c2\u7684\u7f3a\u70b9\u662f\uff0c\u5982\u679c\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u628a 'dog' \u548c 'Lion' \u4e92\u6362\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u8fd4\u56de\u503c\u4f1a\u5f88weird\u3002\u800c\u5173\u952e\u5b57\u5b9e\u53c2\u8c03\u7528\uff0c\u5c31\u4e0d\u5b58\u5728\u987a\u5e8f\u7684\u95ee\u9898\u3002</p> Text Only<pre><code># \u5728/\u4e4b\u524d\uff0c\u5fc5\u987b\u901a\u8fc7\u4f4d\u7f6e\u53c2\u6570\u4f20\u53c2\uff0c\u4e0d\u80fd\u901a\u8fc7 kwargs \u4f20\u53c2\ndef say_hi(name, /):\n    print(\"hello,\", name)\n\nsay_hi('Sally')\nsay_hi(name = 'Jack') \n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#22-keyword-arguments","title":"2.2 Keyword Arguments","text":"Text Only<pre><code>def say_hi(name):\n    print(\"hello,\", name)\nsay_hi(name = 'Jack')\nsay_hi('Sally') #\u7b2c\u4e00\u4e2a\u53c2\u6570\u7528 positonal \u6216\u8005 keyword \u4f20\u53c2\u90fd\u884c\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#23-positional-or-keyword-arguments","title":"2.3 \u4e8c\u8005\u6df7\u5408\uff1apositional or keyword arguments","text":"Text Only<pre><code>def say_hi(name, /, weekday, *, weather):\n    print(\"Hello,\" + name + \", \")\n    print(\"Today is \" + weekday + \", \")\n    print(\"and the weather is \"+ weather + \".\")\n\n#say_hi('Jack','Sunday', weather = 'Sunny') # it works\n#say_hi(name = 'Jack', weekday='Sunday', weather = 'Sunny') # \u62a5\u9519name \u53ea\u80fd\u901a\u8fc7 positional argumets \u4f20\u53c2\n#say_hi('Jack', weekday='Sunday', weather = 'Sunny')   # it works\uff0c\u8bf4\u660e\u4e2d\u95f4\u7684\u901a\u8fc7\u4f4d\u7f6e\u4f20\u53c2\u6216\u8005\u5173\u952e\u8bcd\u4f20\u53c2\u5747\u53ef\nsay_hi('Jack', 'Sunday', 'Sunny') # \u62a5\u9519\uff0c\u56e0\u4e3a weather \u53ea\u80fd\u901a\u8fc7\u5173\u952e\u8bcd\u4f20\u53c2  \n</code></pre> Text Only<pre><code>def say_hi(*names):\n    for name in names:\n        print(f'Hi, {name}')\nsay_hi('jack', 'lily')\nsay_hi('jack', 'lily', 'bob')\n</code></pre> <p>\u5728\u51fd\u6570\u5185\u90e8\uff0c\u662f\u628a names \u4f5c\u4e3a\u5bb9\u5668\u5904\u7406\u7684\uff0c\u4e0d\u8bba\u662f<code>list</code>\u3001 <code>string</code>\u3001<code>range</code>\u3001<code>tuple</code>\u8fd8\u662f<code>dictionary</code> </p> <p>2.3 </p> <p>\u603b\u7ed3\uff1a\u4ee5\u4e0b\u7edf\u79f0\u4e3a\u5bb9\u5668</p> Text Only<pre><code>L = ['ann', 'bob', 'joe', 'john', 'mike'] #list\ns = 'Python' # String\nr = range(10) #range\nt = ('ann', 'bob', 'joe', 'john', 'mike') #\u5143\u7ec4 tuple\nphonebook1 = {'ann':6575, 'bob':8982, 'joe':2598, 'zoe':1225, 'ann':6585} # dictionary\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#_8","title":"\u4e03\u3001\u7c7b","text":"<p>\u5217\u8868 \u662f\u6570\u636e\u5c42\u9762\u7684\u5c01\u88c5\uff1b</p> <p>\u51fd\u6570\u662f\u8bed\u53e5\u5c42\u9762\u7684\u5c01\u88c5\uff1b</p> <p>\u800c\u5bf9\u8c61\u662f\u6570\u636e\u548c\u4ee3\u7801\u90fd\u5c01\u88c5\u5728\u4e86\u4e00\u8d77\u3002</p> <p>Python\u4e2d\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u7279\u5f81\u548c\u884c\u4e3a\u4e24\u90e8\u5206\uff0c\u524d\u8005\u79f0\u4e3a\u201d\u5c5e\u6027\u201c\uff0c\u540e\u8005\u79f0\u4e3a\u201d\u65b9\u6cd5\u201c</p> <p>1\u3001\u7c7b\u7684\u547d\u540d</p> <p>\u2460\u9996\u5b57\u6bcd\u8981\u5927\u5199\uff0c\u4e0d\u7528\u4e0b\u5212\u7ebf\uff0c\u8b6c\u5982ElectricCar\u800c\u4e0d\u662fElctric_Car\uff1b\u6a21\u5757(electric_car.py)\u548c\u5b9e\u4f8b\uff08instance\uff0c\u6839\u636e\u7c7b\u521b\u5efa\u7684\u4e00\u4e2a\u5177\u8c61\u7684\u4e8b\u7269\uff09\u90fd\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u3002</p> <p>\u2461\u6bcf\u4e2a\u7c7b\u7b2c\u4e8c\u884c\u90fd\u8981\u6709\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u65b9\u4fbf\u4f7f\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u7c7b\u662f\u5e72\u4ec0\u4e48\u7684</p> <p>\u2462import\u6a21\u5757\u4e2d\u7684\u591a\u4e2a\u7c7b\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u4e00\u4e0b\u5b50\u5bfc\u5165\u6240\u6709\u7c7b\uff0c\u4f60\u53ef\u4ee5\u5148\u5bfc\u5165\u6574\u4e2a\u6a21\u5757\uff0c\u4e4b\u540e\u518d\u7528module_name.Class.\u884c\u4e3a()\u6765\u8c03\u7528\u67d0\u4e2a\u5177\u4f53\u7c7b</p> <p>2\u3001\u7f16\u5199\u7c7b</p> <p>\u5728\u6bcf\u4e2a\u7c7b\u7f16\u5199\u7684\u65f6\u5019\u8981\u6709\u65b9\u6cd5__init__(\uff09\uff0c\u5176\u4e2d\u5fc5\u987b\u8981\u6709\u5f62\u8c61\u53c2\u6570self\uff0c\u653e\u5728\u5176\u4ed6\u5f62\u53c2\u524d\u9762</p> <p>\u7c7b\u91cc\u9762\u5305\u542b\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u4ee5car\u6c7d\u8f66\u4e3a\u4f8b</p> <p>\u5c5e\u6027\uff1a\u6c7d\u8f66\u7684\u540d\u5b57\u3001\u578b\u53f7\u3001\u5bff\u547d</p> <p>\u65b9\u6cd5\uff1a\u63cf\u8ff0\u6c7d\u8f66\u7684\u578b\u53f7\uff08\u4e00\u4e2a\u52a8\u4f5c\uff09</p> Python<pre><code>class Dog():      #\u7c7b\u9996\u5b57\u6bcd\u5927\u5199\n    \"\"\"\u4e00\u6b21\u6a21\u62df\u5c0f\u72d7\u7684\u7b80\u5355\u5c1d\u8bd5\"\"\"\n    def __init__(self, name, age):   #\u8fd9\u4e00\u6bb5\u51fd\u6570\u540d\u662f\u56fa\u5b9a\u7684\uff0c\u7b2c\u4e00\u4e2a\u5f62\u53c2\u4e00\u5b9a\u662fself\uff0c\u540e\u9762\u518d\u8ddf\u5176\u4ed6\u5f62\u53c2\n        \"\"\"\u521d\u59cb\u5316\u5c5e\u6027name\u548cage\"\"\"\n        self.name = name           #\u5c06\u5b9e\u53c2\u4e0e\u5f62\u53c2\u5173\u8054\uff0c\u8fd9\u91ccname \u548cage\u662f\u7c7b\u7684\u5c5e\u6027\n        self.age = age\n    def sit(self):   #\u51fd\u6570\u540d\u7528\u5c0f\u5199\u548c\u4e0b\u5212\u7ebf\uff0c\u7c7b\u91cc\u9762\u7684\u51fd\u6570\u90fd\u8981\u5305\u542bself\uff0c\u8fd9\u91ccsit()\u548croll_over\u662f\u7c7b\u7684\u65b9\u6cd5\n        \"\"\"\u6a21\u62df\u5c0f\u72d7\u88ab\u547d\u4ee4\u65f6\u8e72\u4e0b\"\"\"\n        print(self.name.title()+\" is now sitting.\")\n    def roll_over(self):\n        print(self.name.title()+\" rolled over!\")\n\nmy_dog = Dog('Lion', 3)   #\u5c0f\u5199\u7684my_dog\u5c31\u662f\u7c7b\u521b\u9020\u7684\u5b9e\u4f8b\nprint(\"My dog's name is \"+my_dog.name.title()+\".\")\nprint(\"my dog is \"+ str(my_dog.age)+\" years old.\")\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#_9","title":"\u516b\u3001\u6587\u4ef6\u548c\u5f02\u5e38","text":""},{"location":"CS/Python/Python-Notes-202410/#1_3","title":"1\u3001\u8bfb\u53d6\u6587\u4ef6","text":""},{"location":"CS/Python/Python-Notes-202410/#1_4","title":"\uff081\uff09\u5404\u79cd\u6253\u5370\u6587\u672c\u5185\u5bb9\u7684\u65b9\u6cd5","text":"<p>\u2460\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1aread()</p> <p>read()\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8bfb\u53d6\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u53c2\u6570\uff0c\u4f1a\u5168\u90e8\u8bfb\u53d6\u51fa\u6765\uff0c\u6587\u4ef6\u6307\u9488\u6307\u5411\u6587\u4ef6\u672b\u5c3e\u3002</p> <p>\u5982\u679c\u5e26\u6709\u53c2\u6570:read(5)\uff0c\u5219\u53ea\u4f1a\u8bfb\u53d6\u524d5\u4e2a\u5b57\u8282\u7684\u6570\u636e</p> <p>\u2461readline</p> <p>readline()\u4e00\u6b21\u8bfb\u53d6\u4e00\u884c\uff0c\u4ece\u6587\u4ef6\u6307\u9488\u7684\u4f4d\u7f6e\u5411\u540e\u8bfb\u53d6\uff0c\u76f4\u5230\u9047\u5230\\n\u6362\u884c\u7b26\u7ed3\u675f</p> Python<pre><code>&gt;&gt;&gt;filename = 'Chapter_12_File_and_error/learning_python.txt'\n&gt;&gt;&gt;f = open(filename)\n\n&gt;&gt;&gt;f.read()\n'In Python you can scrape websites\\nIn Python you can analyze millions of digits efficiently \\nIn Python you can do machine learning, data visualization, and analysis\\n'\n&gt;&gt;&gt;f.read(5)\n'In Py'\n&gt;&gt;&gt;f.readline()\n'In Python you can scrape websites\\n'\n</code></pre> <p>\u6ce8\u610f\u5728windows\u7cfb\u7edf\u4e2d\uff0c\u6587\u4ef6\u7684\u8def\u5f84\u8981\u7528\u6b63\u659c\u6760\uff0c\u4e0d\u7136\u7cfb\u7edf\u4f1a\u8bef\u8ba4\u4e3a\u662f\u8f6c\u4e49\u8bcd\u3002</p> <p>\u5176\u5b9e\u6709\u4e24\u79cd\u6253\u5f00\u6587\u4ef6\u3001\u5173\u95ed\u6587\u4ef6\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u662ffile.open('c:/xx/xx')\u914d\u5408file.close()\uff0c\u4e00\u79cd\u662fwith open() as file_object:</p> <p>\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5982\u679c\u7a0b\u5e8f\u5b58\u5728bug\uff0c\u5bfc\u81f4close()\u8bed\u53e5\u672a\u6267\u884c\uff0c\u6587\u4ef6\u5c06\u4e0d\u4f1a\u5173\u95ed\uff0c\u8fd9\u770b\u4f3c\u5fae\u4e0d\u8db3\u9053\uff0c\u4f46\u672a\u59a5\u5584\u5730\u5173\u95ed\u6587\u4ef6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u6216\u53d7\u635f\u3002</p> <p>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u4f55\u65f6\u5173\u95ed\u6587\u4ef6\u5c06\u6709Python\u81ea\u5df1\u5224\u65ad\uff0c\u7a0b\u5e8f\u8fd0\u884c\u66f4\u5065\u58ee\u3002</p> <p>\u2462\u6587\u4ef6\u672c\u8eab\u652f\u6301\u8fed\u4ee3\uff0c\u9010\u884c\u904d\u5386\u6574\u4e2a\u6587\u4ef6</p> <p>\u7528for \u5faa\u73af\uff0c\u56e0\u4e3afile_object\u5c31\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u5b57\u7b26\u4e32</p> Python<pre><code>#\u4f7f\u7528for\u5faa\u73af\u9010\u884c\u8bfb\u53d6\nfilename = 'chapter_12_File_and_error/pi_digits.txt'\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip())\n</code></pre> <p>\u2463 \u5728with\u4ee3\u7801\u5757\u5916\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9</p> <p>\u5c06\u6587\u4ef6\u5185\u5bb9\u5b58\u53d6\u5728\u53d8\u91cflines\u4e2d\uff0c\u5728\u4ee3\u7801\u5757\u5916\u8bbf\u95ee</p> Python<pre><code>#\u5728with\u4ee3\u7801\u5757\u5916\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\nfilename = 'chapter_12_File_and_error/pi_digits.txt'\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n        print(line.rstrip())\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#2_3","title":"\uff082\uff09\u8d85\u5927\u6587\u672c\u5904\u7406","text":"<p>\u5904\u7406\u6587\u672c\u91cf\u8d85\u5927\u7684\u6587\u672c\u6587\u4ef6\uff0cPython\u7167\u6837\u80fd\u8f7b\u677e\u5e94\u5bf9\uff0c\u8fd9\u65f6\u5019\u6253\u5370\u7684\u65f6\u5019\u8981\u6307\u5b9a\u6253\u5370\u957f\u5ea6\u3002</p> <p>pi_string[:52]\uff0c\u6253\u5370\u524d52\u4e2a\u6570\u5b57\uff0c\u4e5f\u5c31\u662f\u5c0f\u6570\u70b9\u540e50\u4f4d</p> Python<pre><code>\"\"\"\u6253\u5370\u767e\u4e07\u4f4d\u6570\u7684\u5706\u5468\u7387\"\"\"\nfilename = 'Chapter_12_File_and_error/pi_million_digits.txt'\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\n# \u8fd9\u91cc\u662f\u5728with open \u4e4b\u5916\u628a\u6574\u4e2a\u6587\u4ef6\u9010\u884c\u8bfb\u53d6\uff0c\u5b58\u50a8\u5728 pi_string \u8fd9\u4e2a string \u53d8\u91cf\u4e0a\u3002   \npi_string = ''\nfor line in lines:\n    pi_string += line.rstrip()\n\nprint(pi_string[:52]+\"\u2026\")   \nprint(len(pi_string))\n</code></pre> <p>\uff083\uff09\u67e5\u627e\u6587\u672c\u4e2d\u7684\u5173\u952e\u5b57\uff08\u7528\u5230\u903b\u8f91\u8fd0\u7b97\u7b26in\uff09</p> Python<pre><code># \u8fd9\u91cc\u7684\u529f\u80fd\u548c\u4e0a\u6587\u76f8\u540c\nfilename = 'Chapter_12_File_and_error/pi_million_digits.txt'\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.rstrip()\n\n# \u67e5\u770b\u4f60\u7684\u751f\u65e5\u662f\u5426\u5728\u5706\u5468\u7387\u4e2d\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u8fde\u7eed\u76846\u4e2a\u6570\u5b57\nbirthday = input(\"Enter your birthday, in the form mmddyy: \")\nif birthday in pi_string:\n    print(\"your birthday appears in the first million digits of pi!\")\nelse:\n    print(\"your birthday does not appear in the first million digits of pi.\")\n</code></pre> <p>\u7ec3\u4e60\uff1a</p> Python<pre><code>filename = 'Chapter_12_File_and_error/learning_python.txt'\nwith open(filename) as file_obj:\n    contents = file_obj.readlines()\n #   print(contents)\n    for content in contents:\n        print(content)\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#2_4","title":"2\u3001\u5199\u5165\u6587\u4ef6","text":"<p>open(filename,'w')\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6709\u51e0\u79cd\u5f62\u5f0f\uff1a</p> <p>'r': \u53ea\u8bfb\u6a21\u5f0f</p> <p>\u2018w':\u5199\u5165\u6a21\u5f0f</p> <p>'r+': \u8bfb\u5199\u6a21\u5f0f</p> <p>'a'\uff1a\u9644\u52a0\u6a21\u5f0f\uff0c\u5373\u6587\u672c\u539f\u6709\u7684\u5185\u5bb9\u4e0d\u4f1a\u88ab\u8986\u76d6</p> Python<pre><code>\"\"\"\n\u5f53\u524dprogramming.txt\u4e2d\u6587\u672c\u5185\u5bb9\uff1a\nI love programming.\nJack love music.\n\"\"\"\nfilename = 'Chapter_12_File_and_error/programming.txt'\nwith open(filename, 'w') as file_obj:  # w\u8868\u793a override\u6a21\u5f0f\n    file_obj.write(\"I also love finding meaning in large datasets.\\n\")\n    file_obj.write(\"I love creating apps that can run in a browser.\\n.\")\n\"\"\"\n\u4ee5'w'\u6a21\u5f0f\u5199\u5165\u6587\u4ef6\u540e\uff0c\u53d1\u73b0\u539f\u6765\u7684\u6587\u672c\u5185\u5bb9\u88ab\u6e05\u7a7a\uff0c\u5f53\u524d\u6587\u672c\u5185\u5bb9\u4e3a\nI also love finding meaning in large datasets.\nI love creating apps that can run in a browser.\n\"\"\"\n</code></pre> <p>\u800c\u5f53\u5c06'w'\u53d8\u4e3a'a'\u6a21\u5f0f\u4e4b\u540e\uff0c\u539f\u6709\u5185\u5bb9\u53d1\u73b0\u4e0d\u4f1a\u88ab\u6e05\u7a7a</p> <p>20240820 \u6dfb\u52a0\uff1a \u8fd9\u91cc\u7684\u4e00\u4e2a\u6848\u4f8b\u503c\u5f97\u53c2\u8003\uff0c\u5373\u53ef\u4ee5\u7528 for\u5faa\u73af\uff0c\u5199\u5165\u6587\u4ef6\uff0c\u800c\u4e14\u5199\u5165\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u5199\u5165\u4e00\u884c\uff0c\u5199\u5165\u7684\u53c2\u6570\u662f list, \u53ef\u4ee5\u7528\u53d8\u91cf[name , prounciation] \u6784\u5efa list\u3002</p> Python<pre><code># \u8bfb\u53d6 CSV \u6587\u4ef6\u7684\u5355\u8bcd\nwords = []\nwith open(\"words.csv\", 'r', newline='') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        words.append(row[0])\n\n# \u5199\u5165 word_proun.csv \u6587\u4ef6\nwith open('word_proun.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow([\"word\", \"pronunciation\"])  # \u5199\u5165\u5934\u90e8\n\n    for word in words:\n        pronunciation = proun_search(word)\n        if pronunciation:\n            writer.writerow([word, pronunciation])\n        else:\n            writer.writerow([word, \"none\"])\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#3_1","title":"3\u3001\u5f02\u5e38","text":"<p>\u5e38\u89c1\u5230\u7684\u5f02\u5e38\u603b\u7ed3\uff1a</p> <p>\uff081\uff09AssertionError\uff1a\u65ad\u8a00\u8bed\u53e5\u5931\u8d25</p> <p>\u5f53\u903b\u8f91\u5224\u65ad\u8bed\u53e5\u4e3aFalse\u65f6\u5f15\u53d1\u7684\u5f02\u5e38</p> Python<pre><code>&gt;&gt;&gt; assert 1+1 &gt; 3  \nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nAssertionError\n</code></pre> <p>\uff082\uff09AttributeError\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u672a\u77e5\u7684\u5bf9\u8c61\u5c5e\u6027</p> Python<pre><code>&gt;&gt;&gt; my_list = [\"\u5c0f\u7532\u9c7c\"]\n&gt;&gt;&gt; my_list.fishc()\n... \nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 2, in &lt;module&gt;\nAttributeError: 'list' object has no attribute 'fishc'\n</code></pre> <p>\uff083\uff09IndexError\uff1a\u7d22\u5f15\u8d85\u51fa\u5e8f\u5217\u7684\u8303\u56f4</p> <p>\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u662f\uff0c\u5982\u679c\u5728for\u5faa\u73af\u4e2d\u51fa\u73b0\u4e86 index of range\uff0c\u6700\u597d\u5728return \u4e4b\u524d\uff0c\u5148\u5224\u65ad\u6709\u6ca1\u6709\u8fd9\u4e2a\u503c\u3002</p> Python<pre><code>&gt;&gt;&gt; my_list = [1, 2, 3]\n&gt;&gt;&gt; my_list[3]\n... \nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 2, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <p>\uff084\uff09KeyError\uff1a\u5b57\u5178\u4e2d\u67e5\u627e\u51fa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u201c\u952e\u201d</p> Python<pre><code>&gt;&gt;&gt; my_dict = {\"One\":1, \"Two\":2, \"Three\":3}\n... \n&gt;&gt;&gt; my_dict['One']   #\u6ce8\u610f\u5b57\u5178\u7684\u952e \u8981\u7528\u4e2d\u62ec\u53f7\u62ec\u8d77\u6765\n... \n1\n&gt;&gt;&gt; my_dict['Four'] \nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'Four'\n</code></pre> <p>\uff085\uff09NameError\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u53d8\u91cf</p> <p>\uff086\uff09OSError\uff1a\u64cd\u4f5c\u7cfb\u7edf\u4ea7\u751f\u7684\u5f02\u5e38</p> <p>FileNotFoundError\u662fOSError\u7684\u5b50\u96c6</p> <p>\uff087\uff09SyntaxError\uff1aPython\u7684\u8bed\u6cd5\u9519\u8bef</p> Python<pre><code>&gt;&gt;&gt; print \"I love Fishc.com\"\n  File \"&lt;input&gt;\", line 1\n    print \"I love Fishc.com\"\n          ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"I love Fishc.com\")?\n</code></pre> <p>\uff088\uff09TypeError\uff1a\u4e0d\u540c\u7c7b\u578b\u95f4\u7684\u65e0\u6548\u64cd\u4f5c</p> <p>\u7c7b\u578b\u4e0d\u540c\u7684\u5bf9\u8c61\u662f\u4e0d\u80fd\u76f8\u4e92\u8ba1\u7b97\u7684\uff0c\u5426\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\uff1a</p> Python<pre><code>&gt;&gt;&gt; 1 + \"1\"\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n&gt;&gt;&gt; 1 + int(\"1\")\n2\n</code></pre> <p>\uff089\uff09ZeroDivisionError\uff1a\u9664\u6570\u4e3a\u96f6</p> Python<pre><code>&gt;&gt;&gt; 2 / 0\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: integer division or modulo by zero\n</code></pre> <p>4\u3001\u5904\u7406\u5f02\u5e38\u7684\u65b9\u6cd5</p> <p>(1) Try Except\u8bed\u53e5</p> <p>\u8bed\u6cd5\u7ed3\u6784\uff1a</p> <p>try:</p> <p>\u200b   \u68c0\u6d4b\u8303\u56f4</p> <p>except Exception[ as reason]:</p> <p>\u200b   \u51fa\u73b0\u5f02\u5e38(Exception) \u540e\u7684\u5904\u7406\u4ee3\u7801</p> Python<pre><code># P9\u2014\u20144.py\n\"\"\"\u9488\u5bf9\u4e0d\u540c\u5f02\u5e38\u8bbe\u7f6e\u591a\u4e2aexcept\"\"\"\ntry:\n    sum = 1 + '1'\n    f = open('\u6211\u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u6863.txt')\n    print(f.read())\n    f.close()\nexcept OSError as reason:\n    print('\u6587\u4ef6\u51fa\u9519\u5566,\\n\u9519\u8bef\u539f\u56e0\u662f\uff1a'+ str(reason))\nexcept TypeError as reason:\n    print('\u7c7b\u578b\u51fa\u9519\u5566,\\n\u9519\u8bef\u539f\u56e0\u662f\uff1a'+ str(reason))\n\n\"\"\"\u4e5f\u53ef\u4ee5\u5bf9\u591a\u4e2a\u5f02\u5e38\u7edf\u4e00\u5904\u7406\"\"\"\ntry:\n    sum = 1 + '1'\n    f = open('\u6211\u662f\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u6863.txt')\n    print(f.read())\n    f.close()\nexcept (OSError, TypeError)as reason:\n    print('\u51fa\u9519\u5566,\\n\u9519\u8bef\u539f\u56e0\u662f\uff1a'+ str(reason))\n</code></pre> <p>try\u8bed\u53e5\u548celse\u8bed\u53e5\u642d\u914d\uff0c\u5b9e\u73b0\u65b9\u6cd5\u548c\u5faa\u73af\u8bed\u53e5\u642d\u914d\u5dee\u4e0d\u591a\uff1a</p> <p>\u53ea\u8981try\u8bed\u53e5\u5757\u91cc\u6ca1\u6709\u51fa\u73b0\u4efb\u4f55\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u4f1a\u6267\u884celse\u8bed\u53e5\u5757\u91cc\u7684\u5185\u5bb9\u3002</p> Python<pre><code>try:\n    int('abc')\nexcept ValueError as reason:\n    print('\u51fa\u9519\u5566\uff1a'+ str(reason))\nelse:\n    print('\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\uff01')\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#regular-expressions","title":"\u4e5d\u3001Regular Expressions \u6b63\u5219\u8868\u8fbe\u5f0f","text":""},{"location":"CS/Python/Python-Notes-202410/#re","title":"\u4e00\u3001RE \u7684\u7528\u9014","text":"<p>1\u3001\u7f51\u9875\u5f00\u53d1 \u7528\u6237\u540d\u3001\u5bc6\u7801\u7684\u89c4\u8303</p> <p>A simple example is Password and Email-ID validation of any login page of any Banking Website.</p> <p>RegEx is also used in web scraping, data wrangling, used for text matching</p> <p>2\u3001\u6587\u672c\u7ffb\u8bd1\u65f6\u683c\u5f0f\u6e05\u6670 \u5728 kindle \u82f1\u6587\u4e66\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u540e\uff0c\u6709\u4e9b html tag \u591a\u4f59\uff0c\u6709\u7684\u662f\u7ffb\u8bd1\u540e\u7684\u4e2d\u6587\u4e2d\u5939\u6742\u7740\u82f1\u6587\u7b26\u53f7\u3002\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\uff0c\u5de5\u4f5c\u91cf\u592a\u5927\u3002</p> <p>3\u3001\u4ece\u5927\u91cf\u6587\u5b57\u3001\u6587\u6863\u4e2d\u7b5b\u9009\u51fa\u6587\u672c</p> <p>\u8b6c\u5982\u63d0\u53d6\u76ee\u5f55\uff0c\u63d0\u53d6\u6307\u5b9a\u683c\u5f0f\u7684\u90ae\u4ef6\uff08\u5982\u63d0\u53d6\u51fa\u6240\u6709 gmail \u90ae\u7bb1\uff09</p>"},{"location":"CS/Python/Python-Notes-202410/#re_1","title":"\u4e8c\u3001RE \u76f8\u5173\u8bed\u6cd5","text":""},{"location":"CS/Python/Python-Notes-202410/#metacharacters","title":"\uff08\u4e00\uff09\u5143\u5b57\u7b26 metacharacters","text":"<p>. ^ $ * + ? { } [ ] \\ | ( )</p> <p>1\u3001$</p> <p>Matches at the end of a line,which is defined as either the end of the string,or any location followed by a newline character.</p> <p>\u8b6c\u5982 '}$'\u4f1a\u5bfb\u627e\u4ee5}\u7ed3\u5c3e\u7684\u7279\u5f81\uff0c\u800c\u5982\u4e0b\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u53ef\u4ee5\uff1a'{block}' \u3001'{block}\\n'</p> <p>2\u3001\uff5c </p> <p>the '| ' operator is never greedy.</p>"},{"location":"CS/Python/Python-Notes-202410/#modulesmethods","title":"\uff08\u4e8c\uff09modules/methods","text":"<ul> <li>\u7b2c\u4e00\u4e2a\u51fd\u6570\uff1are.<code>findall()</code>\uff0c\u67e5\u627e\u5e76\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u5b57\u7b26</li> </ul> Python<pre><code>import re\npattern = re.compile(r\"\")# \u867d\u7136\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e00\u6b65\uff0c\u4e0d\u8fc7\u5982\u679c\u4e4b\u540e\u9700\u8981\u7f16\u8bd1\u591a\u6b21\uff0c\u8fd9\u4e2a\u8fd8\u662f\u6709\u7528\u7684\nmy_string = input(\"Enter a string:\")\npattern = re.compile(r\"[0-9]+\")\nre.findall(pattern, my_string) # \u901a\u5e38\u5148\u8f93\u5165\u8981\u5904\u7406\u7684 string\uff0c\u518d\u5b9a\u4e49 pattern\uff0c\u540e\u9762\u8ddf\u4e0a findall \u7684 method\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u7528\u6cd5\uff1apattern.findall()</p> Text Only<pre><code>p = re.compile(r'\\d+')\np.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')\n</code></pre> <ul> <li>\u7b2c\u4e8c\u4e2a\uff1afinditer()</li> </ul> <p>Find all substrings where the RE matches, and returns them as an iterator.</p> <ul> <li>\u7b2c\u4e09\u4e2a\uff1apattern.<code>substitute()</code></li> </ul> Text Only<pre><code>import re\npattern = re.compile(r\"\")# \u867d\u7136\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e00\u6b65\uff0c\u4e0d\u8fc7\u5982\u679c\u4e4b\u540e\u9700\u8981\u7f16\u8bd1\u591a\u6b21\uff0c\u8fd9\u4e2a\u8fd8\u662f\u6709\u7528\u7684\nmy_string = input(\"Enter a string:\")\npattern = re.compile(r\"[0-9]+\")\nresult = pattern.sub(\"_\", my_string) #\u8fd9\u4e2a\u8ddf\u4e0a\u7684\u662f\u66ff\u6362 method\uff0c\u539f\u7406\u662f\u628a\u4e0a\u9762findall \u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u90fd\u66ff\u6362\u4e3a\u201c_\u201c\uff0c\u4e0a\u9762\u8fd4\u56de\u4e86\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\uff0c\u76f8\u5e94\u7684\u5c31\u6709\u591a\u5c11\u4e2a\u4e0b\u5212\u7ebf_\nprint(result)\n</code></pre> <ul> <li>\u7b2c\u56db\u4e2a\uff1apattern.search()\uff0c\u5728 string \u4e2d\u5bfb\u627e\u6307\u5b9a\u7684\u8bcd\u8bed\uff0c\u5e76\u8fd4\u56de\u4f4d\u7f6e</li> </ul> Python<pre><code>import re\nmy_str\n</code></pre> <ul> <li>\u7b2c\u4e94\u4e2a\uff1apattern.match()\uff0c</li> </ul> <p>match() \u4e0e search()\u7684\u4e0d\u540c\uff1a</p> <p>Since the match() method only checks if the RE matches at the start of a string, start ()will always be zero.However,the search()method of patterns scans through the string, so the match may not start at zero in that case.</p> <p>Match()\u4e4b\u540e\u4f1a\u6709\u5b50 method</p> <p>group(), Return the string matched by the RE</p> <p>start() , Return the starting position of the match</p> <p>end(), Return the ending position of the match</p> <p>span(),Return a tuple containing the (start, end) positions of the match</p> Text Only<pre><code>import re\np = re.compile('[a-z]+')\nm = p.match('tempo')\nm.group() #\u6ce8\u610f\u662f m.group\uff0c\u4e0d\u662f p.group\nm.start(),m.end()\nm.span()\n</code></pre>"},{"location":"CS/Python/Python-Notes-202410/#special-sequences","title":"(\u4e09\uff09Special Sequences","text":"Element Description . Matches any single character except newline character. \\d this matches any digit[0-9] \\D This matches non-digit character[^0-9] \\s This matches whitespace character [\\t\\n\\r\\f\\v] \\S This matches non-white-space character [^ \\t\\n\\r\\f\\v] \\w This matches alphanumeric character[a-zA-Z0-9_] \\W This matches any non-alphanumeric character[^a-zA-Z0-9] \\A Returns a match if the specified characters are at the beginning of  the string \\b Returns a match where the specified characters are at the beginning or the end of a word\uff0c\u5728word \u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u60c5\u51b5\u4e0b\uff0c\u90fd\u662f\u771f \\B Returns a match where the specified characters are present, but NOT at the beginning (or the end) of a word \\Z Returns a match if the specified characters are at the end of the string <p>\u6ce8\uff1a</p> <p>d\u662f digit \u7684\u7f29\u5199</p> <p>s \u662f space\u7684\u7f29\u5199</p> <p>w \u662f word \u7684\u7f29\u5199</p> <p>b \u662f boundary \u7684\u7f29\u5199</p> <p>a \u610f\u5473\u7740\u5728string \u7684\u5f00\u5934\uff0cz \u610f\u5473\u7740\u5728 string \u7684\u672b\u5c3e</p> <p>1\u3001\\w</p> <p>2\u3001\\W</p> Text Only<pre><code>import re\npattern = re.compile(r'\\W') # \u8fd9\u4e2a\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u6240\u6709\u7684 pwd \u90fd\u662f\u975e a-zA-Z0-9 \u624d\u7b26\u5408\u6761\u4ef6\uff0c\u4e00\u65e6\u7b2c\u4e00\u4e2a\u7279\u6b8a\u7b26\u53f7\u524d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u7279\u6b8a\u5b57\u7b26\uff0c\u5c31\u4e0dmatch\nresult1 = pattern.match(\"j!ack\") # result1 \u8fd4\u56de none\nresult2 = pattern.match(\"!@#\")# result2 \u8fd4\u56de\u7ed3\u679c\nprint(result1)\nprint(result2)\n</code></pre> <p>3\u3001\\A</p> <p>\\A \u4e0e ^ \u7684\u533a\u522b\uff1a</p> <p>When not in MULTILINE mode\uff08\u591a\u884c\uff09,\\A and are effectively the same.In MULTILINE mode,they're different:\\A still matches only at the beginning of the string, but ^ may match at any location inside the string that follows a newline character.</p> <p>3\u3001\\b</p> <p>Word boundary</p> <p>A word is defined as a sequence of alphanumeric characters, so the end of a word is indicated by whitespace or a non-alphanumeric character.</p> <p>'\\bclass\\b' \u7528\u4e8e\u5982\u4e0b\u5b57\u7b26\u4e32'no class at all'\uff0c\u80fd\u591fmatch\uff0c\u4f46\u662f\u7528\u4e8e\u5982\u4e0b\u5b57\u7b26\u4e32'the declassified'\uff0c\u4f1a\u8fd4\u56de None.</p>"},{"location":"CS/Python/Python-Notes-202410/#repeated-numbersquantifiers","title":"\uff08\u56db\uff09repeated numbers/Quantifiers","text":"Quantifier Description pattern Example Sample match + One or more \\w+ ABCDEF097\uff0c\u8fd9\u4e2a\u4e3a\u4f8b\uff0c\u4f1a\u8fd4\u56de\u6574\u4e2a\u7ec4\u5408 {2} Exactly 2 times \\d{2} 01 {1,} one or more times \\w{1,} \u548c+\u529f\u80fd\u4e00\u6837\uff0c\u53ea\u663e\u793a\u51fa\u201d124\u201d\u5b57\u7b26\u4e32 {2,4} 2,3 or 4 times \\w{2,4} 1234\uff0c\u6307\u7684\u662f\u51fa\u73b0\u4e86 2-4 \u6b21\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a string\uff1b\u4f8b\u5b501\uff1a\u201cjack124chy12an12345\"\uff0c\u8fd4\u56de\u7684\u662f <code>124</code>\u3001<code>12</code>\u3001<code>1234</code>\u4e09\u4e2a\u5b57\u7b26\u4f8b\u5b50 2:\u201d12345678\u201c\uff0c\u4f1a\u6309\u7167\u6700\u5927\u7684\u4e5f\u5c31\u662f \u6bcf 4 \u4e2a\u505a\u5206\u7c7b\uff0c\u5373\u8fd4\u56de<code>1234</code>\u3001<code>5678</code> * 0 or more times A*B\uff0c\u8868\u793a0 \u4e2a A \u6216\u8005 1 \u4e2a\u4ee5\u4e0a\u7684 A\uff0c\u7136\u540e\u63a5 1 \u4e2aB AAAAB\uff0cAB\uff0cB ? once or none \\d+?\uff0c\u8d77\u5230\u7684\u4f5c\u7528\u76f8\u5f53\u4e8e{1}"},{"location":"CS/Python/Python-Notes-202410/#sets","title":"(\u4e94\uff09Sets","text":"Sets Description [arn] Returns a match where one of the specified characters(a, r or n) are present [a-n] Returns a match for any lower case character, alphabetically between a and n [^arn] Returns a match for any character EXCEPT a, r, and n [0123] Returns a match where any of the specified digits(0,1,2 or 3)are present [0-9] Returns a match for any digit between 0 and 9 [0-5][0-9] Returns a match for any two-digit numbers from 00 and 59 [a-zA-Z] Returns a match for any character alphabetically between a and z, lower case OR upper case [+] In sets, +, *, ., |,(), $, {} has no special meaning, so [+] means: return a match for any + character in the string <p>\u8b6c\u5982\u56fd\u5185\u7684\u7535\u8bdd\u53f7\u7801\u683c\u5f0f\u5e94\u8be5\u662f<code>1[0-9]{10}</code></p> <p>1\u3001[ ]\u4e5f\u5c31\u662f\u8bf4\u5728[ ] *\u3001+\u3001\uff1f\u7b49\u5143\u5b57\u7b26\u5168\u90e8\u5931\u6548\uff0c\u53ea\u662f\u7528\u4e8e\u5339\u914d\u5176\u672c\u8eab\uff08metacharacters \u7684\u9b54\u6cd5\u5931\u6548\u4e86\uff09\u3002</p> <p>eg. [akm\\(] will match any characters 'a', 'k', 'm', '\\)'</p> <p>2\u3001^ \u5728[ ]\u4e2d\u5e94\u7528\u4e8e\u524d\u9762\u624d\u6709\u4f5c\u7528\uff0c\u8b6c\u5982[^5] \u5c06\u5339\u914d\u4efb\u4f55\u975e 5 \u7684\u5b57\u7b26\uff0c\u4f46\u662f[5^]\u5374\u8d77\u4e0d\u5230\u4efb\u4f55\u4f5c\u7528\uff0c\u6b64\u65f6\u53ea\u662f\u5339\u914d'5' \u6216\u8005'^'\u81ea\u8eab\u3002</p>"},{"location":"CS/Python/Python-Notes-202410/#boundaries","title":"\uff08\u516d\uff09Boundaries","text":"<p><code>^</code> marks the start ,i.e. Hat\uff0c\u4f46\u662f\u5982\u679c\u5728[^\u2026\u2026]\uff0c\u610f\u601d\u662f not </p> <p><code>$</code> marks the end of a regular expression</p>"},{"location":"CS/Python/Python-Notes-202410/#re_2","title":"\u4e09\u3001RE \u7684\u8d44\u6e90","text":"<p>1\u3001RegEx101</p> <p>https://regex101.com/r/22QfRq/2</p> <p>2\u3001RegExr</p> <p>https://regexr.com/</p> <p>3\u3001Regex Documentation</p> <p>w3Schools (Python) \u2014 https://www.w3schools.com/python/python_regex.asp</p> <p>Python Regex Cheatsheet \u2014 https://www.debuggex.com/cheatsheet/regex/python</p>"},{"location":"CS/Python/Python-Notes-202410/#jupyter-notebooks","title":"\u9644\u5f55\uff1aJupyter Notebooks \u5e38\u7528\u5feb\u6377\u952e","text":"\u5feb\u6377\u952e \u8bf4\u660e \u6a21\u5f0f ESC \u4ece\u7f16\u8f91\u6a21\u5f0f\u56de\u5230\u547d\u4ee4\u6a21\u5f0f \u547d\u4ee4\u6a21\u5f0f A \u5728\u5f53\u524d Cell \u4e4b\u524d\u63d2\u5165\u4e00\u4e2a Cell\uff08\u6b64\u65f6\u4e0d\u80fd\u7f16\u8f91cell \u4e2d\u5185\u5bb9\uff09 \u547d\u4ee4\u6a21\u5f0f B \u5728\u5f53\u524d cell \u4e4b\u540e\u63d2\u5165\u4e00\u4e2a Cell \u547d\u4ee4\u6a21\u5f0f C Copy\u5f53\u524d cell \u547d\u4ee4\u6a21\u5f0f V \u5728\u4e0b\u65b9 paster \u5f53\u524d cell \u547d\u4ee4\u6a21\u5f0f D,D \u8fde\u7eed\u6309\u4e24\u6b21 D \u952e\uff0c\u5220\u9664\u5f53\u524d cell \u547d\u4ee4\u6a21\u5f0f Y \u5c06\u5f53\u524d Cell \u8bbe\u7f6e\u4e3a Code Cell \u547d\u4ee4\u6a21\u5f0f M \u5c06\u5f53\u524d Cell \u8bbe\u7f6e\u4e3a Markdown Cell \u547d\u4ee4\u6a21\u5f0f Control+ Shift+- \u5c06\u5f53\u524d Cell \u62c6\u5206\u4e3a\u4e24\u4e2a \u7f16\u8f91 Shift+M \u5408\u5e76\u9009\u4e2d Cells \u7f16\u8f91 Shift+J \u8fde\u7eed\u5411\u4e0b\u9009\u4e2d cells \u7f16\u8f91 Shift+K \u8fde\u7eed\u5411\u4e0a\u9009\u4e2d cells \u7f16\u8f91 Shift+Enter \u8fd0\u884c\u5f53\u524d Cell \u4e2d \u7684\u4ee3\u7801 \u7f16\u8f91 Shift+L \u663e\u793a/\u9690\u85cf\u4ee3\u7801\u884c\u53f7 \u7f16\u8f91 Enter \u5f53\u524d Cell \u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f \u7f16\u8f91 Tab \u81ea\u52a8\u8865\u5168\u4ee3\u7801 \u7f16\u8f91 Shift+Tab \u547c\u51fa\u5f53\u524d\u5149\u6807\u4e0b\u8bcd\u6c47 \u7684 Docstring \u7f16\u8f91 Command+D Sublime Keymap\uff1a\u9009\u4e2d\u4e0b\u4e00\u4e2a\u76f8\u540c\u5b57\u7b26\u4e32 \u7f16\u8f91 Shift+Command+L Sublime Keymap\uff1a\u5728\u9009\u4e2d\u7684\u884c\u5185\u542f\u52a8\u591a\u884c\u540c\u65f6\u7f16\u8f91 \u7f16\u8f91 command+Mouse Click \u751f\u6210\u4e0b\u4e00\u4e2a\u53ef\u540c\u65f6\u7f16\u8f91\u7684\u5149\u6807\u70b9 \u7f16\u8f91 Option+ J move selected cells down Option+ K move selected cells up S enable output scorlling Option +S Disable output scrolling <p>\u81ea\u5b9a\u4e49\u5feb\u6377\u952e\uff1a\u5982\u4f55\u6253\u5f00</p> <p>\u5148\u5728 Settings\u27a1\ufe0fAdvanced Settings Editor \u4e2d\uff0c\u9009\u4e2d Keybord shortcuts\uff0c\u53f3\u4e0a\u89d2\u6709\u4e2a json settings editor\uff0c\u4f46\u662f\u6b64\u65f6\u6ca1\u6709\u663e\u793a\u51fa\u4ee3\u7801\uff0c</p> <p></p> <p>\u63a5\u4e0b\u6765\u518d\u70b9\u51fb\u4e00\u6b21\u5de6\u8fb9\u7684<code>Keyboard Shortcuts</code>\u624d\u80fd\u663e\u793a\u51faJson\u4ee3\u7801\u3002</p>"},{"location":"CS/Python/lecture2-Loops/","title":"CS50P-Lecture2-Loops","text":""},{"location":"CS/Python/lecture2-Loops/#lecture-2","title":"Lecture 2","text":"<ul> <li>Loops</li> <li>While Loops</li> <li>For Loops</li> <li>Improving with User Input</li> <li>More About Lists</li> <li>Length</li> <li>Dictionaries</li> <li>Mario</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/lecture2-Loops/#loops","title":"Loops","text":"<ul> <li>Essentially, loops are a way to do something over and over again.</li> <li>Begin by typing <code>code cat.py</code> in the terminal window.</li> <li> <p>In the text editor, begin with the following code:</p> Text Only<pre><code>print(\"meow\")\nprint(\"meow\")\nprint(\"meow\")\n</code></pre> <p>Running this code by typing <code>python cat.py</code>, you\u2019ll notice that the program meows three times.</p> </li> <li> <p>In developing as a programmer, you want to consider how one could improve areas of one\u2019s code where one types the same thing over and over again. Imagine where one might want to \u201cmeow\u201d 500 times. Would it be logical to type that same expression of <code>print(\"meow\")</code> over and over again?</p> </li> <li>Loops enable you to create a block of code that executes over and over again.</li> </ul>"},{"location":"CS/Python/lecture2-Loops/#while-loops","title":"While Loops","text":"<ul> <li>The <code>while</code> loop is nearly universal throughout all coding languages.</li> <li>Such a loop will repeat a block of code over and over again.</li> <li> <p>In the text editor window, edit your code as follows:</p> Text Only<pre><code>i = 3\nwhile i != 0:\n    print(\"meow\")\n</code></pre> <p>Notice how even though this code will execute <code>print(\"meow\")</code> multiple times, it will never stop! It will loop forever. <code>while</code> loops work by repeatedly asking if the condition of the loop has been fulfilled. In this case, the compiler is asking, \u201cdoes <code>i</code> not equal zero?\u201d When you get stuck in a loop that executes forever, you can press <code>control-c</code> on your keyboard to break out of the loop.</p> </li> <li> <p>To fix this loop that lasts forever, we can edit our code as follows</p> Text Only<pre><code>i = 3\nwhile i != 0:\n  print(\"meow\")\n  i = i - 1\n</code></pre> <p>Notice that now our code executes properly, reducing <code>i</code> by <code>1</code> for each \u201citeration\u201d through the loop. The term iteration has special significance within coding. By iteration, we mean one cycle through the loop. The first iteration is the \u201c0th\u201d iteration through the loop. The second is the \u201c1st\u201d iteration. In programming, we count starting with 0, then 1, then 2.</p> </li> <li> <p>We can further improve our code as follows:</p> Text Only<pre><code>  i = 1\n  while i &lt;= 3:\n      print(\"meow\")\n      i = i + 1\n</code></pre> <p>Notice that when we code <code>i = i + 1</code> we assign the value of <code>i</code> from the right to the left. Above, we are starting <code>i</code> at one, like most humans count (1, 2, 3). If you execute the code above, you\u2019ll see it meows three times. It\u2019s best practice in programming to begin counting with zero.</p> </li> <li> <p>We can improve our code to start counting with zero:</p> Text Only<pre><code>i = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n</code></pre> <p>Notice how changing the operator to <code>i &lt; 3</code> allows our code to function as intended. We begin by counting with 0 and it iterates through our loop three times, producing three meows. Also, notice how <code>i += 1</code> is the same as saying <code>i = i + 1</code>.</p> </li> <li> <p>Our code at this point is illustrated as follows:</p> Text Only<pre><code>flowchart TD\n  A([start]) --&gt; B[i = 0]\n  B --&gt; C{i &lt; 3}\n  C -- True --&gt; D[\"#quot;meow#quot;\"]\n  D --&gt; E[i += 1]\n  E --&gt; C\n  C -- False --&gt; F([stop])\n</code></pre> <p>Notice how our loop counts i up to, but not through <code>3</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#for-loops","title":"For Loops","text":"<ul> <li>A <code>for</code> loop is a different type of loop.</li> <li>To best understand a <code>for</code> loop, it\u2019s best to begin by talking about a new variable type called a <code>list</code> in Python. As in other areas of our lives, we can have a grocery list, a to-do list, etc.</li> <li> <p>A <code>for</code> loop iterates through a <code>list</code> of items. For example, in the text editor window, modify your <code>cat.py</code> code as follows:</p> Text Only<pre><code>for i in [0, 1, 2]:\n    print(\"meow\")\n</code></pre> <p>Notice how clean this code is compared to your previous <code>while</code> loop code. In this code, <code>i</code> begins with <code>0</code>, meows, <code>i</code> is assigned <code>1</code>, meows, and, finally, <code>i</code> is assigned <code>2</code>, meows, and then ends.</p> </li> <li> <p>While this code accomplishes what we want, there are some possibilities for improving our code for extreme cases. At first glance, our code looks great. However, what if you wanted to iterate up to a million? It\u2019s best to create code that can work with such extreme cases. Accordingly, we can improve our code as follows:</p> Text Only<pre><code>for i in range(3):\n    print(\"meow\")\n</code></pre> <p>Notice how <code>range(3)</code> provides back three values (<code>0</code>, <code>1</code>, and <code>2</code>) automatically. This code will execute and produce the intended effect, meowing three times.</p> </li> <li> <p>Our code can be further improved. Notice how we never use <code>i</code> explicitly in our code. That is, while Python needs the <code>i</code> as a place to store the number of the iteration of the loop, we never use it for any other purpose. In Python, if such a variable does not have any other significance in our code, we can simply represent this variable as a single underscore <code>_</code>. Therefore, you can modify your code as follows:</p> Text Only<pre><code>for _ in range(3):\n    print(\"meow\")\n</code></pre> <p>Notice how changing the <code>i</code> to <code>_</code> has zero impact on the functioning of our program.</p> </li> <li> <p>Our code can be further improved. To stretch your mind to the possibilities within Python, consider the following code:</p> <p>Notice how it will meow three times, but the program will produce <code>meowmeowmeow</code> as the result. Consider: How could you create a line break at the end of each meow?</p> </li> <li> <p>Indeed, you can edit your code as follows:</p> Text Only<pre><code>print(\"meow\\n\" * 3, end=\"\")\n</code></pre> <p>Notice how this code produces three meows, each on a separate line. By adding <code>end=\"\"</code> and the <code>\\n</code> we tell the compiler to add a line break at the end of each meow.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#improving-with-user-input","title":"Improving with User Input","text":"<ul> <li>Perhaps we want to get input from our user. We can use loops as a way of validating the input of the user.</li> <li>A common paradigm within Python is to use a <code>while</code> loop to validate the input of the user.</li> <li> <p>For example, let\u2019s try prompting the user for a number greater than or equal 0:</p> Text Only<pre><code>while True:\n    n = int(input(\"What's n? \"))\n    if n &lt; 0:\n        continue\n    else:\n        break\n</code></pre> </li> <li> <p>Notice that we\u2019ve introduced two new keywords in Python, <code>continue</code> and <code>break</code>. <code>continue</code> explicitly tells Python to go to the next iteration of a loop. <code>break</code>, on the other hand, tells Python to \u201cbreak out\u201d of a loop early before it has finished all of its iterations. In this case, we\u2019ll <code>continue</code> to the next iteration of the loop when <code>n</code> is less than 0\u2014ultimately reprompting the user with \u201cWhat\u2019s n?\u201d. If, though, <code>n</code> is greater than or equal to 0, we\u2019ll <code>break</code> out of the loop and allow the rest of our program to run.</p> </li> <li> <p>It turns out that the <code>continue</code> keyword is redundant in this case. We can improve our code as follows:</p> Text Only<pre><code>while True:\n    n = int(input(\"What's n? \"))\n    if n &gt; 0:\n        break\n\nfor _ in range(n):\n    print(\"meow\")\n</code></pre> <p>Notice how this while loop will always run (forever) until <code>n</code> is greater than <code>0</code>. When <code>n</code> is greater than <code>0</code>, the loop breaks.</p> </li> <li> <p>Bringing in our prior learning, we can use functions to further improve our code:</p> Text Only<pre><code>def main():\n    meow(get_number())\n\n\ndef get_number():\n    while True:\n        n = int(input(\"What's n? \"))\n        if n &gt; 0:\n            return n\n\n\ndef meow(n):\n    for _ in range(n):\n        print(\"meow\")\n\n\nmain()\n</code></pre> <p>Notice how not only did we change your code to operate in multiple functions, but we also used a <code>return</code> statement to <code>return</code> the value of <code>n</code> back to the <code>main</code> function.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#more-about-lists","title":"More About Lists","text":"<ul> <li>Consider the world of Hogwarts from the famed Harry Potter universe.</li> <li>In the terminal, type <code>code hogwarts.py</code>.</li> <li> <p>In the text editor, code as follows:</p> Text Only<pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nprint(students[0])\nprint(students[1])\nprint(students[2])\n</code></pre> <p>Notice how we have a <code>list</code> of students with their names as above. We then print the student who is at the 0th location, \u201cHermoine\u201d. Each of the other students is printed as well.</p> </li> <li> <p>Just as we illustrated previously, we can use a loop to iterate over the list. You can improve your code as follows:</p> Text Only<pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nfor student in students:\n    print(student)\n</code></pre> <p>Notice that for each <code>student</code> in the <code>students</code> list, it will print the student as intended. You might wonder why we did not use the <code>_</code> designation as discussed prior. We choose not to do this because <code>student</code> is explicitly used in our code.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of lists.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#length","title":"Length","text":"<ul> <li>We can utilize <code>len</code> as a way of checking the length of the <code>list</code> called <code>students</code>.</li> <li> <p>Imagine that you don\u2019t simply want to print the name of the student but also their position in the list. To accomplish this, you can edit your code as follows:</p> Text Only<pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\"]\n\nfor i in range(len(students)):\n    print(i + 1, students[i])\n</code></pre> <p>Notice how executing this code results in not only getting the position of each student plus one using <code>i + 1</code>, but also prints the name of each student. <code>len</code> allows you to dynamically see how long the list of the students is regardless of how much it grows.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of len.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#dictionaries","title":"Dictionaries","text":"<ul> <li><code>dict</code>s or dictionaries is a data structure that allows you to associate keys with values.</li> <li>Where a <code>list</code> is a list of multiple values, a <code>dict</code> associates a key with a value.</li> <li> <p>Considering the houses of Hogwarts, we might assign specific students to specific houses.</p> <p></p> </li> <li> <p>We could use <code>list</code>s alone to accomplish this:</p> Text Only<pre><code>students = [\"Hermoine\", \"Harry\", \"Ron\", \"Draco\"]\nhouses = [\"Gryffindor\", \"Gryffindor\", \"Griffindor\", \"Slytherin\"]\n</code></pre> <p>Notice that we can promise that we will always keep these lists in order. The individual at the first position of <code>students</code> is associated with the house at the first position of the <code>houses</code> list, and so on. However, this can become quite cumbersome as our lists grow!</p> </li> <li> <p>We can better our code using a <code>dict</code> as follows:</p> Text Only<pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nprint(students[\"Hermoine\"])\nprint(students[\"Harry\"])\nprint(students[\"Ron\"])\nprint(students[\"Draco\"])\n</code></pre> <p>Notice how we use <code>{}</code> curly braces to create a dictionary. Where <code>list</code>s use numbers to iterate through the list, <code>dict</code>s allow us to use words.</p> </li> <li> <p>Run your code and make sure your output is as follows:</p> Text Only<pre><code>$ python hogwarts.py\nGryffindor\nGryffindor\nGryffindor\nSlytherin\n</code></pre> </li> <li> <p>We can improve our code as follows:</p> Text Only<pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nfor student in students:\n    print(student)\n</code></pre> <p>Notice how, executing this code, the for loop will only iterate through all the keys, resulting in a list of the names of the students. How could we print out both values and keys?</p> </li> <li> <p>Modify your code as follows:</p> Text Only<pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nfor student in students:\n    print(student, students[student])\n</code></pre> <p>Notice how <code>students[student]</code> will go to each student\u2019s key and find the value of their house. Execute your code, and you\u2019ll notice how the output is a bit messy.</p> </li> <li> <p>We can clean up the print function by improving our code as follows:</p> Text Only<pre><code>students = {\n    \"Hermoine\": \"Gryffindor\",\n    \"Harry\": \"Gryffindor\",\n    \"Ron\": \"Gryffindor\",\n    \"Draco\": \"Slytherin\",\n}\nfor student in students:\n    print(student, students[student], sep=\", \")\n</code></pre> <p>Notice how this creates a clean separation of a <code>,</code> between each item printed.</p> </li> <li> <p>If you execute <code>python hogwarts.py</code>, you should see the following:</p> Text Only<pre><code>$ python hogwarts.py\nHermoine, Gryffindor\nHarry, Gryffindor\nRon, Gryffindor\nDraco, Slytherin\n</code></pre> </li> <li> <p>What if we have more information about our students? How could we associate more data with each of the students?</p> <p></p> </li> <li> <p>You can imagine wanting to have lots of data associated with multiple keys. Enhance your code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\n]\n</code></pre> <p>Notice how this code creates a <code>list</code> of <code>dict</code>s. The <code>list</code> called <code>students</code> has four <code>dicts</code> within it: One for each student. Also, notice that Python has a special <code>None</code> designation where there is no value associated with a key.</p> </li> <li> <p>Now, you have access to a whole host of interesting data about these students. Now, further modify your code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermoine\", \"house\": \"Gryffindor\", \"patronus\": \"Otter\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\", \"patronus\": \"Stag\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\", \"patronus\": \"Jack Russell terrier\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\", \"patronus\": None},\n]\n\nfor student in students:\n    print(student[\"name\"], student[\"house\"], student[\"patronus\"], sep=\", \")\n</code></pre> <p>Notice how the <code>for</code> loop will iterate through each of the <code>dict</code>s inside the <code>list</code> called <code>students</code>.</p> </li> <li> <p>You can learn more in Python\u2019s Documentation of <code>dict</code>s.</p> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#mario","title":"Mario","text":"<ul> <li> <p>Remember that the classic game Mario has a hero jumping over bricks. Let\u2019s create a textual representation of this game.</p> <p></p> </li> <li> <p>Begin coding as follows:</p> Text Only<pre><code>print(\"#\")\nprint(\"#\")\nprint(\"#\")\n</code></pre> <p>Notice how we are copying and pasting the same code over and over again.</p> </li> <li> <p>Consider how we could better the code as follows:</p> Text Only<pre><code>for _ in range(3):\n    print(\"#\")\n</code></pre> <p>Notice how this accomplishes essentially what we want to create.</p> </li> <li> <p>Consider: Could we further abstract for solving more sophisticated problems later with this code? Modify your code as follows:</p> Text Only<pre><code>def main():\n    print_column(3)\n\n\ndef print_column(height):\n    for _ in range(height):\n        print(\"#\")\n\n\nmain()\n</code></pre> <p>Notice how our column can grow as much as we want without any hard coding.</p> </li> <li> <p>Now, let\u2019s try to print a row horizontally. Modify your code as follows:</p> Text Only<pre><code>def main():\n    print_row(4)\n\n\ndef print_row(width):\n    print(\"?\" * width)\n\n\nmain()\n</code></pre> <p>Notice how we now have code that can create left-to-right blocks.</p> </li> <li> <p>Examining the slide below, notice how Mario has both rows and columns of blocks.</p> <p></p> </li> <li> <p>Consider: How could we implement both rows and columns within our code? Modify your code as follows:</p> Text Only<pre><code>def main():\n    print_square(3)\n\n\ndef print_square(size):\n\n    # For each row in square\n    for i in range(size):\n\n        # For each brick in row\n        for j in range(size):\n\n            #  Print brick\n            print(\"#\", end=\"\")\n\n        # Print blank line\n        print()\n\n\nmain()\n</code></pre> <p>Notice that we have an outer loop that addresses each row in the square. Then, we have an inner loop that prints a brick in each row. Finally, we have a <code>print</code> statement that prints a blank line.</p> </li> <li> <p>We can further abstract away our code:</p> Text Only<pre><code>def main():\n    print_square(3)\n\n\ndef print_square(size):\n    for i in range(size):\n        print_row(size)\n\n\ndef print_row(width):\n    print(\"#\" * width)\n\n\nmain()\n</code></pre> </li> </ul>"},{"location":"CS/Python/lecture2-Loops/#summing-up","title":"Summing Up","text":"<p>You now have another power in your growing list of your Python abilities. In this lecture, we addressed\u2026</p> <ul> <li>Loops</li> <li><code>while</code></li> <li><code>for</code></li> <li><code>len</code></li> <li><code>list</code></li> <li><code>dict</code></li> </ul>"},{"location":"CS/Python/lecture6-file-io/","title":"CS50P-Lecture6-File-IO","text":""},{"location":"CS/Python/lecture6-file-io/#lecture-6","title":"Lecture 6","text":"<ul> <li>File I/O</li> <li><code>open</code></li> <li><code>with</code></li> <li>CSV</li> <li>Binary Files and <code>PIL</code></li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/lecture6-file-io/#file-io","title":"File I/O","text":"<ul> <li>Up until now, everything we\u2019ve programmed has stored information in memory. That is, once the program is ended, all information gathered from the user or generated by the program is lost.</li> <li>File I/O is the ability of a program to take a file as input or create a file as output.</li> <li> <p>To begin, in the terminal window type <code>code names.py</code> and code as follows:</p> Text Only<pre><code>name = input(\"What's your name?\" )\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice that running this code has the desired output. The user can input a name. The output is as expected.</p> </li> <li> <p>However, what if we wanted to allow multiple names to be inputted? How might we achieve this? Recall that a <code>list</code> is a data structure that allows us to store multiple values into a single variable. Code as follows:</p> Text Only<pre><code>names = []\n\nfor _ in range(3):\n    name = input(\"What's your name?\" )\n    names.append(name)\n</code></pre> <p>Notice that the user will be prompted three times for input. The <code>append</code> method is used to add the <code>name</code> to our <code>names</code> list.</p> </li> <li> <p>This code could be simplified to the following:</p> Text Only<pre><code>names = []\n\nfor _ in range(3):\n    names.append(input(\"What's your name?\" ))\n</code></pre> <p>Notice that this has the same result as the prior block of code.</p> <ul> <li>Now, let\u2019s enable the ability to print the list of names as a sorted list. Code as follows:</li> </ul> Text Only<pre><code>names = []\n\nfor _ in range(3):\n    names.append(input(\"What's your name?\" ))\n\nfor name in sorted(names):\n    print(f\"hello, {name}\")\n</code></pre> <p>Notice that once this program is executed, all information is lost. File I/O allows your program to store this information such that it can be used later.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of sorted.</p> </li> </ul>"},{"location":"CS/Python/lecture6-file-io/#open","title":"<code>open</code>","text":"<ul> <li><code>open</code> is a functionality built into Python that allows you to open a file and utilize it in your program. The <code>open</code> function allows you to open a file such that you can read from it or write to it.</li> <li> <p>To show you how to enable file I/O in your program, let\u2019s rewind a bit and code as follows:</p> Text Only<pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"w\")\nfile.write(name)\nfile.close()\n</code></pre> <p>Notice that the <code>open</code> function opens a file called <code>names.txt</code> with writing enabled, as signified by the <code>w</code>. The code above assigns that opened file to a variable called <code>file</code>. The line <code>file.write(name)</code> writes the name to the text file. The line after that closes the file.</p> </li> <li> <p>Testing out your code by typing <code>python names.py</code>, you can input a name and it saves to the text file. However, if you run your program multiple times using different names, you will notice that this program will entirely rewrite the <code>names.txt</code> file each time.</p> </li> <li> <p>Ideally, we want to be able to append each of our names to the file. Remove the existing text file by typing <code>rm names.txt</code> in the terminal window. Then, modify your code as follows:</p> Text Only<pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"a\")\nfile.write(name)\nfile.close()\n</code></pre> <p>Notice that the only change to our code is that the <code>w</code> has been changed to <code>a</code> for \u201cappend\u201d. Rerunning this program multiple times, you will notice that names will be added to the file. However, you will notice a new problem!</p> </li> <li> <p>Examining your text file after running your program multiple times, you\u2019ll notice that the names are running together. The names are being appended without any gaps between each of the names. You can fix this issue. Again, remove the existing text file by typing <code>rm names.txt</code> in the terminal window. Then, modify your code as follows:</p> Text Only<pre><code>name = input(\"What's your name? \")\n\nfile = open(\"names.txt\", \"a\")\nfile.write(f\"{name}\\n\")\nfile.close()\n</code></pre> <p>Notice that the line with <code>file.write</code> has been modified to add a line break at the end of each name.</p> </li> <li> <p>This code is working quite well. However, there are ways to improve this program. It so happens that it\u2019s quite easy to forget to close the file.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of open.</p> </li> </ul>"},{"location":"CS/Python/lecture6-file-io/#with","title":"<code>with</code>","text":"<ul> <li>The keyword <code>with</code> allows you to automate the closing of a file.</li> <li> <p>Modify your code as follows:</p> Text Only<pre><code>name = input(\"What's your name? \")\n\nwith open(\"names.txt\", \"a\") as file:\n    file.write(f\"{name}\\n\")\n</code></pre> <p>Notice that the line below <code>with</code> is indented.</p> </li> <li> <p>Up until this point, we have been exclusively writing to a file. What if we want to read from a file. To enable this functionality, modify your code as follows:</p> Text Only<pre><code>with open(\"names.txt\", \"r\") as file:\n    lines = file.readlines()\n\nfor line in lines:\n    print(\"hello,\", line)\n</code></pre> <p>Notice that <code>readlines</code> has a special ability to read all the lines of a file and store them in a file called lines. Running your program, you will notice that the output is quite ugly. There seem to be multiple line breaks where there should be only one.</p> </li> <li> <p>There are many approaches to fix this issue. However, here is a simple way to fix this error in our code:</p> Text Only<pre><code>with open(\"names.txt\", \"r\") as file:\n    lines = file.readlines()\n\nfor line in lines:\n    print(\"hello,\", line.rstrip())\n</code></pre> <p>Notice that <code>rstrip</code> has the effect of removing the extraneous line break at the end of each line.</p> </li> <li> <p>Still, this code could be simplified even further:</p> Text Only<pre><code>with open(\"names.txt\", \"r\") as file:\n    for line in file:\n        print(\"hello,\", line.rstrip())\n</code></pre> <p>Notice that running this code, it is correct. However, notice that we are not sorting the names.</p> </li> <li> <p>This code could be further improved to allow for the sorting of the names:</p> Text Only<pre><code>names = []\n\nwith open(\"names.txt\") as file:\n    for line in file:\n        names.append(line.rstrip())\n\nfor name in sorted(names):\n    print(f\"hello, {name}\")\n</code></pre> <p>Notice that <code>names</code> is a blank list where we can collect the names. Each name is appended to the <code>names</code> list in memory. Then, each name in the sorted list in memory is printed. Running your code, you will see that the names are now properly sorted.</p> </li> <li> <p>What if we wanted the ability to store more than just the names of students? What if we wanted to store both the student\u2019s name and their house as well?</p> </li> </ul>"},{"location":"CS/Python/lecture6-file-io/#csv","title":"CSV","text":"<ul> <li>CSV stands for \u201ccomma separated values\u201d.</li> <li> <p>In your terminal window, type <code>code students.csv</code>. Ensure your new CSV file looks like the following:</p> Text Only<pre><code>Hermoine,Gryffindor\nHarry,Gryffindor\nRon,Gryffindor\nDraco,Slytherin\n</code></pre> </li> <li> <p>Let\u2019s create a new program by typing <code>code students.py</code> and code as follows:</p> Text Only<pre><code>with open(\"students.csv\") as file:\n    for line in file:\n        row = line.rstrip().split(\",\")\n        print(f\"{row[0]} is in {row[1]}\")\n</code></pre> <p>Notice that <code>rstrip</code> removes the end of each line in our CSV file. <code>split</code> tells the compiler where to find the end of each of our values in our CSV file. <code>row[0]</code> is the first element in each line of our CSV file. <code>row[1]</code> is the second element in each line in our CSV file.</p> </li> <li> <p>The above code is effective at dividing each line or \u201crecord\u201d of our CSV file. However, it\u2019s a bit cryptic to look at if you are unfamiliar with this type of syntax. Python has built-in ability that could further simplify this code. Modify your code as follows:</p> Text Only<pre><code>with open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        print(f\"{name} is in {house}\")\n</code></pre> <p>Notice that the <code>split</code> function actually returns two values: The one before the comma and the one after the comma. Accordingly, we can rely upon that functionality to assign two variables at once instead of one!</p> </li> <li> <p>Imagine that we would again like to provide this list as sorted output? You can modify your code as follows:</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append(f\"{name} is in {house}\")\n\nfor student in sorted(students):\n    print(student)\n</code></pre> <p>Notice that we create a <code>list</code> called <code>students</code>. We <code>append</code> each string to this list. Then, we output a sorted version of our list.</p> </li> <li> <p>Recall that Python allows for <code>dictionaries</code> where a key can be associated with a value. This code could be further improved</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        student = {}\n        student[\"name\"] = name\n        student[\"house\"] = house\n        students.append(student)\n\nfor student in students:\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> <p>Notice that we create an empty dictionary called <code>student</code>. We add the values for each student, including their name and house into the <code>student</code> dictionary. Then, we append that student to the <code>list</code> called <code>students</code>.</p> </li> <li> <p>We can improve our code to illustrate this as follows:</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        student = {\"name\": name, \"house\": house}\n        students.append(student)\n\nfor student in students:\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> <p>Notice that this produces the desired outcome, minus the sorting of students.</p> </li> <li> <p>Unfortunately, we cannot sort the students as we had prior because each student is now a dictionary inside of a list. It would be helpful if Python could sort the <code>students</code> list of <code>student</code> dictionaries that sorts this list of dictionaries by the student\u2019s name.</p> </li> <li> <p>To implement this in our code, make the following changes:</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"house\": house})\n\n\ndef get_name(student):\n    return student[\"name\"]\n\n\nfor student in sorted(students, key=get_name):\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> <p>Notice that <code>sorted</code> needs to know how to get the key of each student. Python allows for a parameter called <code>key</code> where we can define on what \u201ckey\u201d the list of students will be sorted. Therefore, the <code>get_name</code> function simply returns the key of <code>student[\"name\"]</code>. Running this program, you will now see that the list is now sorted by name.</p> </li> <li> <p>Still, our code can be further improved upon. It just so happens that if you are only going to use a function like <code>get_name</code> once, you can simplify your code in the manner presented below. Modify your code as follows:</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, house = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"house\": house})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['house']}\")\n</code></pre> <p>Notice how we use a <code>lambda</code> function, an anonymous function, that says \u201cHey Python, here is a function that has no name: Given a <code>student</code>, access their <code>name</code> and return that to the <code>key</code>.</p> </li> <li> <p>Unfortunately, our code is a bit fragile. Suppose that we changed our CSV file such that we indicated where each student grew up. What would be the impact of this upon our program? First, modify your <code>students.csv</code> file as follows:</p> </li> </ul> Text Only<pre><code>Harry,\"Number Four, Privet Drive\"\nRon,The Burrow\nDraco,Malfoy Manor\n</code></pre> <p>Notice how running our program how will produce a number of errors.</p> <ul> <li> <p>Now that we\u2019re dealing with homes instead of houses, modify your code as follows:</p> Text Only<pre><code>students = []\n\nwith open(\"students.csv\") as file:\n    for line in file:\n        name, home = line.rstrip().split(\",\")\n        students.append({\"name\": name, \"home\": home})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['home']}\")\n</code></pre> <p>Notice that running our program still does not work properly. Can you guess why?</p> </li> <li> <p>The <code>ValueError: too many values to unpack</code> error produced by the compiler is a result of the fact that we previously created this program expecting the CSV file is <code>split</code> using a <code>,</code> (comma). We could spend more time addressing this, but indeed someone else has already developed a way to \u201cparse\u201d (that is, to read) CSV files!</p> </li> <li> <p>Python\u2019s built-in <code>csv</code> library comes with an object called a <code>reader</code>. As the name suggests, we can use a <code>reader</code> to read our CSV file despite the extra comma in \u201cNumber Four, Privet Drive\u201d. A <code>reader</code> works in a <code>for</code> loop, where each iteration the <code>reader</code> gives us another row from our CSV file. This row itself is a list, where each value in the list corresponds to an element in that row. <code>row[0]</code>, for example, is the first element of the given row, while <code>row[1]</code> is the second element.</p> Text Only<pre><code>import csv\n\nstudents = []\n\nwith open(\"students.csv\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        students.append({\"name\": row[0], \"home\": row[1]})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is from {student['home']}\")\n</code></pre> <p>Notice that our program now works as expected.</p> </li> <li> <p>Up until this point, we have been relying upon our program to specifically decide what parts of our CSV file are the names and what parts are the homes. It\u2019s better design, though, to bake this directly into our CSV file by editing it as follows:</p> Text Only<pre><code>name,home\nHarry,\"Number Four, Privet Drive\"\nRon,The Burrow\nDraco,Malfoy Manor\n</code></pre> <p>Notice how we are explicitly saying in our CSV file that anything reading it should expect there to be a name value and a home value in each line.</p> </li> <li> <p>We can modify our code to use a part of the <code>csv</code> library called a <code>DictReader</code> to treat our CSV file with even more flexibilty:</p> Text Only<pre><code>import csv\n\nstudents = []\n\nwith open(\"students.csv\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        students.append({\"name\": row[\"name\"], \"home\": row[\"home\"]})\n\nfor student in sorted(students, key=lambda student: student[\"name\"]):\n    print(f\"{student['name']} is in {student['home']}\")\n</code></pre> <p>Notice that we have replaced <code>reader</code> with <code>DictReader</code>, which returns one dictionary at a time. Also, notice that the compiler will directly access the <code>row</code> dictionary, getting the <code>name</code> and <code>home</code> of each student. This is an example of coding defensively. As long as the person designing the CSV file has inputted the correct header information on the first line, we can access that information using our program.</p> </li> <li> <p>Up until this point, we have been reading CSV files. What if we want to write to a CSV file?</p> </li> <li>To begin, let\u2019s clean up our files a bit. First, delete the <code>students.csv</code> file by typing <code>rm students.csv</code> in the terminal window. This command will only work if you\u2019re in the same folder as your <code>students.csv</code> file.</li> <li> <p>Then, in <code>students.py</code>, modify your code as follows:</p> Text Only<pre><code>import csv\n\nname = input(\"What's your name? \")\nhome = input(\"Where's your home? \")\n\nwith open(\"students.csv\", \"a\") as file:\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"home\"])\n    writer.writerow({\"name\": name, \"home\": home})\n</code></pre> <p>Notice how we are leveraging the built-in functionality of <code>DictWriter</code>, which takes two parameters: the <code>file</code> being written to and the <code>fieldnames</code> to write. Further, notice how the <code>writerow</code> function takes a dictionary as its parameter. Quite literally, we are telling the compiler to write a row with two fields called <code>name</code> and <code>home</code>.</p> </li> <li> <p>Note that there are many types of files that you can read from and write to.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of CSV.</p> </li> </ul>"},{"location":"CS/Python/lecture6-file-io/#binary-files-and-pil","title":"Binary Files and <code>PIL</code>","text":"<ul> <li>One more type of file that we will discuss today is a binary file. A binary file is simply a collection of ones and zeros. This type of file can store anything including, music and image data.</li> <li>There is a popular Python library called <code>PIL</code> that works well with image files.</li> <li>Animated GIFs are a popular type of image file that has many image files within it that are played in sequence over and over again, creating a simplistic animation or video effect.</li> <li>Imagine that we have a series of costumes, as illustrated below.</li> <li>Here is <code>costume1.gif</code>.</li> </ul> <ul> <li>Here is another one called <code>costume2.gif</code>. Notice how the leg positions are slightly different.</li> </ul> <ul> <li>Before proceeding, please make sure that you have downloaded the source code files from the course website. It will not be possible for you to code the following without having the two images above in your possession and stored in your IDE.</li> <li> <p>In the terminal window type <code>code costumes.py</code> and code as follows:</p> Text Only<pre><code>import sys\n\nfrom PIL import Image\n\nimages = []\n\nfor arg in sys.argv[1:]:\n    image = Image.open(arg)\n    images.append(image)\n\nimages[0].save(\n    \"costumes.gif\", save_all=True, append_images=[images[1]], duration=200, loop=0\n)\n</code></pre> <p>Notice that we import the <code>Image</code> functionality from <code>PIL</code>. Notice that the first <code>for</code> loop simply loops through the images provided as command-line arguments and stores theme into the <code>list</code> called <code>images</code>. The <code>1:</code> starts slicing <code>argv</code> at its second element. The last lines of code saves the first image and also appends a second image to it as well, creating an animated gif. Typing <code>python costumes.py costume1.gif costume2.gif</code> into the terminal. Now, type <code>code costumes.gif</code> into the terminal window, and you can now see an animated GIF.</p> </li> <li> <p>You can learn more in Pillow\u2019s documentation of PIL.</p> </li> </ul>"},{"location":"CS/Python/lecture6-file-io/#summing-up","title":"Summing Up","text":"<p>Now, we have not only seen that we can write and read files textually\u2014we can also read and write files using ones and zeros. We can\u2019t wait to see what you achieve with these new abilities next.</p> <ul> <li>File I/O</li> <li><code>open</code></li> <li><code>with</code></li> <li>CSV</li> <li><code>PIL</code></li> </ul>"},{"location":"CS/Python/lecture7-regular-expressions/","title":"Lecture 7","text":"<ul> <li>Regular Expressions</li> <li>Case Sensitivity</li> <li>Cleaning Up User Input</li> <li>Extracting User Input</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/lecture7-regular-expressions/#regular-expressions","title":"Regular Expressions","text":"<ul> <li> <p>Regular expressions or \u201cregexes\u201d will enable us to examine patterns within our code. For example, we might want to validate that an email address is formatted correctly. Regular expressions will enable us to examine expressions in this fashion.</p> </li> <li></li> </ul> <p>To begin, type</p> Text Only<pre><code>code validate.py\n</code></pre> <p>in the terminal window. Then, code as follows in the text editor:</p> Text Only<pre><code>email = input(\"What's your email? \").strip()\n\nif \"@\" in email:\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that <code>strip</code> will remove whitespace at the beginning or end of the input. Running this program, you will see that as long as an <code>@</code> symbol is inputted, the program will regard the input as valid.</p> <ul> <li></li> </ul> <p>You can imagine, however, that one could input</p> Text Only<pre><code>@@\n</code></pre> <p>alone and the input could be regarded as valid. We could regard an email address as having at least one</p> Text Only<pre><code>@\n</code></pre> <p>and a</p> Text Only<pre><code>.\n</code></pre> <p>somewhere within it. Modify your code as follows:</p> Text Only<pre><code>email = input(\"What's your email? \").strip()\n\nif \"@\" in email and \".\" in email:\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that while this works as expected, our user could be adversarial, typing simply <code>@.</code> would result in the program returning <code>valid</code>.</p> <ul> <li></li> </ul> <p>We can improve the logic of our program as follows:</p> Text Only<pre><code>email = input(\"What's your email? \").strip()\n\nusername, domain = email.split(\"@\")\n\nif username and \".\" in domain:\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how the <code>strip</code> method is used to determine if <code>username</code> exists and if <code>.</code> is inside the <code>domain</code> variable. Running this program, a standard email address typed in by you could be considered <code>valid</code>. Typing in <code>malan@harvard</code> alone, you\u2019ll find that the program regards this input as <code>invalid</code>.</p> <ul> <li></li> </ul> <p>We can be even more precise, modifying our code as follows:</p> Text Only<pre><code>email = input(\"What's your email? \").strip()\n\nusername, domain = email.split(\"@\")\n\nif username and domain.endswith(\".edu\"):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how the <code>endswith</code> method will check to see if <code>domain</code> contains <code>.edu</code>. Still, however, a nefarious user could still break our code. For example, a user could type in <code>malan@.edu</code> and it would be considered valid.</p> <ul> <li> <p>Indeed, we could keep iterating upon this code ourselves. However, it turns out that Python has an existing library called <code>re</code> that has a number of built-in functions that can validate user inputs against patterns.</p> </li> <li> <p>One of the most versatile functions within the library <code>re</code> is <code>search</code>.</p> </li> <li></li> </ul> <p>The</p> Text Only<pre><code>search\n</code></pre> <p>library follows the signature</p> Text Only<pre><code>re.search(pattern, string, flags=0)\n</code></pre> <p>. Following this signature, we can modify our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(\"@\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice this does not increase the functionality of our program at all. In fact, it is somewhat a step back.</p> <ul> <li></li> </ul> <p>We can further our program\u2019s functionality. However, we need to advance our vocabulary around <code>validation</code>. It turns out that in the world of regular expressions there are certain symbols that allow us to identify patterns. At this point, we have only been checking for specific pieces of text like <code>@</code>. It so happens that many special symbols can be passed to the compiler for the purpose of engaging in validation. A non-exhaustive list of those patterns is as follows:</p> Text Only<pre><code>.   any character except a new line\n*   0 or more repetitions\n+   1 or more repetitions\n?   0 or 1 repetition\n{m} m repetitions\n{m,n} m-n repetitions\n</code></pre> <ul> <li></li> </ul> <p>Implementing this inside of our code, modify yours as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(\".+@.+\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that we don\u2019t care what the username or domain is. What we care about is the pattern. <code>.+</code> is used to determine if anything is to the left of the email address and if anything is to the right of the email address. Running your code, typing in <code>malan@</code>, you\u2019ll notice that the input is regarded as <code>invalid</code> as we would hope.</p> <ul> <li></li> </ul> <p>Had we used a regular expression <code>.*@.*</code> in our code above, you can visualize this as follows: </p> <p>Notice the depiction of the <code>state machine</code> of our regular expression. On the left, the compiler begins evaluating the statement from left to right. Once we reach <code>q1</code> or question 1, the compiler reads time and time again based on the expression handed to it. Then, the state is changed looking now at <code>q2</code> or the second question being validated. Again, the arrow indicates how the expression will be evaluated time and time again based upon our programming. Then, as depicted by the double circle, the final state of state machine is reached.</p> <ul> <li></li> </ul> <p>Considering the regular expression we used in our code, <code>.+@.+</code>, you can visualize it as follows: </p> <p>Notice how <code>q1</code> is any character provided by the user, including \u2018q2\u2019 as 1 or more repetitions of characters. This is followed by the \u2018@\u2019 symbol. Then, <code>q3</code> looks for any character provided by the user, including <code>q4</code> as 1 or more repetitions of characters.</p> <ul> <li> <p>The <code>re</code> and <code>re.search</code> functions and ones like them look for patterns.</p> </li> <li></li> </ul> <p>Continuing our improvement of this code, we could improve our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(\".+@.+.edu\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice, however, that one could type in <code>malan@harvard?edu</code> and it could be considered valid. Why is this the case? You might recognize that in the language of validation, a <code>.</code> means any character!</p> <ul> <li></li> </ul> <p>We can modify our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\".+@.+\\.edu\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how we utilize the \u201cescape character\u201d or <code>\\</code> as a way of regarding the <code>.</code> as part of our string instead of our validation expression. Testing your code, you will notice that <code>malan@harvard.edu</code> is regarded as valid, where <code>malan@harvard?edu</code> is invalid.</p> <ul> <li></li> </ul> <p>Now that we\u2019re using escape characters, it\u2019s a good time to introduce \u201craw strings\u201d. In Python, raw strings are strings that</p> <p>don\u2019t</p> <p>format special characters\u2014instead, each character is taken at face-value. Imagine</p> Text Only<pre><code>\\n\n</code></pre> <p>, for example. We\u2019ve seen in an earlier lecture how, in a regular string, these two characters become one: a special newline character. In a raw string, however,</p> Text Only<pre><code>\\n\n</code></pre> <p>is treated not as</p> Text Only<pre><code>\\n\n</code></pre> <p>, the special character, but as a single</p> Text Only<pre><code>\\\n</code></pre> <p>and a single</p> Text Only<pre><code>n\n</code></pre> <p>. Placing an</p> Text Only<pre><code>r\n</code></pre> <p>in front of a string tells the Python interpreter to treat the string as a raw string, similar to how placing an</p> Text Only<pre><code>f\n</code></pre> <p>in front of a string tells the Python interpreter to treat the string as a format string:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^.+@.+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Now we\u2019ve ensured the Python interpreter won\u2019t treat <code>\\.</code> as a special character. Instead, simply as a <code>\\</code> followed by a <code>.</code>\u2014which, in regular expression terms, means matching a literal \u201c.\u201d.</p> <ul> <li> <p>You can imagine still how our users could create problems for us! For example, you could type in a sentence such as <code>My email address is malan@harvard.edu.</code> and this whole sentence would be considered valid. We can be even more precise in our coding.</p> </li> <li></li> </ul> <p>It just so happens we have more special symbols at our disposal in validation:</p> Text Only<pre><code>^   matches the start of the string\n$   matches the end of the string or just before the newline at the end of the string\n</code></pre> <ul> <li></li> </ul> <p>We can modify our code using our added vocabulary as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^.+@.+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice this has the effect of looking for this exact pattern matching to the start and end of the expression being validated. Typing in a sentence such as <code>My email address is malan@harvard.edu.</code> now is regarded as invalid.</p> <ul> <li> <p>We propose we can do even better! Even though we are now looking for the username at the start of the string, the <code>@</code> symbol, and the domain name at the end, we could type in as many <code>@</code> symbols as we wish! <code>malan@@@harvard.edu</code> is considered valid!</p> </li> <li></li> </ul> <p>We can add to our vocabulary as follows:</p> Text Only<pre><code>[]    set of characters\n[^]   complementing the set\n</code></pre> <ul> <li></li> </ul> <p>Using these newfound abilities, we can modify our expression as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^[^@]+@[^@]+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that <code>^</code> means to match at the start of the string. All the way at the end of our expression, <code>$</code> means to match at the end of the string. <code>[^@]+</code> means any character except an <code>@</code>. Then, we have a literal <code>@</code>. <code>[^@]+\\.edu</code> means any character except an <code>@</code> followed by an expression ending in <code>.edu</code>. Typing in <code>malan@@@harvard.edu</code> is now regarded as invalid.</p> <ul> <li></li> </ul> <p>We can still improve this regular expression further. It turns out there are certain requirements for what an email address can be! Currently, our validation expression is far too accomodating. We might only want to allow for characters normally used in a sentence. We can modify our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that <code>[a-zA-Z0-9_]</code> tells the validation that characters must be between <code>a</code> and <code>z</code>, between <code>A</code> and <code>Z</code>, between <code>0</code> and <code>9</code> and potentially include an <code>_</code> symbol. Testing the input, you\u2019ll find that many potential user mistakes can be indicated.</p> <ul> <li></li> </ul> <p>Thankfully, common patterns have been built into regular expressions by hard-working programmers. In this case, you can modify your code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^\\w+@\\w+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that <code>\\w</code> is the same as <code>[a-zA-Z0-9_]</code>. Thanks, hard-working programmers!</p> <ul> <li></li> </ul> <p>Here are some additional patterns we can add to our vocabulary:</p> Text Only<pre><code>\\d    decimal digit\n\\D    not a decimal digit\n\\s    whitespace characters\n\\S    not a whitespace character\n\\w    word character, as well as numbers and the underscore\n\\W    not a word character\n</code></pre> <ul> <li></li> </ul> <p>Now, we know that there are not simply</p> Text Only<pre><code>.edu\n</code></pre> <p>email addresses. We could modify our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^\\w+@\\w.+\\.(com|edu|gov|net|org)$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice that the <code>|</code> has the impact of an <code>or</code> in our expression.</p> <ul> <li></li> </ul> <p>Adding even more symbols to our vocabulary, here are some more to consider:</p> Text Only<pre><code>A|B     either A or B\n(...)   a group\n(?:...) non-capturing version\n</code></pre>"},{"location":"CS/Python/lecture7-regular-expressions/#case-sensitivity","title":"Case Sensitivity","text":"<p>To illustrate how you might address issues around case sensitivity, where there is a difference between</p> Text Only<pre><code>EDU\n</code></pre> <p>and</p> Text Only<pre><code>edu\n</code></pre> <p>and the like, let\u2019s rewind our code to the following:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^\\w+@\\w+\\.edu$\", email):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how we have removed the <code>|</code> statements provided previously.</p> <ul> <li> <p>Recall that within the <code>re.search</code> function, there is a parameter for <code>flags</code>.</p> </li> <li></li> </ul> <p>Some built-in flag variables are:</p> Text Only<pre><code>re.IGNORECASE\nre.MULTILINE\nre.DOTALL\n</code></pre> <p>Consider how you might use these in your code.</p> <ul> <li></li> </ul> <p>Therefore, we can change our code as follows.</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^\\w+@\\w+\\.edu$\", email, re.IGNORECASE):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how we added a third parameter <code>re.IGNORECASE</code>. Running this program with <code>MALAN@HARVARD.EDU</code>, the input is now considered valid.</p> <ul> <li> <p>Consider the following email address <code>malan@cs50.harvard.edu</code>. Using our code above, this would be considered invalid. Why might that be?</p> </li> <li> <p>Since there is an additional <code>.</code>, the program considers this invalid.</p> </li> <li></li> </ul> <p>It turns out that we can, looking at our vocabulary from before, we can group together ideas.</p> Text Only<pre><code>A|B     either A or B\n(...)   a group\n(?:...) non-caputuring version\n</code></pre> <ul> <li></li> </ul> <p>We can modify our code as follows:</p> Text Only<pre><code>import re\n\nemail = input(\"What's your email? \").strip()\n\nif re.search(r\"^\\w+@(\\w+\\.)?\\w+\\.edu$\", email, re.IGNORECASE):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")\n</code></pre> <p>Notice how the <code>(\\w+\\.)?</code> communicates to the compiler that this new expression can be there once or not at all. Hence, both <code>malan@cs50.harvard.edu</code> and <code>malan@harvard.edu</code> are considered valid.</p> <ul> <li></li> </ul> <p>Interestingly enough, the edits we have done so far to our code do not fully encompass all the checking that could be done to ensure a valid email address. Indeed, here is the full expression that one would have to type to ensure that a valid email is inputted:</p> Text Only<pre><code>^[a-zA-Z0-9.!#$%&amp;'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\n</code></pre> <ul> <li></li> </ul> <p>There are other functions within the <code>re</code> library you might find useful. <code>re.match</code> and <code>re.fullmatch</code> are ones you might find exceedingly useful.</p> <ul> <li>You can learn more in Python\u2019s documentation of re.</li> </ul>"},{"location":"CS/Python/lecture7-regular-expressions/#cleaning-up-user-input","title":"Cleaning Up User Input","text":"<ul> <li> <p>You should never expect your users to always follow your hopes for clean input. Indeed, users will often violate your intentions as a programmer.</p> </li> <li> <p>There are ways to clean up your data.</p> </li> <li></li> </ul> <p>In the terminal window, type</p> Text Only<pre><code>code format.py\n</code></pre> <p>. Then, in the text-editor, code as follows:</p> Text Only<pre><code>name = input(\"What's your name? \").strip()\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice that we have created, essentially, a \u201chello world\u201d program. Running this program and typing in <code>David</code>, it works well! However, typing in <code>Malan, David</code> notice how the program does not function as intended. How could we modify our program to clean up this input?</p> <ul> <li></li> </ul> <p>Modify your code as follows.</p> Text Only<pre><code>name = input(\"What's your name? \").strip()\nif \",\" in name:\n    last, first = name.split(\", \")\n    name = f\"{first} {last}\"\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice how <code>last, first = name.split(\", \")</code> is run if there is a <code>,</code> in the name. Then, the name is standardized as first and last. Running our code, typing in <code>Malan, David</code>, you can see how this program does clean up at least one scenario where a user types in something unexpected.</p> <ul> <li></li> </ul> <p>You might notice that typing in</p> Text Only<pre><code>Malan,David\n</code></pre> <p>with no space causes the compiler to throw an error. Since we now know some regular expression syntax, let\u2019s apply that to our code:</p> Text Only<pre><code>import re\n\nname = input(\"What's your name? \").strip()\nmatches = re.search(r\"^(.+), (.+)$\", name)\nif matches:\n    last, first = matches.groups()\n    name = first + \" \" + last\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice that <code>re.search</code> can return a set of matches that are extracted from the user\u2019s input. If matches are returned by <code>re.search</code>. Running this program, typing in <code>David Malan</code> notice how the <code>if</code> condition is not run and the name is returned. If you run the program by typing <code>Malan, David</code>, the name is also returned properly.</p> <ul> <li></li> </ul> <p>It just so happens that we can request specific groups back using</p> Text Only<pre><code>matches.group\n</code></pre> <p>. We can modify our code as follows:</p> Text Only<pre><code>import re\n\nname = input(\"What's your name? \").strip()\nmatches = re.search(r\"^(.+), (.+)$\", name)\nif matches:\n    name = matches.group(2) + \" \" + matches.group(1)\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice how, in this implementation, <code>group</code> is not plural (there is no <code>s</code>).</p> <ul> <li></li> </ul> <p>Our code can be further tightened as follows:</p> Text Only<pre><code>import re\n\nname = input(\"What's your name? \").strip()\nmatches = re.search(r\"^(.+), (.+)$\", name)\nif matches:\n    name = matches.group(2) + \" \" + matches.group(1)\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice how <code>group(2)</code> and <code>group(1)</code> are concatenated together with a space. The first group is that which is left of the comma. The second group is that which is right of the comma.</p> <ul> <li></li> </ul> <p>Recognize still that typing in</p> Text Only<pre><code>Malan,David\n</code></pre> <p>with no space will still break our code. Therefore, we can make the following modification:</p> Text Only<pre><code>import re\n\nname = input(\"What's your name? \").strip()\nmatches = re.search(r\"^(.+), *(.+)$\", name)\nif matches:\n    name = matches.group(2) + \" \" + matches.group(1)\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice the addition of the <code>*</code> in our validation statement. This code will now accept and properly process <code>Malan,David</code>. Further, it will properly handle <code>David,Malan</code> with many spaces in front of <code>David</code>.</p> <ul> <li></li> </ul> <p>It is very common to utilize</p> Text Only<pre><code>re.search\n</code></pre> <p>as we have in the previous examples, where</p> Text Only<pre><code>matches\n</code></pre> <p>is on a line of code after. However, we can combine these statements:</p> Text Only<pre><code>import re\n\nname = input(\"What's your name? \").strip()\nif matches := re.search(r\"^(.+), *(.+)$\", name):\n    name = matches.group(2) + \" \" + matches.group(1)\nprint(f\"hello, {name}\")\n</code></pre> <p>Notice how we combine two lines of our code. The walrus <code>:=</code> operator assigns a value from right to left and allows us to ask a boolean question at the same time. Turn your head sideways and you\u2019ll see why this is called a walrus operator.</p> <ul> <li>You can learn more in Python\u2019s documentation of re.</li> </ul>"},{"location":"CS/Python/lecture7-regular-expressions/#extracting-user-input","title":"Extracting User Input","text":"<ul> <li> <p>So far, we have validated the user\u2019s input and cleaned up the user\u2019s input.</p> </li> <li></li> </ul> <p>Now, let\u2019s extract some specific information from user input. In the terminal window, type</p> Text Only<pre><code>code twitter.py\n</code></pre> <p>and code as follows in the text editor window:</p> Text Only<pre><code>url = input(\"URL: \").strip()\nprint(url)\n</code></pre> <p>Notice that if we type in <code>https://twitter.com/davidjmalan</code>, it shows exactly what the user typed. However, how would we be able to extract just the username and ignore the rest of the URL?</p> <ul> <li></li> </ul> <p>You can imagine how we would simply be able to get rid of the beginning of the standard Twitter URL. We can attempt this as follows:</p> Text Only<pre><code>url = input(\"URL: \").strip()\n\nusername = url.replace(\"https://twitter.com/\", \"\")\nprint(f\"Username: {username}\")\n</code></pre> <p>Notice how the <code>replace</code> method allows us to find one item and replace it with another. In this case, we are finding part of the URL and replacing it with nothing. Typing in the full URL <code>https://twitter.com/davidjmalan</code>, the program effectively outputs the username. However, what are some shortcomings of this current program?</p> <ul> <li></li> </ul> <p>What if the user simply typed</p> Text Only<pre><code>twitter.com\n</code></pre> <p>instead of including the</p> Text Only<pre><code>https://\n</code></pre> <p>and the like? You can imagine many scenarios where the user may input or neglect to input parts of the URL that would create strange output by this program. To improve this program, we can code as follows:</p> Text Only<pre><code>url = input(\"URL: \").strip()\n\nusername = url.removeprefix(\"https://twitter.com/\")\nprint(f\"Username: {username}\")\n</code></pre> <p>Notice how we utilize the <code>removeprefix</code> method. This method will remove the beginning of a string.</p> <ul> <li> <p>Regular expressions simply allow us to succinctly express the patterns and goals.</p> </li> <li> <p>Within the <code>re</code> library, there is a method called <code>sub</code>. This method allows us to substitute a pattern with something else.</p> </li> <li></li> </ul> <p>The signature of the</p> Text Only<pre><code>sub\n</code></pre> <p>method is as follows</p> Text Only<pre><code>re.sub(pattern, repl, string, count=0, flags=0)\n</code></pre> <p>Notice how <code>pattern</code> refers to the regular expression we are looking for. Then, there is a <code>repl</code> string that we can replace the pattern with. Finally, there is the <code>string</code> that we want to do the substitution on.</p> <ul> <li></li> </ul> <p>Implementing this method in our code, we can modify our program as follows:</p> Text Only<pre><code>import re\n\nurl = input(\"URL: \").strip()\n\nusername = re.sub(r\"https://twitter.com/\", \"\", url)\nprint(f\"Username: {username}\")\n</code></pre> <p>Notice how executing this program and inputting <code>https://twitter.com/davidjmalan</code> produces the correct outcome. However, there are some problems still present in our code.</p> <ul> <li></li> </ul> <p>The protocol, subdomain, and the possibility that the user inputted any part of the URL after the username are all reasons that this code is still not ideal. We can further address these shortcomings as follows:</p> Text Only<pre><code>import re\n\nurl = input(\"URL: \").strip()\n\nusername = re.sub(r\"^(https?://)?(www\\.)?twitter\\.com/\", \"\", url)\nprint(f\"Username: {username}\")\n</code></pre> <p>Notice how the <code>^</code> caret was added to the url. Notice also how the <code>.</code> could be interpreted improperly by the compiler. Therefore, we escape it using a <code>\\</code> to make it <code>\\.</code> For the purpose of tolerating both <code>http</code> and <code>https</code>, we add a <code>?</code> to the end of <code>https?</code>, making the <code>s</code> optional. Further, to accommodate <code>www</code> we add <code>(www\\.)?</code> to our code. Finally, just in case the user decides to leave out the protocol altogether, the <code>http://</code> or <code>https://</code> is made optional using <code>(https?://)</code>.</p> <ul> <li> <p>Still, we are blindly expecting that what the user inputted a url that, indeed, has a username.</p> </li> <li></li> </ul> <p>Using our knowledge of</p> Text Only<pre><code>re.search\n</code></pre> <p>, we can further improve our code.</p> Text Only<pre><code>import re\n\nurl = input(\"URL: \").strip()\n\nmatches = re.search(r\"^https?://(www\\.)?twitter\\.com/(.+)$\", url, re.IGNORECASE)\nif matches:\n    print(f\"Username:\", matches.group(2))\n</code></pre> <p>Notice how we are searching for the regular expression above in the string provided by the user. In particular, we are capturing that which appears at the end of the URL using <code>(.+)$</code> regular expression. Therefore, if the user fails to input a URL without a username, no input will be presented.</p> <ul> <li></li> </ul> <p>Even further tightening up our program, we can utilize our</p> Text Only<pre><code>:=\n</code></pre> <p>operator as follows:</p> Text Only<pre><code>import re\n\nurl = input(\"URL: \").strip()\n\nif matches := re.search(r\"^https?://(?:www\\.)?twitter\\.com/(.+)$\", url, re.IGNORECASE):\n    print(f\"Username:\", matches.group(1))\n</code></pre> <p>Notice that the <code>?:</code> tells the compiler it does not have to capture what is in that spot in our regular expression.</p> <ul> <li></li> </ul> <p>Still, we can be more explicit to ensure that the username inputted is correct. Using Twitter\u2019s documentation, we can add the following to our regular expression:</p> Text Only<pre><code>import re\n\nurl = input(\"URL: \").strip()\n\nif matches := re.search(r\"^https?://(?:www\\.)?twitter\\.com/([a-z0-9_]+)\", url, re.IGNORECASE):\n    print(f\"Username:\", matches.group(1))\n</code></pre> <p>Notice that the <code>[a-z0-9_]+</code> tells the compiler to only expect <code>a-z</code>, <code>0-9</code>, and <code>_</code> as part of the regular expression. The <code>+</code> indicates that we are expecting one or more characters.</p> <ul> <li>You can learn more in Python\u2019s documentation of re.</li> </ul>"},{"location":"CS/Python/lecture7-regular-expressions/#summing-up","title":"Summing Up","text":"<p>Now, you\u2019ve learned a whole new language of regular expressions that can be utilized to validate, clean up, and extract user input.</p> <ul> <li>Regular Expressions</li> <li>Case Sensitivity</li> <li>Cleaning Up User Input</li> <li>Extracting User Input</li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/","title":"CS50P-Lecture8-OoP","text":""},{"location":"CS/Python/lecture8-Object-oriented-programming/#lecture-8","title":"Lecture 8","text":"<ul> <li>Object-Oriented Programming</li> <li>Classes</li> <li><code>raise</code></li> <li>Decorators</li> <li>Connecting to Previous Work in this Course</li> <li>Class Methods</li> <li>Static Methods</li> <li>Inheritance</li> <li>Inheritance and Exceptions</li> <li>Operator Overloading</li> <li>Summing Up</li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#object-oriented-programming","title":"Object-Oriented Programming","text":"<ul> <li>There are different paradigms of programming. As you learn other languages, you will start recognizing patterns like these.</li> <li>Up until this point, you have worked procedurally step-by-step.</li> <li>Object-oriented programming (OOP) is a compelling solution to programming-related problems.</li> <li> <p>To begin, type <code>code student.py</code> in the terminal window and code as follows:</p> Text Only<pre><code>name = input(\"Name: \")\nhouse = input(\"House: \")\nprint(f\"{name} from {house}\")\n</code></pre> <p>Notice that this program follows a procedural, step-by-step paradigm: Much like you have seen in prior parts of this course.</p> </li> <li> <p>Drawing on our work from previous weeks, we can create functions to abstract away parts of this program.</p> Text Only<pre><code>def main():\n    name = get_name()\n    house = get_house()\n    print(f\"{name} from {house}\")\n\n\ndef get_name():\n    return input(\"Name: \")\n\n\ndef get_house():\n    return input(\"House: \")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>get_name</code> and <code>get_house</code> abstract away some of the needs of our <code>main</code> function. Further, notice how the final lines of the code above tell the compiler to run the <code>main</code> function.</p> </li> <li> <p>We can further simplify our program by storing the student as a <code>tuple</code>. A <code>tuple</code> is a sequences of values. Unlike a <code>list</code>, a <code>tuple</code> can\u2019t be modified. In spirit, we are returning two values.</p> Text Only<pre><code>def main():\n    name, house = get_student()\n    print(f\"{name} from {house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return name, house\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>get_student</code> returns <code>name, house</code>.</p> </li> <li> <p>Packing that <code>tuple</code>, such that we are able to return both items to a variable called <code>student</code>, we can modify our code as follows.</p> Text Only<pre><code>def main():\n    student = get_student()\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return (name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that <code>(name, house)</code> explicitly tells anyone reading our code that we are returning two values within one. Further, notice how we can index into <code>tuple</code>s using <code>student[0]</code> or <code>student[1]</code>.</p> </li> <li> <p><code>tuple</code>s are immutable, meaning we cannot change those values. Immutability is a way by which we can program defensively.</p> Text Only<pre><code>def main():\n    student = get_student()\n    if student[0] == \"Padma\":\n        student[1] = \"Ravenclaw\"\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return name, house\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that this code produces an error. Since <code>tuple</code>s are immutable, we\u2019re not able to reassign the value of <code>student[1]</code>.</p> </li> <li> <p>If we wanted to provide our fellow programmers flexibility, we could utilize a <code>list</code> as follows.</p> Text Only<pre><code>def main():\n    student = get_student()\n    if student[0] == \"Padma\":\n        student[1] = \"Ravenclaw\"\n    print(f\"{student[0]} from {student[1]}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return [name, house]\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Note the lists are mutable. That is, the order of <code>house</code> and <code>name</code> can be switched by a programmer. You might decide to utilize this in some cases where you want to provide more flexibility at the cost of the security of your code. After all, if the order of those values is changeable, programmers that work with you could make mistakes down the road.</p> </li> <li> <p>A dictionary could also be utilized in this implementation. Recall that dictionaries provide a key-value pair.</p> Text Only<pre><code>def main():\n    student = get_student()\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    student = {}\n    student[\"name\"] = input(\"Name: \")\n    student[\"house\"] = input(\"House: \")\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice in this case, two key-value pairs are returned. An advantage of this approach is that we can index into this dictionary using the keys.</p> </li> <li> <p>Still, our code can be further improved. Notice that there is an unneeded variable. We can remove <code>student = {}</code> because we don\u2019t need to create an empty dictionary.</p> Text Only<pre><code>def main():\n    student = get_student()\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return {\"name\": name, \"house\": house}\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice we can utilize <code>{}</code> braces in the <code>return</code> statement to create the dictionary and return it all in the same line.</p> </li> <li> <p>We can provide our special case with Padma in our dictionary version of our code.</p> Text Only<pre><code>def main():\n    student = get_student()\n    if student[\"name\"] == \"Padma\":\n        student[\"house\"] = \"Ravenclaw\"\n    print(f\"{student['name']} from {student['house']}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return {\"name\": name, \"house\": house}\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how, similar in spirit to our previous iterations of this code, we can utilize the key names to index into our student dictionary.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#classes","title":"Classes","text":"<ul> <li>Classes are a way by which, in object-oriented programming, we can create our own type of data and give them names.</li> <li>A class is like a mold for a type of data \u2013 where we can invent our own data type and give them a name.</li> <li> <p>We can modify our code as follows to implement our own class called <code>Student</code>:</p> Text Only<pre><code>class Student:\n    ...\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    student = Student()\n    student.name = input(\"Name: \")\n    student.house = input(\"House: \")\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice by convention that <code>Student</code> is capitalized. Further, notice the <code>...</code> simply means that we will later return to finish that portion of our code. Further, notice that in <code>get_student</code>, we can create a <code>student</code> of class <code>Student</code> using the syntax <code>student = Student()</code>. Further, notice that we utilize \u201cdot notation\u201d to access attributes of this variable <code>student</code> of class <code>Student</code>.</p> </li> <li> <p>Any time you create a class and you utilize that blueprint to create something, you create what is called an \u201cobject\u201d or an \u201cinstance\u201d. In the case of our code, <code>student</code> is an object.</p> </li> <li> <p>Further, we can lay some groundwork for the attributes that are expected inside an object whose class is <code>Student</code>. We can modify our code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    student = Student(name, house)\n    return student\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that within <code>Student</code>, we standardize the attributes of this class. We can create a function within <code>class Student</code>, called a \u201cmethod\u201d, that determines the behavior of an object of class <code>Student</code>. Within this function, it takes the <code>name</code> and <code>house</code> passed to it and assigns these variables to this object. Further, notice how the constructor <code>student = Student(name, house)</code> calls this function within the <code>Student</code> class and creates a <code>student</code>. <code>self</code> refers to the current object that was just created.</p> </li> <li> <p>We can simplify our code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>return Student(name, house)</code> simplifies the previous iteration of our code where the constructor statement was run on its own line.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of classes.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#raise","title":"<code>raise</code>","text":"<ul> <li> <p>Object-oriented program encourages you to encapusulate all the functionality of a class within the class definition. What if something goes wrong? What if someone tries to type in something random? What if someone tries to create a student without a name? Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n\n\ndef main():\n    student = get_student()\n    print(f\"{student.name} from {student.house}\")\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we check now that a name is provided and a proper house is designated. It turns out we can create our own exceptions that alerts the programmer to a potential error created by the user called <code>raise</code>. In the case above, we raise <code>ValueError</code> with a specific error message.</p> </li> <li> <p>It just so happens that Python allows you to create a specific function by which you can print the attributes of an object. Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house, patronus):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n        self.patronus = patronus\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n\ndef main():\n    student = get_student()\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    patronus = input(\"Patronus: \")\n    return Student(name, house, patronus)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>def __str__(self)</code> provides a means by which a student is returned when called. Therefore, you can now, as the programmer, print an object, its attributes, or almost anything you desire related to that object.</p> </li> <li> <p><code>__str__</code> is a built-in method that comes with Python classes. It just so happens that we can create our own methods for a class as well! Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house, patronus=None):\n        if not name:\n            raise ValueError(\"Missing name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        if patronus and patronus not in [\"Stag\", \"Otter\", \"Jack Russell terrier\"]:\n            raise ValueError(\"Invalid patronus\")\n        self.name = name\n        self.house = house\n        self.patronus = patronus\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    def charm(self):\n        match self.patronus:\n            case \"Stag\":\n                return \"\ud83d\udc34\"\n            case \"Otter\":\n                return \"\ud83e\udda6\"\n            case \"Jack Russell terrier\":\n                return \"\ud83d\udc36\"\n            case _:\n                return \"\ud83e\ude84\"\n\n\ndef main():\n    student = get_student()\n    print(\"Expecto Patronum!\")\n    print(student.charm())\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    patronus = input(\"Patronus: \") or None\n    return Student(name, house, patronus)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we define our own method <code>charm</code>. Unlike dictionaries, classes can have built-in functions called methods. In this case, we define our <code>charm</code> method where specific cases have specific results. Further, notice that Python has the ability to utilize emojis directly in our code.</p> </li> <li> <p>Before moving forward, let us remove our patronus code. Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n\ndef main():\n    student = get_student()\n    student.house = \"Number Four, Privet Drive\"\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we have only two methods: <code>__init__</code> and <code>__str__</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#decorators","title":"Decorators","text":"<ul> <li> <p>Properties can be utilized to harden our code. In Python, we define properties using function \u201cdecorators\u201d, which begin with <code>@</code>. Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    # Getter for house\n    @property\n    def house(self):\n        return self._house\n\n    # Setter for house\n    @house.setter\n    def house(self, house):\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self._house = house\n\n\ndef main():\n    student = get_student()\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we\u2019ve written <code>@property</code> above a function called <code>house</code>. Doing so defines <code>house</code> as a property of our class. With <code>house</code> as a property, we gain the ability to define how some attribute of our class, <code>_house</code>, should be set and retrieved. Indeed, we can now define a function called a \u201csetter\u201d, via <code>@house.setter</code>, which will be called whenever the house property is set\u2014for example, with <code>student.house = \"Gryffindor\"</code>. Here, we\u2019ve made our setter validate values of <code>house</code> for us. Notice how we raise a <code>ValueError</code> if the value of <code>house</code> is not any of the Harry Potter houses, otherwise, we\u2019ll use <code>house</code> to update the value of <code>_house</code>. Why <code>_house</code> and not <code>house</code>? <code>house</code> is a property of our class, with functions via which a user attempts to set our class attribute. <code>_house</code> is that class attribute itself. The leading underscore, <code>_</code>, indicates to users they need not (and indeed, shouldn\u2019t!) modify this value directly. <code>_house</code> should only be set through the <code>house</code> setter. Notice how the <code>house</code> property simply returns that value of <code>_house</code>, our class attribute that has presumably been validated using our <code>house</code> setter. When a user calls <code>student.house</code>, they\u2019re getting the value of <code>_house</code> through our <code>house</code> \u201cgetter\u201d.</p> </li> <li> <p>In addition to the name of the house, we can protect the name of our student as well. Modify your code as follows:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    # Getter for name\n    @property\n    def name(self):\n        return self._name\n\n    # Setter for name\n    @name.setter\n    def name(self, name):\n        if not name:\n            raise ValueError(\"Invalid name\")\n        self._name = name\n\n    @property\n    def house(self):\n        return self._house\n\n    @house.setter\n    def house(self, house):\n        if house not in [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]:\n            raise ValueError(\"Invalid house\")\n        self._house = house\n\n\ndef main():\n    student = get_student()\n    print(student)\n\n\ndef get_student():\n    name = input(\"Name: \")\n    house = input(\"House: \")\n    return Student(name, house)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how, much like the previous code, we provide a getter and setter for the name.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of methods.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#connecting-to-previous-work-in-this-course","title":"Connecting to Previous Work in this Course","text":"<ul> <li>While not explicitly stated in past portions of this course, you have been using classes and objects the whole way through.</li> <li>If you dig into the documentation of <code>int</code>, you\u2019ll see that it is a class with a constructor. It\u2019s a blueprint for creating objects of type <code>int</code>. You can learn more in Python\u2019s documentation of <code>int</code>.</li> <li>Strings too are also a class. If you have used <code>str.lower()</code>, you were using a method that came within the <code>str</code> class. You can learn more in Python\u2019s documentation of <code>str</code>.</li> <li><code>list</code> is also a class. Looking at that documentation for <code>list</code>, you can see the methods that are contained therein, like <code>list.append()</code>. You can learn more in Python\u2019s documentation of <code>list</code>.</li> <li><code>dict</code> is also a class within Python. You can learn more in Python\u2019s documentation of <code>dict</code>.</li> <li> <p>To see how you have been using classes all along, go to your console and type <code>code type.py</code> and then code as follows:</p> <p>Notice how by executing this code, it will display that the class of <code>50</code> is <code>int</code>.</p> </li> <li> <p>We can also apply this to <code>str</code> as follows:</p> Text Only<pre><code>print(type(\"hello, world\"))\n</code></pre> <p>Notice how executing this code will indicate this is of the class <code>str</code>.</p> </li> <li> <p>We can also apply this to <code>list</code> as follows:</p> <p>Notice how executing this code will indicate this is of the class <code>list</code>.</p> </li> <li> <p>We can also apply this to a <code>list</code> using the name of Python\u2019s built-in <code>list</code> class as follows:</p> <p>Notice how executing this code will indicate this is of the class <code>list</code>.</p> </li> <li> <p>We can also apply this to <code>dict</code> as follows:</p> <p>Notice how executing this code will indicate this is of the class <code>dict</code>.</p> </li> <li> <p>We can also apply this to a <code>dict</code> using the name of Python\u2019s built in <code>dict</code> class as follows:</p> <p>Notice how executing this code will indicate this is of the class <code>dict</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#class-methods","title":"Class Methods","text":"<ul> <li>Sometimes, we want to add functionality to a class itself, not to instances of that class.</li> <li><code>@classmethod</code> is a function that we can use to add functionality to a class as a whole.</li> <li> <p>Here\u2019s an example of not using a class method. In your terminal window, type <code>code hat.py</code> and code as follows:</p> Text Only<pre><code>import random\n\n\nclass Hat:\n    def __init__(self):\n        self.houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]\n\n    def sort(self, name):\n        print(name, \"is in\", random.choice(self.houses))\n\n\nhat = Hat()\nhat.sort(\"Harry\")\n</code></pre> <p>Notice how when we pass the name of the student to the sorting hat, it will tell us what house is assigned to the student. Notice that <code>hat = Hat()</code> instantiates a <code>hat</code>. The <code>sort</code> functionality is always handled by the instance of the class <code>Hat</code>. By executing <code>hat.sort(\"Harry\")</code>, we pass the name of the student to the <code>sort</code> method of the particular instance of <code>Hat</code>, which we\u2019ve called <code>hat</code>.</p> </li> <li> <p>We may want, though, to run the <code>sort</code> function without creating a particular instance of the sorting hat (there\u2019s only one, after all!). We can modify our code as follows:</p> Text Only<pre><code>import random\n\n\nclass Hat:\n\n    houses = [\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"]\n\n    @classmethod\n    def sort(cls, name):\n        print(name, \"is in\", random.choice(cls.houses))\n\n\nHat.sort(\"Harry\")\n</code></pre> <p>Notice how the <code>__init__</code> method is removed because we don\u2019t need to instantiate a hat anywhere in our code. <code>self</code>, therefore, is no longer relevant and is removed. We specify this <code>sort</code> as a <code>@classmethod</code>, replacing <code>self</code> with <code>cls</code>. Finally, notice how <code>Hat</code> is capitalized by convention near the end of this code, because this is the name of our class.</p> </li> <li> <p>Returning back to <code>students.py</code> we can modify our code as follows, addressing some missed opportunities related to <code>@classmethod</code>s:</p> Text Only<pre><code>class Student:\n    def __init__(self, name, house):\n        self.name = name\n        self.house = house\n\n    def __str__(self):\n        return f\"{self.name} from {self.house}\"\n\n    @classmethod\n    def get(cls):\n        name = input(\"Name: \")\n        house = input(\"House: \")\n        return cls(name, house)\n\n\ndef main():\n    student = Student.get()\n    print(student)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that <code>get_student</code> is removed and a <code>@classmethod</code> called <code>get</code> is created. This method can now be called without having to create a student first.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#static-methods","title":"Static Methods","text":"<ul> <li>It turns out that besides <code>@classmethod</code>s, which are distinct from instance methods, there are other types of methods as well.</li> <li>Using <code>@staticmethod</code> may be something you might wish to explore. While not covered explicitly in this course, you are welcome to go and learn more about static methods and their distinction from class methods.</li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#inheritance","title":"Inheritance","text":"<ul> <li>Inheritance is, perhaps, the most powerful feature of object-oriented programming.</li> <li>It just so happens that you can create a class that \u201cinherits\u201d methods, variables, and attributes from another class.</li> <li> <p>In the terminal, execute <code>code wizard.py</code>. Code as follows:</p> Text Only<pre><code>class Wizard:\n    def __init__(self, name):\n        if not name:\n            raise ValueError(\"Missing name\")\n        self.name = name\n\n    ...\n\n\nclass Student(Wizard):\n    def __init__(self, name, house):\n        super().__init__(name)\n        self.house = house\n\n    ...\n\n\nclass Professor(Wizard):\n    def __init__(self, name, subject):\n        super().__init__(name)\n        self.subject = subject\n\n    ...\n\n\nwizard = Wizard(\"Albus\")\nstudent = Student(\"Harry\", \"Gryffindor\")\nprofessor = Professor(\"Severus\", \"Defense Against the Dark Arts\")\n...\n</code></pre> <p>Notice that there is a class above called <code>Wizard</code> and a class called <code>Student</code>. Further, notice that there is a class called <code>Professor</code>. Both students and professors have names. Also, both students and professors are wizards. Therefore, both <code>Student</code> and <code>Professor</code> inherit the characteristics of <code>Wizard</code>. Within the \u201cchild\u201d class <code>Student</code>, <code>Student</code> can inherit from the \u201cparent\u201d or \u201csuper\u201d class <code>Wizard</code> as the line <code>super().__init__(name)</code> runs the <code>init</code> method of <code>Wizard</code>. Finally, notice that the last lines of this code create a wizard called Albus, a student called Harry, and so on.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#inheritance-and-exceptions","title":"Inheritance and Exceptions","text":"<ul> <li>While we have just introduced inheritance, we have been using this all along during our use of exceptions.</li> <li> <p>It just so happens that exceptions come in a heirarchy, where there are children, parent, and grandparent classes. These are illustrated below:</p> Text Only<pre><code>BaseException\n +-- KeyboardInterrupt\n +-- Exception\n      +-- ArithmeticError\n      |    +-- ZeroDivisionError\n      +-- AssertionError\n      +-- AttributeError\n      +-- EOFError\n      +-- ImportError\n      |    +-- ModuleNotFoundError\n      +-- LookupError\n      |    +-- KeyError\n      +-- NameError\n      +-- SyntaxError\n      |    +-- IndentationError\n      +-- ValueError\n ...\n</code></pre> </li> <li> <p>You can learn more in Python\u2019s documentation of exceptions.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#operator-overloading","title":"Operator Overloading","text":"<ul> <li>Some operators such as <code>+</code> and <code>-</code> can be \u201coverloaded\u201d such that they can have more abilities beyond simple arithmetic.</li> <li> <p>In your terminal window, type <code>code vault.py</code>. Then, code as follows:</p> Text Only<pre><code>class Vault:\n    def __init__(self, galleons=0, sickles=0, knuts=0):\n        self.galleons = galleons\n        self.sickles = sickles\n        self.knuts = knuts\n\n    def __str__(self):\n        return f\"{self.galleons} Galleons, {self.sickles} Sickles, {self.knuts} Knuts\"\n\n    def __add__(self, other):\n        galleons = self.galleons + other.galleons\n        sickles = self.sickles + other.sickles\n        knuts = self.knuts + other.knuts\n        return Vault(galleons, sickles, knuts)\n\n\npotter = Vault(100, 50, 25)\nprint(potter)\n\nweasley = Vault(25, 50, 100)\nprint(weasley)\n\ntotal = potter + weasley\nprint(total)\n</code></pre> <p>Notice how the <code>__str__</code> method returns a formatted string. Further, notice how the <code>__add__</code> method allows for the addition of the values of two vaults. <code>self</code> is what is on the left of the <code>+</code> operand. <code>other</code> is what is right of the <code>+</code>.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of operator overloading.</p> </li> </ul>"},{"location":"CS/Python/lecture8-Object-oriented-programming/#summing-up","title":"Summing Up","text":"<p>Now, you\u2019ve learned a whole new level of capability through object-oriented programming.</p> <ul> <li>Object-oriented programming</li> <li>Classes</li> <li><code>raise</code></li> <li>Class Methods</li> <li>Static Methods</li> <li>Inheritance</li> <li>Operator Overloading</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/","title":"CS50P-Lecture9-et-cetera","text":""},{"location":"CS/Python/lecture9-et-cetera/#lecture-9","title":"Lecture 9","text":"<ul> <li>Et Cetera</li> <li><code>set</code></li> <li>Global Variables</li> <li>Constants</li> <li>Type Hints</li> <li>Docstrings</li> <li><code>argparse</code></li> <li>Unpacking</li> <li><code>args</code> and <code>kwargs</code></li> <li><code>map</code></li> <li>List Comprehensions</li> <li><code>filter</code></li> <li>Dictionary Comprehensions</li> <li><code>enumerate</code></li> <li>Generators and Iterators</li> <li>Congratulations!</li> <li>This was CS50!</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#et-cetera","title":"Et Cetera","text":"<ul> <li>Over the many past lessons, we have covered so much related to Python!</li> <li>In this lesson, we will be focusing upon many of the \u201cet cetera\u201d items not previously discussed. \u201cEt cetera\u201d literally means \u201cand the rest\u201d!</li> <li>Indeed, if you look at the Python documentation, you will find quite \u201cthe rest\u201d of other features.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#set","title":"<code>set</code>","text":"<ul> <li>In math, a set would be considered a set of numbers without any duplicates.</li> <li> <p>In the text editor window, code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n    {\"name\": \"Padma\", \"house\": \"Ravenclaw\"},\n]\n\nhouses = []\nfor student in students:\n    if student[\"house\"] not in houses:\n        houses.append(student[\"house\"])\n\nfor house in sorted(houses):\n    print(house)\n</code></pre> <p>Notice how we have a list of dictionaries, each being a student. An empty list called <code>houses</code> is created. We iterate through each <code>student</code> in <code>students</code>. If a student\u2019s <code>house</code> is not in <code>houses</code>, we append to our list of <code>houses</code>.</p> </li> <li> <p>It turns out we can use the built-in <code>set</code> features to eliminate duplicates.</p> </li> <li> <p>In the text editor window, code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n    {\"name\": \"Padma\", \"house\": \"Ravenclaw\"},\n]\n\nhouses = set()\nfor student in students:\n    houses.add(student[\"house\"])\n\nfor house in sorted(houses):\n    print(house)\n</code></pre> <p>Notice how no checking needs to be included to ensure there are no duplicates. The <code>set</code> object takes care of this for us automatically.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>set</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#global-variables","title":"Global Variables","text":"<ul> <li>In other programming languages, there is the notion of global variables that are accessible to any function.</li> <li> <p>We can leverage this ability within Python. In the text editor window, code as follows:</p> Text Only<pre><code>balance = 0\n\n\ndef main():\n    print(\"Balance:\", balance)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we create a global variable called <code>balance</code>, outside of any function.</p> </li> <li> <p>Since no errors are presented by executing the code above, you\u2019d think all is well. However, it is not! In the text editor window, code as follows:</p> Text Only<pre><code>balance = 0\n\n\ndef main():\n    print(\"Balance:\", balance)\n    deposit(100)\n    withdraw(50)\n    print(\"Balance:\", balance)\n\n\ndef deposit(n):\n    balance += n\n\n\ndef withdraw(n):\n    balance -= n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we now add the functionality to add and withdraw funds to and from <code>balance</code>. However, executing this code, we are presented with an error! We see an error called <code>UnboundLocalError</code>. You might be able to guess that, at least in the way we\u2019ve currently coded <code>balance</code> and our <code>deposit</code> and <code>withdraw</code> functions, we can\u2019t reassign it a value value inside a function.</p> </li> <li> <p>To interact with a global variable inside a function, the solution is to use the <code>global</code> keyword. In the text editor window, code as follows:</p> Text Only<pre><code>balance = 0\n\n\ndef main():\n    print(\"Balance:\", balance)\n    deposit(100)\n    withdraw(50)\n    print(\"Balance:\", balance)\n\n\ndef deposit(n):\n    global balance\n    balance += n\n\n\ndef withdraw(n):\n    global balance\n    balance -= n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how the <code>global</code> keyword tells each function that <code>balance</code> does not refer to a local variable: instead, it refers to the global variable we originally placed at the top of our code. Now, our code functions!</p> </li> <li> <p>Utilizing our powers from our experience with object-oriented programming, we can modify our code to use a class instead of a global variable. In the text editor window, code as follows:</p> Text Only<pre><code>class Account:\n    def __init__(self):\n        self._balance = 0\n\n    @property\n    def balance(self):\n        return self._balance\n\n    def deposit(self, n):\n        self._balance += n\n\n    def withdraw(self, n):\n        self._balance -= n\n\n\ndef main():\n    account = Account()\n    print(\"Balance:\", account.balance)\n    account.deposit(100)\n    account.withdraw(50)\n    print(\"Balance:\", account.balance)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we use <code>account = Account()</code> to create an account. Classes allow us to solve this issue of needing a global variable more cleanly because these instance variables are accessible to all the methods of this class utilizing <code>self</code>.</p> </li> <li> <p>Generally speaking, global variables should be used quite sparingly, if at all!</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#constants","title":"Constants","text":"<ul> <li>Some languages allow you to create variables that are unchangeable, called \u201cconstants\u201d. Constants allow one to program defensively and reduce the opportunities for important values to be altered.</li> <li> <p>In the text editor window, code as follows:</p> Text Only<pre><code>MEOWS = 3\n\nfor _ in range(MEOWS):\n    print(\"meow\")\n</code></pre> <p>Notice <code>MEOWS</code> is our constant in this case. Constants are typically denoted by capital variable names and are placed at the top of our code. Though this looks like a constant, in reality, Python actually has no mechanism to prevent us from changing that value within our code! Instead, you\u2019re on the honor system: if a variable name is written in all caps, just don\u2019t change it!</p> </li> <li> <p>One can create a class \u201cconstant\u201d, now in quotes because we know Python doesn\u2019t quite support \u201cconstants\u201d. In the text editor window, code as follows:</p> Text Only<pre><code>class Cat:\n    MEOWS = 3\n\n    def meow(self):\n        for _ in range(Cat.MEOWS):\n            print(\"meow\")\n\n\ncat = Cat()\ncat.meow()\n</code></pre> <p>Because <code>MEOWS</code> is defined outside of any particular class method, all of them have access to that value via <code>Cat.MEOWS</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#type-hints","title":"Type Hints","text":"<ul> <li>In other programming languages, one expresses explicitly what variable type you want to use.</li> <li>As we saw earlier in the course, Python does not require the explicit declaration of types.</li> <li>Nevertheless, it\u2019s good practice need to ensure all of your variables are of the right type.</li> <li><code>mypy</code> is a program that can help you test to make sure all your variables are of the right type.</li> <li>You can install <code>mypy</code> by executing in your terminal window: <code>pip install mypy</code>.</li> </ul> <p>In the text editor window, code as follows:</p> Text Only<pre><code>  def meow(n):\n      for _ in range(n):\n          print(\"meow\")\n\n\n  number = input(\"Number: \")\n  meow(number)\n</code></pre> <p>You may already see that <code>number = input(\"Number: )\"</code> returns a <code>string</code>, not an <code>int</code>. But <code>meow</code> will likely want an <code>int</code>!</p> <ul> <li> <p>A type hint can be added to give Python a hint of what type of variable <code>meow</code> should expect. In the text editor window, code as follows:</p> Text Only<pre><code>def meow(n: int):\n    for _ in range(n):\n        print(\"meow\")\n\n\nnumber = input(\"Number: \")\nmeow(number)\n</code></pre> <p>Notice, though, that our program still throws an error.</p> </li> <li> <p>After installing <code>mypy</code>, execute <code>mypy meows.py</code> in the terminal window. <code>mypy</code> will provide some guidance about how to fix this error.</p> </li> <li> <p>You can annotate all your variables. In the text editor window, code as follows:</p> Text Only<pre><code>def meow(n: int):\n    for _ in range(n):\n        print(\"meow\")\n\n\nnumber: int = input(\"Number: \")\nmeow(number)\n</code></pre> <p>Notice how <code>number</code> is now provided a type hint.</p> </li> <li> <p>Again, executing <code>mypy meows.py</code> in the terminal window provides much more specific feedback to you, the programmer.</p> </li> <li> <p>We can fix our final error by coding as follows:</p> Text Only<pre><code>def meow(n: int):\n    for _ in range(n):\n        print(\"meow\")\n\n\nnumber: int = int(input(\"Number: \"))\nmeow(number)\n</code></pre> <p>Notice how running <code>mypy</code> how produces no errors because cast our input as an integer.</p> </li> <li> <p>Let\u2019s introduce a new error by assuming that <code>meow</code> will return to us a string, or <code>str</code>. In the text editor window, code as follows:</p> Text Only<pre><code>def meow(n: int):\n    for _ in range(n):\n        print(\"meow\")\n\n\nnumber: int = int(input(\"Number: \"))\nmeows: str = meow(number)\nprint(meows)\n</code></pre> <p>Notice how the <code>meow</code> function has only a side effect. Because we only attempt to print \u201cmeow\u201d, not return a value, an error is thrown when we try to store the return value of <code>meow</code> in <code>meows</code>.</p> </li> <li> <p>We can further use type hints to check for errors, this time annotating the return values of functions. In the text editor window, code as follows:</p> Text Only<pre><code>def meow(n: int) -&gt; None:\n    for _ in range(n):\n        print(\"meow\")\n\n\nnumber: int = int(input(\"Number: \"))\nmeows: str = meow(number)\nprint(meows)\n</code></pre> <p>Notice how the notation <code>-&gt; None</code> tells <code>mypy</code> that there is no return value.</p> </li> <li> <p>We can modify our code to return a string if we wish:</p> Text Only<pre><code>def meow(n: int) -&gt; str:\n    return \"meow\\n\" * n\n\n\nnumber: int = int(input(\"Number: \"))\nmeows: str = meow(number)\nprint(meows, end=\"\")\n</code></pre> <p>Notice how we store in <code>meows</code> multiple <code>str</code>s. Running <code>mypy</code> produces no errors.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of Type Hints.</p> </li> <li>You can learn more about <code>mypy</code> through the program\u2019s own documentation.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#docstrings","title":"Docstrings","text":"<ul> <li> <p>A standard way of commenting your function\u2019s purpose is to use a docstring. In the text editor window, code as follows:</p> Text Only<pre><code>def meow(n):\n    \"\"\"Meow n times.\"\"\"\n    return \"meow\\n\" * n\n\n\nnumber = int(input(\"Number: \"))\nmeows = meow(number)\nprint(meows, end=\"\")\n</code></pre> <p>Notice how the three double quotes designate what the function does.</p> </li> <li> <p>You can use docstrings to standardize how you document the features of a function. In the text editor window, code as follows: s</p> Text Only<pre><code>def meow(n):\n    \"\"\"\n    Meow n times.\n\n    :param n: Number of times to meow\n    :type n: int\n    :raise TypeError: If n is not an int\n    :return: A string of n meows, one per line\n    :rtype: str\n    \"\"\"\n    return \"meow\\n\" * n\n\n\nnumber = int(input(\"Number: \"))\nmeows = meow(number)\nprint(meows, end=\"\")\n</code></pre> <p>Notice how multiple docstring arguments are included. For example, it describes the parameters taken by the function and what is returned by the function.</p> </li> <li> <p>Established tools, such as Sphinx, can be used to parse docstrings and automatically create documentation for us in the form of web pages and PDF files such that you can publish and share with others.</p> </li> <li>You can learn more in Python\u2019s documentation of docstrings.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#argparse","title":"<code>argparse</code>","text":"<ul> <li> <p>Suppose we want to use command-line arguments in our program. In the text editor window, code as follows:</p> Text Only<pre><code>import sys\n\nif len(sys.argv) == 1:\n    print(\"meow\")\nelif len(sys.argv) == 3 and sys.argv[1] == \"-n\":\n    n = int(sys.argv[2])\n    for _ in range(n):\n        print(\"meow\")\nelse:\n    print(\"usage: meows.py [-n NUMBER]\")\n</code></pre> <p>Notice how <code>sys</code> is imported, from which we get access to <code>sys.argv</code>\u2014an array of command-line arguments given to our program when run. We can use several <code>if</code> statements to check whether the use has run our program properly.</p> </li> <li> <p>Let\u2019s assume that this program will be getting much more complicated. How could we check all the arguments that could be inserted by the user? We might give up if we have more than a few command-line arguments!</p> </li> <li> <p>Luckily, <code>argparse</code> is a library that handles all the parsing of complicated strings of command-line arguments. In the text editor window, code as follows:</p> Text Only<pre><code>import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-n\")\nargs = parser.parse_args()\n\nfor _ in range(int(args.n)):\n    print(\"meow\")\n</code></pre> <p>Notice how <code>argparse</code> is imported instead of <code>sys</code>. An object called <code>parser</code> is created from an <code>ArgumentParser</code> class. That class\u2019s <code>add_argument</code> method is used to tell <code>argparse</code> what arguments we should expect from the user when they run our program. Finally, running the parser\u2019s <code>parse_args</code> method ensures that all of the arguments have been included properly by the user.</p> </li> <li> <p>We can also program more cleanly, such that our user can get some information about the proper usage of our code when they fail to use the program correctly. In the text editor window, code as follows:</p> Text Only<pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"Meow like a cat\")\nparser.add_argument(\"-n\", help=\"number of times to meow\")\nargs = parser.parse_args()\n\nfor _ in range(int(args.n)):\n    print(\"meow\")\n</code></pre> <p>Notice how the user is provided some documentation. Specifically, a <code>help</code> argument is provided. Now, if the user executes <code>python meows.py --help</code> or <code>-h</code>, the user will be presented with some clues about how to use this program.</p> </li> <li> <p>We can further improve this program. In the text editor window, code as follows:</p> Text Only<pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"Meow like a cat\")\nparser.add_argument(\"-n\", default=1, help=\"number of times to meow\", type=int)\nargs = parser.parse_args()\n\nfor _ in range(args.n):\n    print(\"meow\")\n</code></pre> <p>Notice how not only is help documentation included, but you can provide a <code>default</code> value when no arguments are provided by the user.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>argparse</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#unpacking","title":"Unpacking","text":"<ul> <li> <p>Would it not be nice to be able to split a single variable into two variables? In the text editor window, code as follows:</p> Text Only<pre><code>first, _ = input(\"What's your name? \").split(\" \")\nprint(f\"hello, {first}\")\n</code></pre> <p>Notice how this program tries to get a user\u2019s first name by naively splitting on a single space.</p> </li> <li> <p>It turns out there are other ways to unpack variables. You can write more powerful and elegant code by understanding how to unpack variables in seemingly more advanced ways. In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\nprint(total(100, 50, 25), \"Knuts\")\n</code></pre> <p>Notice how this returns the total value of Knuts.</p> </li> <li> <p>What if we wanted to store our coins in a list? In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\ncoins = [100, 50, 25]\n\nprint(total(coins[0], coins[1], coins[2]), \"Knuts\")\n</code></pre> <p>Notice how a list called <code>coins</code> is created. We can pass each value in by indexing using <code>0</code>, <code>1</code>, and so on.</p> </li> <li> <p>This is getting quite verbose. Wouldn\u2019t it be nice if we could simply pass the list of coins to our function?</p> </li> <li> <p>To enable the possibility of passing the entire list, we can use unpacking. In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\ncoins = [100, 50, 25]\n\nprint(total(*coins), \"Knuts\")\n</code></pre> <p>Notice how a <code>*</code> unpacks the sequence of the list of coins and passes in each of its individual elements to <code>total</code>.</p> </li> <li> <p>Suppose that we could pass in the names of the currency in any order? In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\nprint(total(galleons=100, sickles=50, knuts=25), \"Knuts\")\n</code></pre> <p>Notice how this still calculates correctly.</p> </li> <li> <p>When you start talking about \u201cnames\u201d and \u201cvalues,\u201d dictionaries might start coming to mind! You can implement this as a dictionary. In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\ncoins = {\"galleons\": 100, \"sickles\": 50, \"knuts\": 25}\n\nprint(total(coins[\"galleons\"], coins[\"sickles\"], coins[\"knuts\"]), \"Knuts\")\n</code></pre> <p>Notice how a dictionary called <code>coins</code> is provided. We can index into it using keys, such as \u201cgalleons\u201d or \u201csickles\u201d.</p> </li> <li> <p>Since the <code>total</code> function expects three arguments, we cannot pass in a dictionary. We can use unpacking to help with this. In the text editor window, code as follows:</p> Text Only<pre><code>def total(galleons, sickles, knuts):\n    return (galleons * 17 + sickles) * 29 + knuts\n\n\ncoins = {\"galleons\": 100, \"sickles\": 50, \"knuts\": 25}\n\nprint(total(**coins), \"Knuts\")\n</code></pre> <p>Notice how <code>**</code> allows you to unpack a dictionary. When unpacking a dictionary, it provides both the keys and values.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#args-and-kwargs","title":"<code>args</code> and <code>kwargs</code>","text":"<ul> <li> <p>Recall the <code>print</code> documentation we looked at earlier in this course:</p> Text Only<pre><code>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre> </li> <li> <p><code>args</code> are positional arguments, such as those we provide to print like <code>print(\"Hello\", \"World\")</code>.</p> </li> <li><code>kwargs</code> are named arguments, or \u201ckeyword arguments\u201d, such as those we provide to print like <code>print(end=\"\")</code>.</li> <li> <p>As we see in the prototype for the <code>print</code> function above, we can tell our function to expect a presently unknown number positional arguments. We can also tell it to expect a presently unknown number of keyword arguments. In the text editor window, code as follows:</p> Text Only<pre><code>def f(*args, **kwargs):\n    print(\"Positional:\", args)\n\n\nf(100, 50, 25)\n</code></pre> <p>Notice how executing this code will be printed as positional arguments.</p> </li> <li> <p>We can even pass in named arguments. In the text editor window, code as follows:</p> Text Only<pre><code>def f(*args, **kwargs):\n    print(\"Named:\", kwargs)\n\n\nf(galleons=100, sickles=50, knuts=25)\n</code></pre> <p>Notice how the named values are provided in the form of a dictionary.</p> </li> <li> <p>Thinking about the <code>print</code> function above, you can see how <code>*objects</code> takes any number of positional arguments.</p> </li> <li>You can learn more in Python\u2019s documentation of <code>print</code>.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#map","title":"<code>map</code>","text":"<ul> <li>Early on, we began with procedural programming.</li> <li>We later revealed Python is an object oriented programming language.</li> <li> <p>We saw hints of functional programming, where functions have side effects without a return value. We can illustrate this in the text editor window, type <code>code yell.py</code> and code as follows:</p> Text Only<pre><code>def main():\n    yell(\"This is CS50\")\n\n\ndef yell(word):\n    print(word.upper())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how the <code>yell</code> function is simply yelled.</p> </li> <li> <p>Wouldn\u2019t it be nice to yell a list of unlimited words? Modify your code as follows:</p> Text Only<pre><code>def main():\n    yell([\"This\", \"is\", \"CS50\"])\n\n\ndef yell(words):\n    uppercased = []\n    for word in words:\n        uppercased.append(word.upper())\n    print(*uppercased)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice we accumulate the uppercase words, iterating over each of the words and uppercasing them. The uppercase list is printed utilizing the <code>*</code> to unpack it.</p> </li> <li> <p>Removing the brackets, we can pass the words in as arguments. In the text editor window, code as follows:</p> Text Only<pre><code>def main():\n    yell(\"This\", \"is\", \"CS50\")\n\n\ndef yell(*words):\n    uppercased = []\n    for word in words:\n        uppercased.append(word.upper())\n    print(*uppercased)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>*words</code> allows for many arguments to be taken by the function.</p> </li> <li> <p><code>map</code> allows you to map a function to a sequence of values. In practice, we can code as follows:</p> Text Only<pre><code>def main():\n    yell(\"This\", \"is\", \"CS50\")\n\n\ndef yell(*words):\n    uppercased = map(str.upper, words)\n    print(*uppercased)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>map</code> takes two arguments. First, it takes a function we want applied to every element of a list. Second, it takes that list itself, to which we\u2019ll apply the aforementioned function. Hence, all words in <code>words</code> will be handed to the <code>str.upper</code> function and returned to <code>uppercased</code>.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>map</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#list-comprehensions","title":"List Comprehensions","text":"<ul> <li>List comprehensions allow you to create a list on the fly in one elegant one-liner.</li> <li> <p>We can implement this in our code as follows:</p> Text Only<pre><code>def main():\n    yell(\"This\", \"is\", \"CS50\")\n\n\ndef yell(*words):\n    uppercased = [arg.upper() for arg in words]\n    print(*uppercased)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how instead of using <code>map</code>, we write a Python expression within square brackets. For each argument, <code>.upper</code> is applied to it.</p> </li> <li> <p>Taking this concept further, let\u2019s pivot toward another program.</p> </li> <li> <p>In the text editor window, type <code>code gryffindors.py</code> and code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n]\n\ngryffindors = []\nfor student in students:\n    if student[\"house\"] == \"Gryffindor\":\n        gryffindors.append(student[\"name\"])\n\nfor gryffindor in sorted(gryffindors):\n    print(gryffindor)\n</code></pre> <p>Notice we have a conditional while we\u2019re creating our list. If the student\u2019s house is Gryffindor, we append the student to the list of names. Finally, we print all the names.</p> </li> <li> <p>More elegantly, we can simplify this code with a list comprehension as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n]\n\ngryffindors = [\n    student[\"name\"] for student in students if student[\"house\"] == \"Gryffindor\"\n]\n\nfor gryffindor in sorted(gryffindors):\n    print(gryffindor)\n</code></pre> <p>Notice how the list comprehension is on a single line!</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#filter","title":"<code>filter</code>","text":"<ul> <li>Using Python\u2019s <code>filter</code> function allows us to return a subset of a sequence for which a certain condition is true.</li> <li> <p>In the text editor window, code as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n]\n\n\ndef is_gryffindor(s):\n    return s[\"house\"] == \"Gryffindor\"\n\n\ngryffindors = filter(is_gryffindor, students)\n\nfor gryffindor in sorted(gryffindors, key=lambda s: s[\"name\"]):\n    print(gryffindor[\"name\"])\n</code></pre> <p>Notice how a function called <code>is_gryffindor</code> is created. This is our filtering function that will take a student <code>s</code>, and return <code>True</code> or <code>False</code> depending on whether the student\u2019s house is Gryffindor. You can see the new <code>filter</code> function takes two arguments. First, it takes the function that will be applied to each element in a sequence\u2014in this case, <code>is_gryffindor</code>. Second, it takes the sequence to which it will apply the filtering function\u2014in this case, <code>students</code>. In <code>gryffindors</code>, we should see only those students who are in Gryffindor.</p> </li> <li> <p><code>filter</code> can also use lambda functions as follows:</p> Text Only<pre><code>students = [\n    {\"name\": \"Hermione\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Harry\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Ron\", \"house\": \"Gryffindor\"},\n    {\"name\": \"Draco\", \"house\": \"Slytherin\"},\n]\n\n\ngryffindors = filter(lambda s: s[\"house\"] == \"Gryffindor\", students)\n\nfor gryffindor in sorted(gryffindors, key=lambda s: s[\"name\"]):\n    print(gryffindor[\"name\"])\n</code></pre> <p>Notice how the same list of students is provided.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>filter</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#dictionary-comprehensions","title":"Dictionary Comprehensions","text":"<ul> <li> <p>We can apply the same idea behind list comprehensions to dictionaries. In the text editor window, code as follows:</p> Text Only<pre><code>students = [\"Hermione\", \"Harry\", \"Ron\"]\n\ngryffindors = []\n\nfor student in students:\n    gryffindors.append({\"name\": student, \"house\": \"Gryffindor\"})\n\nprint(gryffindors)\n</code></pre> <p>Notice how this code doesn\u2019t (yet!) use any comprehensions. Instead, it follows the same paradigms we have seen before.</p> </li> <li> <p>We can now apply dictionary comprehensions by modifying our code as follows:</p> Text Only<pre><code>students = [\"Hermione\", \"Harry\", \"Ron\"]\n\ngryffindors = [{\"name\": student, \"house\": \"Gryffindor\"} for student in students]\n\nprint(gryffindors)\n</code></pre> <p>Notice how all the prior code is simplified into a single line where the structure of the dictionary is provided for each <code>student</code> in <code>students</code>.</p> </li> <li> <p>We can even simplify further as follows:</p> Text Only<pre><code>students = [\"Hermione\", \"Harry\", \"Ron\"]\n\ngryffindors = {student: \"Gryffindor\" for student in students}\n\nprint(gryffindors)\n</code></pre> <p>Notice how the dictionary will be constructed with key-value pairs.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#enumerate","title":"<code>enumerate</code>","text":"<ul> <li> <p>We may wish to provide some ranking of each student. In the text editor window, code as follows:</p> Text Only<pre><code>students = [\"Hermione\", \"Harry\", \"Ron\"]\n\nfor i in range(len(students)):\n    print(i + 1, students[i])\n</code></pre> <p>Notice how each student is enumerated when running this code.</p> </li> <li> <p>Utilizing enumeration, we can do the same:</p> Text Only<pre><code>students = [\"Hermione\", \"Harry\", \"Ron\"]\n\nfor i, student in enumerate(students):\n    print(i + 1, student)\n</code></pre> <p>Notice how enumerate presents the index and the value of each <code>student</code>.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of <code>enumerate</code>.</p> </li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#generators-and-iterators","title":"Generators and Iterators","text":"<ul> <li>In Python, there is a way to protect against your system running out of resources the problems they are addressing become too large.</li> <li>In the United States, it\u2019s customary to \u201ccount sheep\u201d in one\u2019s mind when one is having a hard time falling asleep.</li> <li> <p>In the text editor window, type <code>code sleep.py</code> and code as follows:</p> Text Only<pre><code>n = int(input(\"What's n? \"))\nfor i in range(n):\n    print(\"\ud83d\udc11\" * i)\n</code></pre> <p>Notice how this program will count the number of sheep you ask of it.</p> </li> <li> <p>We can make our program more sophisticated by adding a <code>main</code> function by coding as follows:</p> Text Only<pre><code>def main():\n    n = int(input(\"What's n? \"))\n    for i in range(n):\n        print(\"\ud83d\udc11\" * i)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how a <code>main</code> function is provided.</p> </li> <li> <p>We have been getting into the habit of abstracting away parts of our code.</p> </li> <li> <p>We can call a sheep function by modifying our code as follows:</p> Text Only<pre><code>def main():\n    n = int(input(\"What's n? \"))\n    for i in range(n):\n        print(sheep(i))\n\n\ndef sheep(n):\n    return \"\ud83d\udc11\" * n\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how the <code>main</code> function does the iteration.</p> </li> <li> <p>We can provide the <code>sheep</code> function more abilities. In the text editor window, code as follows:</p> Text Only<pre><code>def main():\n    n = int(input(\"What's n? \"))\n    for s in sheep(n):\n        print(s)\n\n\ndef sheep(n):\n    flock = []\n    for i in range(n):\n        flock.append(\"\ud83d\udc11\" * i)\n    return flock\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how we create a flock of sheep and return the <code>flock</code>.</p> </li> <li> <p>Executing our code, you might try different numbers of sheep such as <code>10</code>, <code>1000</code>, and <code>10000</code>. What if you asked for <code>1000000</code> sheep, your program might completely hang or crash. Because you have attempted to generate a massive list of sheep, your computer may be struggling to complete the computation.</p> </li> <li> <p>The <code>yield</code> generator can solve this problem by returning a small bit of the results at a time. In the text editor window, code as follows:</p> Text Only<pre><code>def main():\n    n = int(input(\"What's n? \"))\n    for s in sheep(n):\n        print(s)\n\n\ndef sheep(n):\n    for i in range(n):\n        yield \"\ud83d\udc11\" * i\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice how <code>yield</code> provides only one value at a time while the <code>for</code> loop keeps working.</p> </li> <li> <p>You can learn more in Python\u2019s documentation of generators.</p> </li> <li>You can learn more in Python\u2019s documentation of iterators.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#congratulations","title":"Congratulations!","text":"<ul> <li>As you exit from this course, you have more of a mental model and toolbox to address programming-related problems.</li> <li>First, you learned about functions and variables.</li> <li>Second, you learned about conditionals.</li> <li>Third, you learned about loops.</li> <li>Fourth, you learned about exceptions.</li> <li>Fifth, you learned about libraries.</li> <li>Sixth, you learned about unit tests.</li> <li>Seventh, you learned about file I/O.</li> <li>Eighth, you learned about regular expressions.</li> <li>Most recently, you learned about object-oriented programming.</li> <li>Today, you learned about many other tools you can use.</li> </ul>"},{"location":"CS/Python/lecture9-et-cetera/#this-was-cs50","title":"This was CS50!","text":"<ul> <li> <p>Creating a final program together, type <code>code say.py</code> in your terminal window and code as follows:</p> Text Only<pre><code>import cowsay\nimport pyttsx3\n\nengine = pyttsx3.init()\nthis = input(\"What's this? \")\ncowsay.cow(this)\nengine.say(this)\nengine.runAndWait()\n</code></pre> <p>Notice how running this program provides you with a spirited send-off.</p> </li> <li> <p>Our great hope is that you will use what you learned in this course to address real problems in the world, making our globe a better place.</p> </li> <li>This was CS50!</li> </ul>"},{"location":"CS/Regex/RegexBuddy-tutorial/","title":"Regex-Buddy\u6559\u7a0b","text":""},{"location":"CS/Regex/RegexBuddy-tutorial/#_1","title":"\u603b\u7ed3\uff1a\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u5f02\u540c","text":"\u542b\u4e49 \u76f8\u540c\u70b9 \u4e0d\u540c\u70b9(python/Java/JS/Ruby/Perl/.net) Metacharacter <code>.</code> any single character <code>a|b</code> a or b <code>\\s</code> space(<code>\\r\\n\\t\\</code>) <code>\\S</code> any non-whitespace character <code>\\d</code> any single number([0-9]) <code>\\D</code> negation of \\d <code>\\w</code> alphanumeric <code>\\W</code> negation of \\w <code>\\X</code> Any unicode sequences, linebreaks included <code>\\R</code> unicode newlines <code>\\N</code> new line <code>\\v</code> vertical whitespace character <code>\\V</code> negation of \\v <code>\\h</code> horizontal whitespace character <code>\\H</code> negation of \\h Anchors <code>^</code> start of string\uff08\u6bcf\u4e00\u884c\u5b57\u7b26\u5f00\u5934\u90fd\u5339\u914d\uff09 <code>$</code> end of string (\u6bcf\u4e00\u884c\u672b\u5c3e\u90fd\u5339\u914d) <code>\\A</code> start of string\uff08\u53ea\u5339\u914d\u8fd9\u5927\u6bb5\u6587\u5b57\u5f00\u5934\uff09 <code>\\Z</code> end of string\uff08\u53ea\u5339\u914d\u5927\u6bb5\u6587\u5b57\u7ed3\u5c3e\uff09 <code>\\z</code> absolute end of string <code>\\b</code> a word boundary \uff08alphanumeric \u4e24\u8fb9\uff0cie.<code>[a-zA-Z0-9_]</code>\uff09 <code>\\B</code> Non-word boundary Quantifiers <code>*</code> equal to<code>{0,}</code>lazy mode: <code>*?</code> <code>+</code> equal to<code>{1,}</code>laze mode: <code>+?</code> <code>?</code> equal to <code>{0,1}</code> <code>{m}</code> exactly m times <code>{m,n}</code> bet m and n <code>{m,}</code> at least m times <code>{,n}</code> at most n times Character Classes <code>[abc]</code> <code>[^abc]</code> not a or b or c <code>[a-z]</code> a character in the range:a-z <code>[^a-z]</code> a character not in the range:a-z Group Constructs capture everything enclosed <code>(...)</code> atomic group(non-capturing) <code>(?&gt;...)</code> comment group <code>(?#...)</code> named capturing group <code>(?&lt;name&gt;...)</code> positive lookahead <code>(?=...)</code> negative lookahead <code>(?!...)</code> positive lookbehind <code>(?&lt;=...)</code> negative lookbehind <code>(?&lt;!...)</code> Flags/Modifiers <code>g</code> Global <code>m</code> Multiline <code>i</code> Case insensitive <code>x</code> Ignore whitespace/verbose <code>s</code> Single line <code>u</code> Unicode <code>U</code> ungreedy <code>n</code> Non-capturing groups Substitution <code>$1</code> Contents in capture Group1 Python/ JS use <code>\\1</code>Perl use <code>$</code>.Net us <code>match.Groups(1)</code> <code>$0</code> Complete match contents <code>${foo}</code> Contents in capture group foo <code>\\t</code> Insert a tab <code>\\r</code> Insert a carriage return <code>\\n</code> insert a new line <code>\\f</code> insert a form feed <code>\\U</code> uppercase transformation\uff0c\u901a\u5e38\u642d\u914d<code>\\E</code>\u4ee5\u6807\u6ce8 \u8f6c\u6362\u622a\u6b62\u4f4d\u7f6e Python \u4e0d\u652f\u6301\u8f6c\u6362 <code>\\L</code> lowercase transformation Python \u4e0d\u652f\u6301\u8f6c\u6362 <code>\\E</code> terminate \\L or \\U conversion Python \u4e0d\u652f\u6301\u8f6c\u6362 <p>\u6765\u6e90\uff1ahttps://regex101.com/</p>"},{"location":"CS/Regex/RegexBuddy-tutorial/#insert-token","title":"Insert token","text":"<p>\u4efb\u4f55\u65f6\u5019\uff0c\u5982\u679c\u4e0d\u8bb0\u5f97\u5bf9\u5e94\u7684 \u5b57\u7b26\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u5728pattern \u7f16\u8f91\u754c\u9762\uff08\u7ea2\u6846\u91cc\uff09\u53f3\u952e\uff0c\u5c31\u80fd\u663e\u793a</p> <p><code>Insert token</code></p> <p></p>"},{"location":"CS/Regex/RegexBuddy-tutorial/#find-and-replace","title":"Find and replace","text":"<p>\u6309\u7167\u56fe\u4e2d\u64cd\u4f5c\uff0c\u4f9d\u6b21\u70b9\u51fb\u3002</p> <p>\u5f53\u7136\u4efb\u4f55\u65f6\u5019\u5bf9regex pattern \u4e0d\u7406\u89e3\uff0c\u53ef\u4ee5\u70b9\u51fb create \u6309\u94ae\uff0c\u5176\u4e2d\u6709\u8be6\u7ec6\u7684\u89e3\u91ca\u3002</p> <p></p>"},{"location":"CS/Regex/RegexBuddy-tutorial/#split","title":"Split","text":"<p>\u8fd9\u4e2a\u6709\u70b9\u50cfExcel \u4e2d\u5206\u5217\uff0c\u6216\u8005 Python \u4e2d\uff0c\u901a\u8fc7\u7279\u5b9a\u7684\u5b57\u7b26\uff08\u7a7a\u683c\u6216\u8005\u9017\u53f7\u7b49\uff09\u4f5c\u4e3a\u5206\u9694\u7b26\u53f7</p> <p>\u6ce8\u610f\uff0cpattern \u4e2d\u8f93\u5165\u7684\u662f\u5206\u9694\u7b26\uff0c\u800c\u4e0b\u65b9 test \u6846\u4e2d\u8f93\u5165\u5f85\u5206\u9694\u7684\u5b57\u7b26\u4e32\u2014\u20141,2,3,4,5\u3002</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/","title":"\u6b63\u5219\u8868\u8fbe\u5f0fCheatSheet","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#_1","title":"\u7075\u611f\u6765\u6e90","text":"<p>1\u3001regex library:https://www.regexlib.com/DisplayPatterns.aspx</p> <p>2\u3001the Regular expression cookbook\uff0c\u6211\u8fd9\u4e2a cheatsheet \u5927\u7eb2\u5c31\u662f\u53c2\u8003 cookbook \u76ee\u5f55\u5199\u7684</p> <p>3\u3001Regular Expressions info:https://www.regular-expressions.info/examples.html</p> <p>4\u3001BBEdit 15.2 Manual</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#validating-and-formatting","title":"Validating and formatting","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#email","title":"Email \u63d0\u53d6","text":"<p>\u60c5\u666f\u63cf\u8ff0\uff1a</p> <p>Check email \u5730\u5740\u662f\u5426\u7b26\u5408\u6ce8\u518c\u89c4\u8303\u3002</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> Python<pre><code>r\"\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b\"\n</code></pre>"},{"location":"CS/Regex/regex-cheatsheet-examples/#password-complexity","title":"password complexity","text":"<p>ID card</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#phone-numbers","title":"Phone numbers","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#ip-address","title":"ip address","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#credit-card-numbers","title":"Credit card Numbers","text":"<p>CS50x Week 1 \u6709\u4e2a C \u8bed\u8a00\u7684\u95ee\u9898\u633a\u6709\u8da3\uff0c\u53ef\u4ee5\u7528Regex \u89e3\u51b3</p> <p>https://cs50.harvard.edu/x/2024/psets/1/credit/</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#words-lines-and-special-characters","title":"Words, lines and special Characters","text":"<p>\u6587\u6863\u53bb\u6389\u591a\u884c</p> <p>\u95ee\u9898\uff1a\u5178\u578b\u7684\u8981\u53bb\u6389\u7a7a\u884c\u7684\u5b57\u7b26\u4e32\u662f\u8fd9\u6837\u7684\uff0c\u901a\u5e38 word \u4e2d\u4e5f\u5f88\u96be\u5904\u7406</p> <p></p> <p>\u67e5\u8be2\u591a\u884c\u7684pattern:</p> <p><code>^\\s*\\n\\s*\\n</code></p> <p>\u5982\u679c\u6709\u4e09\u884c\uff0c\u518d\u6dfb\u52a0\u4e00\u4e2a<code>\\s*\\n</code></p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_2","title":"\u6307\u5b9a\u82f1\u6587\u5355\u8bcd\u7b80\u5199\u6216\u8005\u5168\u79f0","text":"<p>\u60c5\u666f\u63cf\u8ff0\uff1a</p> <p>\u628a\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5404\u79cd\u8868\u8fbe\u90fd\u68c0\u7d22\u51fa\u6765\uff0c\u5305\u62ec\uff1a</p> <p>regular expression</p> <p>regular expressions</p> <p>regex</p> <p>regexp</p> <p>Regexes</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> Text Only<pre><code>r\"reg(ular expressions?|ex(p|es)?)\"\n</code></pre> <p>\u8fd8\u6709\u5bf9\u4e8e\u5fd8\u8bb0\u5355\u8bcd\u62fc\u5199\uff0c\u8fd9\u4e2a\u4e5f\u5f88\u6709\u7528</p> <p>Seperate separate \u6216\u8005 seperete\uff0c\u6709\u65f6\u5019\u4e0d\u77e5\u662f\u54ea\u4e2a\u5355\u8bcd\uff0c\u53ef\u4ee5\u4e00\u952e\u66ff\u6362\u3002\u7528\u4e0b\u5217\u516c\u5f0f\u53ef\u4ee5\u5168\u90e8\u63d0\u53d6\u51fa\u6765</p> <p><code>sep[ae]r[ae]te</code></p> <p>\u5982\u679c\u5355\u8bcd\u4e2d\u5927\u5c0f\u5199\u4e0d\u7edf\u4e00\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e0a\u3002</p> <p><code>[Ss]mith</code>\uff0c \u8fd9\u6837\u7684 pattern, smith \u548c blachsmith \u90fd\u6ee1\u8db3\u8981\u6c42\u3002</p> <p><code>[Cc]heng\\s?[Yy]ong</code> \uff0c\u4e2d\u95f4\\s? \u610f\u601d\u662f\u4e0d\u7ba1\u4e2d\u95f4\u6709\u6ca1\u6709\u7a7a\u683c\u90fd\u5339\u914d\u3002</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_3","title":"\u5339\u914d\u4e00\u4e2a\u5143\u97f3\u6216\u8005\u8f85\u97f3","text":"Python<pre><code># in python using regex module rather than re module\nimport regex\n\n# https://stackoverflow.com/questions/28783146/intersection-of-two-regex-classes\n# \u6839\u636e\u4e0a\u9762stackoverflow\u7684\u56de\u7b54\uff0c\u7ec8\u4e8e\u77e5\u9053Regex module\u4e2d\u7528\u6cd5\u4e86\n\n# intersection\ns = regex.findall(\"[[a-z]&amp;&amp;[^aeiou]]\",\"I have a dream\",regex.VERSION1) # to find consonant in the string\nprint(s)\n\n# subtraction or difference\ns1 = regex.findall(\"[[a-z]--[aeiou]]\",\"I have a dream\",regex.VERSION1) # to find consonant in the string\nprint(s1)\n\n# symmetric difference\ns2 = regex.findall(\"[[a-e]~~[c-f]]\",\"I have a dream of going to U.S.\",regex.VERSION1) #to find a b and f in the string\nprint(s2)\n\n# Union\ns3 = regex.findall(\"[[ae]||[iou]]\",\"I have a dream of going to U.S.\",regex.VERSION1) #to find vowel in the string\nprint(s3)\n</code></pre> <p>\u6216\u8005\u91c7\u7528 Regex Solver</p> Text Only<pre><code># intersection using Regex Solver\n# refer to https://docs.regexsolver.com/overview.html\nfrom regexsolver import RegexSolver, Term\n\nterm1 = Term.regex(r\"[a-z]\")\nterm2 = Term.regex(r\"[aeiou]\")\n\n# gen all consonants using subtraction\nresult1 = term1.subtraction(term2)\nresult2 = term1.intersection(term2)\nresult3 = term1.union(term2)\nresult4 = term1.is_subset_of(term2)\nprint(result1)\nprint(result2)\nprint(result3)\nprint(result4)\n</code></pre> <p>Result:</p> Markdown<pre><code>regex=[b-df-hj-np-tv-z]\nregex=[aeiou]\nregex=[a-z]\nFalse\n</code></pre>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_4","title":"\u5143\u97f3+\u5143\u97f3 \u5e26\u6765\u52a0\u97f3\u7684\u60c5\u51b5","text":"Text Only<pre><code>\\b\\w*[aeiou]\\s[aeiou]\\w*\\b\n</code></pre>"},{"location":"CS/Regex/regex-cheatsheet-examples/#l","title":"\u5bfb\u627e L \u7ed3\u5c3e\uff0c\u4e0b\u4e00\u53e5\u5f00\u5934\u662f\u5143\u97f3\u7684\u8bcd\u7ec4\uff1a","text":"<p>\u7075\u611f\u6765\u81ea\u674e\u7b11\u6765\uff1a</p> <p>\u8fd9\u4e9b\u5e74\u6512\u4e86\u51e0\u767e\u672c\u6709\u58f0\u4e66\uff0c\u6709\u4e86 whisper\uff0c\u5c31\u7ed9\u5b83\u4eec\u90fd\u505a\u4e86\u4e00\u904d srt\uff0c\u7136\u540e\u5c31\u6210\u4e86\u201c\u8bed\u97f3\u8bed\u6599\u5e93\u201d\u2014\u2014\u9700\u8981\u627e\u4ec0\u4e48\u4f8b\u5b50\u7684\u65f6\u5019\uff0c\u8dd1\u4e2a\u811a\u672c\u5c31\u80fd\u627e\u5230\u8bed\u97f3\u4f8b\u53e5\u3002\u6bd4\u5982\uff0c\u60f3\u8981\u627e\u201c\u97f3\u7ed3\u5c3e\u7684\u5355\u8bcd\u4e8e\u5176\u540e\u5143\u97f3\u5f00\u5934\u7684\u5355\u8bcd\u8fde\u8bfb\uff0c\u5c31\u641c\u7d22 <code>\\b\\w*(I|le)\\b\\s[aoiue]\\w*</code></p> <p>\u5ef6\u4f38\uff1a</p> <p>\u540c\u6837\u7684\uff0c\u5173\u4e8estop sound, \u5143\u97f3+\u5143\u97f3\u9020\u6210\u7684\u52a0\u97f3\uff0c\u8f85\u97f3+\u5143\u97f3\uff0c\u8f85\u97f3+\u8f85\u97f3\uff08\u9996\u5c3e\u76f8\u540c\uff09\u7b49\u90fd\u53ef\u4ee5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8868\u793a\u3002</p> <p>stop sound + \u8f85\u97f3\u5f00\u5934\uff0c\u662f\u8981stop\u7684\uff1bstop sound+\u5143\u97f3\u5f00\u5934\uff0c\u662f\u8981\u8fde\u8bfb\u7684\u3002 stop sound \u53e5\u5c3e\u65e0\u975e\u662f t d k b p f \u8fd9\u4e9b\uff0c\u4e0b\u4e00\u53e5\u8f85\u97f3\u5f00\u5934\u6700\u597dnegate\uff0c\u56e0\u4e3a\u8f85\u97f3\u592a\u591a\u4e86\u3002 \u5927\u6982\u5c31\u662f</p> <p><code>\\b\\w*[tdkbpf]\\b\\s[^aeiou]\\w*\\b</code></p> <p>\u8fd9\u4e2a\u8fd8\u6ca1\u6709\u5b9e\u6218\u4e2d\u5c1d\u8bd5\uff0c\u5f53\u7136\u53ef\u80fd\u4f1amiss\u4e00\u4e9b\u4f8b\u5b50 \u4e0d\u8fc7\u591f\u7528\u4e86\u3002</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#first-namelast-name","title":"\u5c06first name\u548clast name\u5012\u8fc7\u6765","text":"<p>\u77e5\u8bc6\u70b9\uff1a\u7528capturing group</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#microsoft-word","title":"Microsoft Word\u4e2d \u7528\u901a\u914d\u7b26\u6765\u66ff\u6362","text":"<p>20241017 \u66f4\u65b0</p> <p>\u80cc\u666f\uff1a\u7528 ChatGPT \u7684 GPT \u6765\u751f\u6210 Company Analyzer \u7684\u65f6\u5019\uff0c\u4e0d\u5fc5\u8981\u7684\u4f1a\u4ea7\u751f\u4e00\u4e9b\u591a\u4f59\u7684\u6587\u7ae0\u6765\u6e90\uff0c\u7c98\u8d34\u5230 Word \u4e2d\uff0c\u9700\u8981\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u53bb\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u90e8\u5206\uff08\u7f51\u9875\u94fe\u63a5\u3001\u6570\u636e\u6765\u6e90\u7b49\uff09\u3002</p> <p><code>\u3010([0-9])\u3011</code> \u53ef\u4ee5\u7528\u6765\u66ff\u6362 Word \u6587\u6863\u4e2d\uff0c\u591a\u4f59\u7684\u201c\u30106\u3011\u201d\u7b49\u8fd9\u6837\u7684\u5e8f\u53f7\u6bb5\u3002</p> <p><code>\u3010([0-9]{1,})\u2020[A-z]{1,}\u3011</code>\u53ef\u4ee5\u67e5\u627e\u5230\u7c7b\u4f3c\u4e8e\u8fd9\u6837\u7684\u5b57\u6bb5\uff1a\u201c\u301049\u2020source\u3011\u201d</p> <p>Microsoft  Excel \u4e2d\uff0c\u53ef\u4ee5\u7528 <code>~*</code>\u6765\u5339\u914d <code>*</code>\u8fd9\u4e2a\u7279\u6b8a\u5b57\u7b26\uff08\u4e00\u5b9a\u8981\u6ce8\u610f\u5728\u82f1\u6587\u952e\u76d8\u4e0b\u8f93\u5165<code>~</code>\uff09\uff0c\u56e0\u4e3a\u5728 Excel \u4e2d\uff0c<code>*</code>\u7528\u4e8e\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u3002</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#numbers","title":"Numbers","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#_5","title":"\u6587\u4ef6\u540d\u4e2d\u63d0\u53d6\u65e5\u671f","text":"<p>\u60c5\u666f\u63cf\u8ff0\uff1a\u3010\u5df2\u7b7e\u7f72\u7559\u6863\u301120210910 \u6caa\u5146\u82af\u80a12021\uff086\uff09\u53f7-\u6295\u8d44\u5317\u4eac\u3001\u897f\u5b89\u3001\u9999\u6e2f+\u589e\u8d44\u8d44\u4ea7\u8bc4\u4f30.pdf\uff0c\u5728\u8fd9\u4e2a\u6587\u4ef6\u540d\u4e2d\uff0c\u53ea\u63d0\u53d6 20210910\uff0c\u800c\u53bb\u6389 2021\uff086\uff09</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> Text Only<pre><code>r\"\\b\\d{6,}\\b\" #\u5373\u4f7f\u5de6\u53f3\u4e24\u8fb9\u6709\u5b57\u7b26\u6216\u8005\u5176\u4ed6\u6c49\u5b57\u3001\u4e2d\u6587\u7b26\u53f7\u7b49\uff0c\u4e5f\u53ef\u4ee5\u6210\u529f\u63d0\u53d6\u6570\u5b57\n</code></pre> <p>\u4f46\u662f\u4e4b\u524d\u5c1d\u8bd5<code>^\\d{6,}$</code>\u5931\u8d25\u4e86\uff0c\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u5b83\u53ea\u9002\u5408\u524d\u540e\u90fd\u6ca1\u6709\u5b57\u7b26\u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u73b0\u5728 WPS Excel \u4e5f\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u63d0\u53d6\u65e5\u671f\u51fd\u6570\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_6","title":"\u5341\u516d\u8fdb\u5236\u6570\u5b57","text":"<p><code>[A-Fa-f0-9]</code> \u6216\u8005[\\da-fA-F]</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_7","title":"\u9690\u53bb\u8eab\u4efd\u8bc1\u53f7\u3001\u7535\u8bdd\u53f7\u7801\u82e5\u5e72\u4f4d","text":"<p>917-567-1234 646-768-2548 212-222-5851 0712-130-4576</p> <p>\\d{3,4}[.-]\\d{3}[.-]\\d{4} \u53ea\u80fd\u5339\u914d\u524d\u4e24\u4e2a\u7535\u8bdd (?\\d{3,4}[-.)]\\d{3}[-.]?\\d{4} \u80fd\u5339\u914d\u6240\u6709\u7684\u53f7\u7801</p> <p>\u5728\u7b2c\u4e8c\u4e2a pattern \u57fa\u7840\u4e0a\uff0c\u6211\u60f3\u8981\u6355\u83b7\u7b2c\u4e00\u7ec4 917 646 \u6216\u8005 212 \u6216\u8005 0712\uff0c\u540e\u9762 7 \u4f4d\u6570\u5b57\u53d8\u6210 -xxx-xxxx \u53ef\u4ee5\u7528 captured group</p> <p>Text Only<pre><code>Search: \\(?(\\d{3,4})[-.)]\\d{3}[-.]?\\d{4}\nrepalce: \\1-xxx-xxxx\n</code></pre> \u6210\u529f\u5c06\u5982\u4e0a\u7684\u7535\u8bdd\u53f7\u7801\u53d8\u4e3a\u53ea\u663e\u793a\u533a\u53f7\u7684\u9690\u85cf\u53f7\u7801\u3002 917-xxx-xxxx 646-xxx-xxxx 212-xxx-xxxx 0712-xxx-xxxx</p> <p>\u6559\u7a0b\u89c1 \u300aBBEdit 15.1.2 Manual\u300b P212 </p> <p>\u6ce8\uff1aTypora \u672c\u8eab\u4e5f\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f numbered group</p> <p>\u7528<code>$1-$2-****</code>\u547d\u4ee4\u53ef\u4ee5\u66ff\u6362\u6210\u529f\uff0c\u7528<code>/1</code>\u663e\u793a\u4e0d\u6210\u529f\u3002</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_8","title":"\u5339\u914d\u6570\u5b57\u7ec3\u4e60","text":"<p>\u9898\u76ee\uff1a</p> Task Text match 3.14529 match -255.34 match 128 match 1.9e10 match 123,340.00 skip 720p Text Only<pre><code>-?\\d*,?\\d*\\.?\\d*e?\\d* # \u6ca1\u6709\u8fc7\u5173\n\n# \u7b54\u6848\u662f\n^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$\n</code></pre> <p>\u5dee\u5f02 1\uff1a(,\\d+)\uff0c\u7b54\u6848\u662f\u62ec\u8d77\u6765\u7684\uff0c\u4e5f\u5c31\u662f\u6709,\u5c31\u6709\u540e\u9762\u81f3\u5c11 1 \u4e2a\u6570\u5b57\u3002</p> <p>\u5dee\u5f02 2\uff1a\u540c\u7406\uff0c\u6709 e \u5c31\u6709\\d+\uff0c\u8fd9\u4e2a\u62ec\u8d77\u6765\u52a0\u4e0a?\uff0c\u4e5f\u5c31\u662f\u6709\u6216\u8005\u65e0</p> <p>\u5dee\u5f02 3\uff1a\u5c0f\u6570\u70b9\uff0c\u6709.\u5c31\u6709\u540e\u9762\u7684\\d\uff0c\u8fd9\u4e2a\u62ec\u8d77\u6765\u52a0\u4e0a?\uff0c\u4e5f\u5c31\u662f\u6709\u6216\u8005\u65e0\u3002\u6b64\u540e\u6ca1\u6709\u5176\u4ed6\u7684\u7b26\u53f7\u4e86\u3002</p> <p>\u8bf4\u660e\u6211\u8fd8\u662f\u592a\u5e74\u8f7b\uff0c\u9700\u8981\u591a\u7ec3\u4e60\uff0c\u89c1\u4e16\u9762\u3002</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#look-around","title":"look around \u63d0\u53d6\u6570\u5b57","text":"<p>\u8fd9\u91cc\u5229\u7528 negative lookbehind</p> <p>\u6ce8\u610f\u56db\u79cd\u8868\u8fbe\u65b9\u5f0f\u662f\u8fd9\u6837\u7684\uff1a</p> <p>positive lookahead </p> <p>negative lookahead</p> <p>positive lookbehind</p> <p>nagative lookbehind</p> <p>pattern: <code>\\b(?&lt;!\\$)\\d+\\b</code></p> <p>\u4e0b\u9762\u7684 pattern \u542b\u4e49\uff0c\u662f\u53ea\u6392\u9664\u7c7b\u4f3c\u4e8e<code>$xx</code> \u8fd9\u6837\u7684\u7ec4\u5408\uff0c<code>xx$</code>\u662f\u6ee1\u8db3 regex \u8981\u6c42\u7684\u3002</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#souce-code","title":"Souce code","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#python-comment","title":"\u6279\u91cf\u63d0\u53d6Python \u7a0b\u5e8f\u4e2dcomment","text":"<p>\u77e5\u8bc6\u70b9\uff1a\u7528 multi-line mode\uff0c\u7ed3\u5408^\u548c$</p> Python<pre><code>r\"(?m)^#\\s*.*?$\"\n</code></pre> <p>String\uff1a</p> Text Only<pre><code># a code that implements the same function as hello_jack.c\nname = input(\"What's your name?\")\n\n# \u9ed8\u8ba4\u5728\u5b57\u7b26\u4e32\u95f4\u52a0\u4e0a\u7a7a\u683c\nprint(\"hello,\", name) \nprint(\"hello,\",name, sep=\"?\")\n\n#\u548c\u4e0a\u9762\u8f93\u51fa\u5f62\u5f0f\u7b49\u6548\nprint(f\"hello, {name}\") \nprint(\"hello, \"+ name) \n</code></pre> <p>Matched Result\uff1a</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#a-code-that-implements-the-same-function-as-hello_jackc","title":"a code that implements the same function as hello_jack.c","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#_9","title":"\u9ed8\u8ba4\u5728\u5b57\u7b26\u4e32\u95f4\u52a0\u4e0a\u7a7a\u683c","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#_10","title":"\u548c\u4e0a\u9762\u8f93\u51fa\u5f62\u5f0f\u7b49\u6548","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#url-paths-and-internet-addresses","title":"URL, Paths and Internet Addresses","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#ip","title":"\u5339\u914d IP \u5730\u5740","text":"<p>\u2014\u2014\u66f4\u65b0\u4e8e 2024.9.4 \u6df1\u591c</p> <p>\u77e5\u8bc6\u70b9\uff1a</p> <ul> <li> <p>\u7528\u5230 subpattern\uff0c\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u7ed3\u5408 repetitor \u4e00\u8d77\u4f7f\u7528\u3002</p> </li> <li> <p>\u8fd8\u6709\u5c31\u662f OR \u7684\u51e0\u4e2a\u8868\u8fbe\u5f0f\u5148\u540e\u987a\u5e8f\u5f88\u91cd\u8981</p> </li> </ul> <p>\u5982\u679c\u662f\u8ba1\u7b97\u673a\u751f\u6210\u7684 IP \u5730\u5740\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b pattern \u5339\u914d:</p> Text Only<pre><code>(\\d{1,3}\\.){3}\\d{1,3}\n</code></pre> <p>192.168.1.200</p> <p>\u4f46\u5982\u679c\u662f\u7528\u6237\u8f93\u5165\u7684\u6570\u5b57\uff0c\u6211\u4eec\u8981 validate \u5176\u6709\u6548\u6027\uff0c\u6709\u53ef\u80fd\u51fa\u73b0 <code>192.300.268.500</code>\u8fd9\u6837\u7684\u6570\u5b57\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6bcf\u4e00\u4e2a\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 255\uff0c\u56e0\u6b64\u4e0a\u9762\u7684 pattern \u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u3002</p> <p>\u5206\u6790\uff1a0-255\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u7528 OR \u5339\u914d\u8d77\u6765</p> <p>0-99\uff0c100-199\uff1a\u767e\u4f4d\u662f0\u6216 1\uff0c\u5341\u4f4d\u548c\u4e2a\u4f4d\u90fd\u662f 0-9</p> <p>200-249\uff1a\u767e\u4f4d\u662f 2\uff0c\u5341\u4f4d\u6570\u662f 1-4\uff0c\u4e2a\u4f4d\u6570\u662f 0-9</p> <p>250-255\uff1a\u767e\u4f4d\u662f 2\uff0c\u5341\u4f4d\u6570\u662f 5\uff0c\u4e2a\u4f4d\u6570\u662f0-5</p> Python<pre><code># \u5339\u914d 0-255 \u7684\u6570\u5b57\uff0c\u6ce8\u610f\u4e3a\u4e86\u907f\u514d\u53ea\u5339\u914d 330 \u524d\u9762\u7684 33\uff0c\u8fd9\u91cc\u5728\u7b2c\u4e00\u4e2a\u91cc\u9762\u5de6\u53f3\u52a0\u5165\u4e86\n# \\b\uff0c\u4e5f\u5c31\u662f\u8bf4 330\uff0c\u4e0d\u7b26\u5408`\\b[0,1]?[0-9]?[0-9]\\b`\u7684 pattern\uff0c\\b \u4e0d\u5339\u914d\u6570\u5b57 0\n(\\b[0,1]?[0-9]?[0-9]\\b)|(2[0-4][0-9])|(25[0-5]) \n\n# complete pattern\n# \u6ce8\u610f\u8fd9\u91cc\u7684\u62ec\u53f7\u5c42\u7ea7\uff0c\u6709\u4e09\u5c42\u62ec\u53f7\uff0c\u7b2c\u4e8c\u5c42\u62ec\u53f7\uff0c\u662f\u4e3a\u4e86\u628a \u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\u7528 OR \u642d\u914d\u8d77\u6765\uff0c\u7136\u540e\u52a0\u4e0a\\.\uff0c\u7b2c\u4e09\u4e2a\u62ec\u53f7\u662f\u628a\u524d\u9762\u7684\u4e09\u79cd\u60c5\u51b5\uff0c\u52a0\u4e0a\\. \u8fd9\u4e2a\u5b57\u7b26\u4e32\u6574\u4f53\uff0c\u590d\u5236 3 \u4efd\u3002\n((([0,1]?[0-9]?[0-9])|(2[0-4][0-9])|(25[0-5]))\\.){3}(([0,1]?[0-9]?[0-9])|(2[0-4][0-9])|(25[0-5]))\n</code></pre> <p>Trouble Shooting\uff1a</p> <p>\u8fd9\u91cc\u6709\u4e2a bug\uff0c\u5c31\u662f 255.255.255.255\uff0c\u53ea\u80fd\u5339\u914d 255.255.255.25\uff0c\u6700\u540e\u4e00\u4e2a 5 \u6d88\u5931\u4e86\u3002</p> <p></p> <p>\u7b54\u6848\u5728\u4e8e OR \u7684\u4e09\u79cd\u60c5\u51b5\u7684\u5148\u540e\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u7531\u4e8e<code>([0,1]?[0-9]?[0-9])</code>\u8fd9\u4e2a\u516c\u5f0f\u6392\u5728\u7b2c\u4e00\u4f4d\uff0c\u90a3\u4e48 \u5339\u914d255 \u65f6\uff0c\u524d\u9762\u4e24\u4e2a\u5b57\u7b2625 \u5df2\u7ecf\u80fd\u591f\u6ee1\u8db3\u5339\u914d\u4e86\uff0c\u540e\u9762\u7684\u4e24\u79cd\u60c5\u51b5 regex engine \u81ea\u52a8\u5ffd\u7565\u4e86\u3002\u6240\u4ee5\u8981\u628a\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u5728OR\u6700\u540e\u3002</p> Text Only<pre><code># \u6539\u8fdb\u540e\u7684\u5339\u914d\n((2[0-4][0-9])|(25[0-5])|([0,1]?[0-9]?[0-9]))\n\n# \u6539\u8fdb\u540e\u7684 pattern\uff0c\u53ef\u80fd\u662f\u6211\u5199\u8fc7\u6700\u590d\u6742\u7684 regex pattern \u4e86\n(((2[0-4][0-9])|(25[0-5])|([0,1]?[0-9]?[0-9]))\\.){3}((2[0-4][0-9])|(25[0-5])|([0,1]?[0-9]?[0-9]))\n</code></pre> <p>\u641e\u5b9a\u4e86\uff1a</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#email-address","title":"Email address","text":"<p>Text to match:</p> <p>Hello, ben@forta.com is my email address.</p> <p>Regex Pattern\uff1a</p> <p>hint use capture groups and nested capture groups</p> <p><code>\\w</code></p> <p>replace:</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#markup-and-data-formats","title":"Markup and Data formats","text":"<p>markdown, html,xml, CSV, JSON</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#backreferences-html-h1h2","title":"\u7528 backreferences \u5339\u914d html \u4e2dH1\u3001H2 \u7b49\u7b49","text":"<p><code>r\"&lt;H[1-6]&gt;\"</code></p> <p>\u7528backreferences\uff1a</p> Python<pre><code>r\"&lt;([A-Z][A-Z0-9]*)\\b[^&gt;]*&gt;.*?&lt;/\\1&gt;\"\n</code></pre> <p>()\u8868\u793a\u4e00\u4e2a numbered captured group\uff0c</p> <p><code>[A-Z][A-Z0-9]*</code>\u5339\u914d\u4e00\u4e2a\u7c7b\u4f3c\u4e4e H1 \u7684 html tag\uff0c</p> <p><code>\\b</code>\u5339\u914d\u8bcd\u8bed\u7684 boundary\uff0c</p> <p><code>[^&gt;]*</code>\u8868\u793a\u4e2d\u95f4\u82e5\u5e72\u4e2a string\uff0c\u4e0d\u5b58\u5728<code>&gt;</code>\uff0c\u907f\u514d\u51fa\u73b0 \u5339\u914d\u4e86<code>&lt;EM&gt; this is a test &lt;/EM&gt;</code>\u8fd9\u6837\u4e00\u6574\u6bb5\u7684\u73b0\u8c61\u3002</p> <p><code>&gt;</code>literal text</p> <p><code>.*?</code> \u8868\u793a lazy *\uff0c\u5c3d\u91cf\u5c11\u7684\u5339\u914d\u5b57\u7b26\u3002</p> <p><code>&lt;/\\1&gt;</code>\u5176\u4e2d <code>&lt;/ &gt;</code> \u662f literal \uff0c<code>\\1</code>\u662f reference\u3002</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#markdown-html","title":"\u6279\u91cf\u8f6c\u6362\u56fe\u7247 markdown \u683c\u5f0f\u5230html \u683c\u5f0f","text":"<p>search:</p> Text Only<pre><code>!\\[([\\w-]*)\\]\\(([-\\w\\./]*)\\)(?#batch converting picture markdown format to html format)\n</code></pre> <p>replace:</p> Text Only<pre><code>&lt;img src=\"\\2\" alt=\"\\1\" /&gt;\n</code></pre>"},{"location":"CS/Regex/regex-cheatsheet-examples/#file-io","title":"File I/O","text":""},{"location":"CS/Regex/regex-cheatsheet-examples/#mac","title":"MAC \u4e0a\u641c\u7d22\u7279\u5b9a\u6587\u4ef6","text":"<p>\u5728 Mac Finder \u4e0a\u5bfb\u627e\u7279\u5b9a\u6587\u4ef6\uff1a</p> <p>https://support.apple.com/en-am/guide/mac-help/mh15155/mac</p> <p>\u65b9\u6cd5 1\uff1a\u7528 <code>AND</code> <code>OR</code> \u548c <code>NOT</code></p> <p>\u65b9\u6cd5 2\uff1a\u901a\u8fc7\u6dfb\u52a0\u6761\u4ef6 1\uff08name contain <code>\u5146\u82af</code>\uff09\u3001\u6761\u4ef6 2\uff08\u8b6c\u5982 file extension \u9009 <code>docx</code>\uff09\u3001\u7530\u95f4 3\uff08name contains <code>\u8bae\u4e8b\u89c4\u5219</code>\uff09</p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_11","title":"\u6279\u91cf\u91cd\u547d\u540d\u6587\u4ef6","text":"<p>Mac OS \u4e0a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u8f6f\u4ef6<code>NameChanger</code>\uff0c\u652f\u6301 prepend\u3001append\u3001Regular Expression\u3001Insert a sequence\u7b49\u591a\u79cd\u6a21\u5f0f</p> <p>prepend\uff1a\u5728\u4e4b\u524d\u7684\u6587\u4ef6\u540d<code>\u4e4b\u524d</code>\u57fa\u7840\u4e0a\u7edf\u4e00\u52a0\u4e0a\u6307\u5b9a\u6587\u5b57\uff0c\u8fd9\u4e2a\u5728\u6211\u5f52\u6863\u65f6\u5019\u7279\u522b\u6709\u7528\uff1b</p> <p>append\uff1a\u5728\u5f53\u524d\u7684\u6587\u4ef6\u540d<code>\u672b\u5c3e</code>\u6dfb\u52a0\u6307\u5b9a\u6587\u5b57\u3002</p> <p>\u8fd8\u6709\u4e2a\u66f4\u5389\u5bb3\u7684\uff0c\u5c31\u662f\u5229\u7528 Regular expression \u4e2d\u7684 backreferences\uff0c\u6539\u53d8\u6587\u4ef6\u540d\u4e2d\u5b57\u7b26\u4e32\u7684\u987a\u5e8f\uff0c\u8b6c\u5982\u539f\u6765\u662f<code>\u5146\u82af 2024 \u5e74\u80a1\u4e1c\u4f1a-20240325</code>\uff0c\u6211\u60f3\u91cd\u547d\u540d\u4e3a<code>20240325-\u5146\u82af 2024 \u5e74\u80a1\u4e1c\u4f1a</code>\u3002</p> <p>\u6838\u5fc3\u95ee\u9898\u662f\u5339\u914d\u6240\u6709\u4e2d\u6587\u5b57\u7b26\uff0c\u73b0\u5728 RegexBuddy \u4e0a\u6d4b\u8bd5 pattern</p> <p></p> <p>\u8fd9\u91cc\u6d4b\u8bd5\u6210\u529f\u4e86\uff0c\u5177\u4f53\u6765\u8bf4\uff1a</p> <p>match pattern\uff1a<code>([\u4e00-\u9f9f0-9]+)-(\\d+)</code></p> <p>\u8fd9\u91cc\u662f\u5229\u7528 backreferences\uff0c\u5c06<code>-</code>\u4e24\u8fb9\u7684\u6587\u4ef6\u540d\u5206\u522b\u7d22\u5f15\u4e3a<code>$1</code>\u3001<code>$2</code>\uff0c\u7136\u540e replace \u90e8\u5206\uff0c\u5012\u8fc7\u6765\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u6ce8\uff1a\u5177\u4f53\u4e2d\u95f4\u7684 literal text \u662f\u7a7a\u683c\u8fd8\u662f\u77ed\u6a2a\u6760\u53d6\u51b3\u4e8e\u5177\u4f53\u573a\u666f\uff0c\u4e24\u79cd\u90fd\u6709\uff0c\u5c31\u7528<code>-?\\s?</code> \u5339\u914d\u3002</p> <p>\u7136\u540e\uff0c\u5728 NameChanger \u4e2d\u6d4b\u8bd5\uff0c\u901a\u8fc7\u4e86\u3002</p> <p></p> <p>\u4ee5\u4e0b\u662f rename app \u4e2d\u7684\u5e2e\u52a9\u9875\uff1a</p> <p>Regular expressions provide great power and flexibility when it comes to matching strings.</p> <p>For each file in the table, NameChanger will find the first block of text that matches the given regular expression in the Original Text field and replace it with the text from the New Text field. If the regular expression does not match a particular file, that file will not be renamed. The Force Unique option can be used to prevent name collisions from the resulting name changes. To avoid changing file extensions, the Hide Extensions option can be used.</p> <p></p> <p>For back references use $1, $2, etc, to match the corresponding parenthesized grouping from the matching text. This is an excellent way to rearrange existing filenames.</p> <p></p> <p>\u6ce8\u610f\uff1a\u91cd\u547d\u540ddoc pdf md \u7b49\u6587\u6863\u7684\u65f6\u5019\uff0c\u6700\u597d\u628a\u540e\u7f00\u540d\u9690\u85cf\u6389\uff0c\u5728 Menu \u4e2d\u53bb\u627e\uff1a</p> <p></p>"},{"location":"CS/Regex/regex-cheatsheet-examples/#_12","title":"\u6a21\u7248","text":"<p>\u60c5\u666f\u63cf\u8ff0\uff1a</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/","title":"\u4e00\u3001\u5e2e\u52a9\u952e\u7b49","text":""},{"location":"CS/Shell%20/Shell_command_cookbook/#1","title":"1\u3001\u5e2e\u52a9\u952e","text":"<p><code>man ls</code> </p> <p>\u5982\u679c\u8981\u67e5\u770b\u793e\u533a\u5173\u4e8e\u8fd9\u4e2a\u547d\u4ee4\u7684\u7528\u4f8b\uff0c\u7528<code>tldr ls</code></p> <p>\u5982\u4f55\u66f4\u597d\u7684\u4f7f\u7528 tldr</p> <p>Basic Usage: <code>tldr &lt;command&gt;</code></p> <p>This will show a summary with the most common usage examples for the specified command, such as <code>tldr tar</code>.</p> <p>Search for Specific Options or Actions: You can use <code>tldr</code>'s search functionality if available in your installation: <code>tldr &lt;command&gt; | grep &lt;keyword&gt;</code></p> <p>This is useful if you\u2019re looking for a specific example, like: <code>tldr find | grep \"delete\"</code></p> <p>Update the Cache: To make sure you have the latest examples, update your <code>tldr</code> cache regularly: <code>tldr -u</code> \u6216\u8005 <code>tldr --update</code></p> <p>Use Aliases for Faster Access: You can create a shell alias to make calling <code>tldr</code> even faster. For example: <code>alias t=\"tldr\"</code> Now you can just type <code>t &lt;command&gt;</code> for the same result.</p> <p>List All Commands: If you want to browse all available commands supported by <code>tldr</code>, use: <code>tldr --list</code></p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#2-autojump","title":"2\u3001\u8bbf\u95ee\u5e38\u7528\u7684\u547d\u4ee4 <code>autojump</code>","text":"<ul> <li> <ol> <li>Basic Usage:</li> </ol> Text Only<pre><code>j &lt;directory_name&gt;\n</code></pre> <p>Instead of typing the full path, just use <code>j</code> followed by a keyword related to the directory. <code>autojump</code> will take you there if it\u2019s a frequently visited path.</p> <p>For example:</p> Text Only<pre><code>j projects\n</code></pre> <p>This will take you to a directory with \"projects\" in its path if you've navigated to it often before.</p> <ol> <li>Check Directory Rankings:</li> </ol> <p>To see a list of all directories tracked by <code>autojump</code> and their rankings, use:</p> Text Only<pre><code>autojump -s\n</code></pre> <p>This shows you the directories <code>autojump</code> has learned, along with their \"weight\" based on how often you visit them.</p> <ol> <li>Navigate Using Partial Matches:</li> </ol> <p>You don\u2019t have to type the full directory name or even the start of it. For example:</p> Text Only<pre><code>j proj\n</code></pre> <p><code>autojump</code> will match any directory containing \"proj\" if it\u2019s a frequently accessed one.</p> <p>\u8b6c\u5982\u6211\u4e4b\u524d <code>cd \"/Users/chengyong/Documents/01_Coding/01_CS \u81ea\u5b66\u7b14\u8bb0\"</code></p> <p>\u5f53\u6211\u53bb\u4e86\u522b\u7684\u6587\u4ef6\u5939\u4e4b\u540e\uff0c\u76f4\u63a5\u8f93\u5165<code>j Coding</code> \u5c31\u6765\u5230\u4e86\u201d/Users/chengyong/Documents/01_Coding/01_CS \u81ea\u5b66\u7b14\u8bb0\u201c\u8fd9\u4e2a\u6587\u4ef6\u5939\u3002</p> <ol> <li>Add Specific Paths:</li> </ol> <p>You can manually add a directory to <code>autojump</code>'s database using:</p> Text Only<pre><code>autojump &lt;path&gt;\n</code></pre> <p>This can be useful if you have directories you want quick access to without needing to visit them repeatedly.</p> <ol> <li>Forget a Directory:</li> </ol> <p>To remove a directory from <code>autojump</code>\u2019s database:</p> Text Only<pre><code>autojump --forget &lt;directory_name&gt;\n</code></pre> <p>Use this if a directory no longer exists or if you don\u2019t want it in your quick access list.</p> <ol> <li>Use with Tab Completion:</li> </ol> <p>Most installations of <code>autojump</code> support tab completion, which can help you see available directories as you type. Ensure it\u2019s set up in your shell by adding <code>autojump</code> to your shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.) if it isn\u2019t already.</p> <ol> <li>Set Up Aliases:</li> </ol> <p>For even faster usage, you can create an alias. Many users alias <code>j</code> to <code>autojump</code> by default, but you could also alias it differently or use it with other commands:</p> Text Only<pre><code>alias cdj='cd \"$(autojump &lt;keyword&gt;)\"'\n</code></pre> <p>This will <code>cd</code> into the directory directly.</p> <ol> <li>Jump Backwards:</li> </ol> <p>If you want to jump back to the previous directory, you can use <code>j -</code>:</p> Text Only<pre><code>j -\n</code></pre> <p>By practicing with <code>autojump</code>, you can save time navigating the filesystem, especially in environments where you often switch between deep or complex directory structures.</p> </li> </ul>"},{"location":"CS/Shell%20/Shell_command_cookbook/#3","title":"3\u3001\u6d4f\u89c8\u5386\u53f2\u547d\u4ee4","text":"<p>\u4efb\u4f55\u65f6\u5019\u5728 terminal \u4e2d\u6572\u5feb\u6377\u952e control+ R\uff0c\u8f93\u5165\u5173\u952e\u5b57\u5c31\u80fd\u8c03\u53d6\u8fc7\u5f80\u6572\u8fc7\u7684\u542b\u6709\u5173\u952e\u5b57\u7684\u547d\u4ee4\uff0c\u4f7f\u7528 Tab \u952e\u9009\u62e9\u76f8\u5173\u547d\u4ee4\u3002\u8fd9\u662f Fzf \u7684\u4e00\u4e2a\u5feb\u6377\u952e</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#history","title":"history","text":"<p><code>history</code> </p> <p>\u67e5\u770b\u6240\u6709\u7684\u5386\u53f2\u547d\u4ee4\uff1a<code>history 1</code></p> <p>\u5728\u5386\u53f2\u547d\u4ee4\u4e2d\uff0c\u67e5\u770b\u5e26\u6709<code>hexo</code>\u7684\u547d\u4ee4\uff1a<code>history | grep \"hexo\"</code></p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#fzf","title":"fzf","text":"<p>File Search: <code>fzf</code></p> <p>Command History Search: <code>history | fzf</code> or Ctrl+R</p> <p>Git Branch Switch: <code>git branch | fzf | xargs git checkout</code></p> <p>Navigate to Directory: <code>cd \"$(find . -type d | fzf)\"</code></p> <p>Preview Files: <code>fzf --preview 'cat {}'</code></p> <p>Search Recent Files: <code>find . -type f -mtime -7 | fzf</code></p> <p>Custom Key Bindings: <code>export FZF_DEFAULT_OPTS='--layout=reverse --height 40%'</code></p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#_2","title":"\u67e5\u770b\u524d\u9762\u51e0\u4e2a\u547d\u4ee4\uff1a","text":"<p>\u53ef\u4ee5\u7528 <code>Ctrl + R</code>\uff0c\u53ef\u4ee5\u53d6\u4ee3<code>!$</code></p> <p><code>Option + .</code> \u529f\u80fd\u7b49\u540c\u4e8e<code>!!</code></p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#shell","title":"\u4e8c\u3001Shell \u547d\u4ee4","text":"<p>Here's a comprehensive list of useful bash commands organized by categories, along with brief descriptions for each command:</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#1-file-management","title":"1. File Management","text":"Command Description <code>ls</code> List files and directories. Use <code>-l</code> for detailed listing, <code>-a</code> to include hidden files. <code>cd</code> Change directory. <code>pwd</code> Print working directory (shows current directory path). <code>mkdir</code> Create a new directory. <code>rmdir</code> Remove an empty directory. <code>cp</code> Copy files or directories. Use <code>-r</code> for recursive copying. <code>mv</code> Move or rename files and directories. <code>rm</code> Remove files or directories. Use <code>-r</code> to remove directories. <code>touch</code> Create an empty file or update the timestamp of an existing file. <code>cat</code> Concatenate and display file contents. <code>less</code> View file content one screen at a time. <code>find</code> Search for files and directories."},{"location":"CS/Shell%20/Shell_command_cookbook/#ls","title":"ls \u7528\u6cd5","text":""},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-l","title":"<code>ls -l</code>","text":"<p>detailed listing, this is the character L</p> <p><code>ls /Users/chengyong/Desktop</code></p> <p>will list all the files in the specified dir. </p> Text Only<pre><code>missing:~$ ls -l /home\ndrwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing\n</code></pre> <p>\u5176\u4e2d d \u4ee3\u8868 \u8fd9\u662f\u4e2a\u6587\u4ef6\u5939\uff0crwxr \u4ee3\u8868 missing \u8fd9\u4e2a\u6587\u4ef6\u5939\u7684 owner \u7684\u6743\u9650\uff0cusers \u7684\u6743\u9650\u662f xr\u3002</p> <p>w \u4ee3\u8868 write \u6743\u9650\uff0c x \u4ee3\u8868 search \u6743\u9650\uff0cr \u4ee3\u8868\u9605\u8bfb\u5177\u4f53\u6587\u4ef6\u5185\u5bb9\u7684\u6743\u9650\u3002</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-md","title":"<code>ls *.md</code>","text":"<p>list all files with md suffix</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-project","title":"<code>ls project?</code>","text":"<p>use ? to reprensent any number or character</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-sicp","title":"<code>ls SICP*</code>","text":"<p>use * to represent any lengths of character</p> <p>\u8b6c\u5982<code>SICP-\u5c01\u9762.docx</code>\u4e5f\u80fd\u627e\u51fa\u6765\u3002</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-1","title":"<code>ls -1</code>","text":"<p>list one file per line</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-d","title":"<code>ls -d */</code>","text":"<p>list \u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u6587\u4ef6\u5939\uff0c\u4e0d\u5305\u542b\u6587\u4ef6\u3002</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-t","title":"<code>ls -t</code>","text":"<p>sort files by modification time, newest first.</p> <p><code>ls -tr</code>, will order reversely, oldest first</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-s","title":"<code>ls -S</code>","text":"<p>sort files by the size, largest first.</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#ls-sr","title":"<code>ls -Sr</code>","text":"<p>reverse the order</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#cd","title":"cd \u7528\u6cd5","text":"<p><code>cd -</code>: \u6253\u5f00\u4e0a\u4e00\u4e2a\u6253\u5f00\u8fc7\u7684\u6587\u4ef6\u5939</p> <p></p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#mv","title":"mv \u7528\u6cd5","text":"<ul> <li> <p>Rename a file or directory when the target is not an existing directory:     <code>mv path/to/source path/to/target</code></p> </li> <li> <p>Move a file or directory into an existing directory:     <code>mv path/to/source path/to/existing_directory</code></p> </li> <li> <p>Move multiple files into an existing directory, keeping the filenames unchanged:     <code>mv path/to/source1 path/to/source2 ... path/to/existing_directory</code></p> </li> </ul>"},{"location":"CS/Shell%20/Shell_command_cookbook/#2-text-processing","title":"2. Text Processing","text":"Command Description <code>grep</code> Search text using patterns. <code>sed</code> Stream editor for finding and replacing text. <code>awk</code> Pattern scanning and processing language. <code>cut</code> Cut sections from each line of files. <code>sort</code> Sort lines of text. <code>uniq</code> Report or filter out repeated lines. <code>tr</code> Translate or delete characters. <code>wc</code> Count words, lines, and characters. <code>head</code> Output the first part of files. <code>tail</code> Output the last part of files. Use <code>-f</code> to follow new data as it is appended."},{"location":"CS/Shell%20/Shell_command_cookbook/#3-file-permissions-ownership","title":"3. File Permissions &amp; Ownership","text":"Command Description <code>chmod</code> Change file permissions. <code>chown</code> Change file ownership. <code>chgrp</code> Change group ownership of a file."},{"location":"CS/Shell%20/Shell_command_cookbook/#4-system-monitoring-information","title":"4. System Monitoring &amp; Information","text":"Command Description <code>top</code> Display system tasks and resource usage in real-time. <code>htop</code> Interactive process viewer (if installed). <code>ps</code> Display running processes. <code>df</code> Report file system disk space usage. <code>du</code> Estimate file space usage. <code>free</code> Display memory usage. <code>uptime</code> Show how long the system has been running. <code>uname</code> Print system information. <code>lscpu</code> Display information about the CPU architecture. <code>lsblk</code> List information about block devices."},{"location":"CS/Shell%20/Shell_command_cookbook/#5-networking","title":"5. Networking","text":"Command Description <code>ping</code> Send ICMP echo requests to network hosts. <code>ifconfig</code> Display network configuration. <code>ip</code> Show/manipulate routing, devices, and tunnels. <code>curl</code> Transfer data to or from a server. <code>wget</code> Download files from the internet. <code>netstat</code> Show network connections, routing tables, and more. <code>traceroute</code> Show the path packets take to a network host. <code>ssh</code> Securely connect to remote servers."},{"location":"CS/Shell%20/Shell_command_cookbook/#6-system-management","title":"6. System Management","text":"Command Description <code>shutdown</code> Shut down or restart the system. <code>reboot</code> Reboot the system. <code>sudo</code> Execute commands with superuser privileges. <code>systemctl</code> Control system services (start, stop, restart). <code>service</code> Manage system services. <code>crontab</code> Schedule commands to run at specific times."},{"location":"CS/Shell%20/Shell_command_cookbook/#7-file-compression-archiving","title":"7. File Compression &amp; Archiving","text":"Command Description <code>tar</code> Archive multiple files into a single file, and extract them. <code>gzip</code> Compress files using gzip. <code>gunzip</code> Decompress files compressed by gzip. <code>zip</code> Compress files into a .zip archive. <code>unzip</code> Extract files from a .zip archive."},{"location":"CS/Shell%20/Shell_command_cookbook/#8-disk-usage-management","title":"8. Disk Usage &amp; Management","text":"Command Description <code>mount</code> Mount a file system. <code>umount</code> Unmount a file system. <code>fdisk</code> Partition table manipulator for Linux. <code>mkfs</code> Build a Linux file system. <code>fsck</code> File system consistency check and repair."},{"location":"CS/Shell%20/Shell_command_cookbook/#9-user-group-management","title":"9. User &amp; Group Management","text":"Command Description <code>adduser</code> Add a new user. <code>userdel</code> Delete a user. <code>usermod</code> Modify user information. <code>passwd</code> Change a user's password. <code>groupadd</code> Add a new group. <code>groups</code> Show groups a user belongs to."},{"location":"CS/Shell%20/Shell_command_cookbook/#10-package-management-for-debian-based-systems","title":"10. Package Management (for Debian-based Systems)","text":"Command Description <code>apt-get update</code> Update the package index. <code>apt-get upgrade</code> Upgrade all installed packages to the latest version. <code>apt-get install</code> Install a package. <code>apt-get remove</code> Remove a package. <code>dpkg</code> Low-level package manager for Debian-based systems."},{"location":"CS/Shell%20/Shell_command_cookbook/#11-bash-scripting","title":"11. Bash Scripting","text":"Command Description <code>echo</code> Print text to the terminal. <code>read</code> Read a line of input from the user. <code>for</code>, <code>while</code>, <code>until</code> Loop structures for repeating commands. <code>if</code>, <code>elif</code>, <code>else</code> Conditional statements. <code>function</code> Define a function in a script. <code>exit</code> Exit a script or shell. <code>&amp;&amp;</code>, <code>||</code> Execute commands conditionally based on success/failure of previous command. <p>These categories cover a wide range of essential tasks that you might need to perform on a Unix-like system. Each command has options that allow more specific actions, and checking their man pages (e.g., <code>man ls</code>) will provide detailed information on how to use them effectively.</p> Variable Description Process information <code>$$</code> Process ID of shell <code>$PPID</code> Process ID of shell\u2019s parent process.Quirk Warning:For subshells, the value of PPID is inherited from the parent shell. Thus, PPID is only the parent of the outermost shell process. <code>$?</code> Exit status of last command. <code>$_</code> Name of last command. if the last command is <code>echo hello &gt; hello.txt</code>  then <code>echo $_</code> is equal to <code>echo hello</code> <code>$!</code> Process ID of last process run in the background using ampersand (&amp;) operator. This is commonly used in conjunction with the <code>wait</code> builtin. <code>!!</code> if the last command is <code>cd /usr/</code>, but you have no perssions, you can type <code>sudo !!</code> it means <code>sudo cd /usr/</code>, but will save you the time to type all of the characters. <code>$PATH</code> A colon-delimited list of locations where trusted executables are installed. Any executable in one of these locations can be executed without specifying a complete path. Field and record parsing <code>$IFS</code> Input Field Separators (uses are explained in Variable Expansion and Field Separators) User information <code>$HOME</code> The user\u2019s home directory. <code>$UID</code> The user\u2019s ID.Security Warning:This value can be modified by the calling script, so it should not be used for authentication purposes. <code>$USER</code> The user\u2019s (short) login name.Security Warning:This value can be modified by the calling script, so it should not be used for authentication purposes. Miscellaneous Variables <code>$#</code> Number of arguments passed to the shell. This variable is described further in Handling Flags and Arguments. <code>$@</code> Complete list of arguments passed to the shell, separated by spaces.. This variable is described further in Handling Flags and Arguments. <code>$*</code> Complete list of arguments passed to the shell, separated by the first character of the <code>IFS</code> (input field separators) variable. This variable is described further in Handling Flags and Arguments. <code>$-</code> A list of all shell flags currently enabled. <code>$PWD</code> The current working directory. Equivalent to executing the <code>pwd</code> command. <p>Control + L : \u4e00\u952e\u6e05\u5c4f\uff0c\u5149\u6807\u79fb\u52a8\u5230\u6700\u4e0a\u9762\u4e00\u884c\uff1b</p> <p>Control + U: \u5220\u9664\u6574\u884c\u547d\u4ee4</p> <p>Control + A: \u56de\u5230\u547d\u4ee4\u884c\u9996\u4f4d</p> <p>Control + E: \u6765\u5230\u547d\u4ee4\u884c\u672b\u5c3e</p> <p>control + K\uff1a\u5220\u9664\u5f53\u524d\u5149\u6807\u53f3\u8fb9\u6240\u6709\u7684\u547d\u4ee4</p> <p>control + _ : \u64a4\u56de\u4e0a\u4e00\u4e2a\u64cd\u4f5c</p>"},{"location":"CS/Shell%20/Shell_command_cookbook/#special-shell-variables","title":"Special shell variables","text":""},{"location":"CS/Shell%20/Shell_command_cookbook/#_3","title":"\u4e00\u4e9b\u5feb\u6377\u952e","text":""},{"location":"CS/Vim/vim-cheatsheet/","title":"Vim","text":""},{"location":"CS/Vim/vim-cheatsheet/#vim-keyboard-shortcuts","title":"\u4e00\u3001Vim Keyboard Shortcuts","text":"<p>\u6539\u952e\u76d8\u6620\u5c04</p> <p>\u901a\u8fc7\u5728 KE\u4e2d\u5bfc\u5165\u8bbe\u7f6e\uff0c\u5c06 CapsLock \u6620\u5c04\u4e3a Ctrl \u548c Esc\uff0c\u70b9\u6309\u4e3a Esc\uff0c\u6309\u4f4f\u4e3a Ctrl\u3002</p> <p>\u6253\u5f00 terminal\uff0c\u8f93\u5165<code>vimtutor</code>\u7ee7\u7eed\u5b66\u4e60\uff0c\u76ee\u524d\u5b8c\u6210\u4e86 4.1</p>"},{"location":"CS/Vim/vim-cheatsheet/#2text-editing","title":"2\u3001Text Editing","text":""},{"location":"CS/Vim/vim-cheatsheet/#insertion","title":"insertion:","text":"<p>\u5e94\u8be5\u5728 normal mode \u4e0b\u9762\u8fdb\u884c\u79fb\u52a8\uff08\u901a\u8fc7 hjkl\uff09\uff0c\u79fb\u52a8\u5230\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\uff0c\u7136\u540e\u968f\u65f6\u6309\u4e0b <code>i</code>\u8fdb\u884c\u6587\u6863\u7f16\u8f91\u3002</p>"},{"location":"CS/Vim/vim-cheatsheet/#appending","title":"appending:","text":"<p>\u5728 normal mode \u4e0b\u9762\uff0c\u79fb\u52a8\u5149\u6807\uff0c\u7136\u540e\u6309\u4e0b a \u952e\uff0c\u5728\u884c\u7684\u672b\u5c3e\u8fdb\u5165\u6dfb\u52a0\u5b57\u7b26\u6a21\u5f0f\u3002\u5982\u679c\u662f i \u952e\u5c31\u662f\u5f00\u5934\u3002</p> <p>a: insert after the cursor</p> <p>A: append at the end of the line</p> <p>i: append before cursor</p> <p>I: insert at the beginning of line</p>"},{"location":"CS/Vim/vim-cheatsheet/#undo","title":"undo \u64a4\u9500\u4fee\u6539","text":"<p>\u5148\u56de\u5230 normal mode, \u518d\u70b9\u51fb <code>u</code> : \u64a4\u9500\u4e0a\u4e00\u6b65\u4fee\u6539 Control +R : \u6062\u590d\u4e0a\u4e00\u6b65\u4fee\u6539 <code>U</code>: \u5927\u5199\u7684 u\uff0c\u64a4\u9500\u5bf9\u6574\u884c\u7684\u4fee\u6539</p> <p>\u5728\u64a4\u9500\u7684\u65f6\u5019\uff0c\u7ed3\u5408 motion\uff08w e 0 $\uff09\u53ef\u4ee5\u79fb\u52a8\u5f97\u66f4\u5feb\u3002</p>"},{"location":"CS/Vim/vim-cheatsheet/#_1","title":"\u4fdd\u5b58\u5bf9\u5e94\u7684\u6587\u4ef6\u4fee\u6539\uff0c\u5e76\u9000\u51fa","text":"<p><code>:wq</code> \u4fdd\u5b58\u4fee\u6539\u6587\u4ef6\u5e76\u9000\u51fa</p> <p><code>:q!</code>\u4e0d\u4fdd\u5b58\u4fee\u6539\uff0c\u76f4\u63a5\u9000\u51fa</p>"},{"location":"CS/Vim/vim-cheatsheet/#3command","title":"3\u3001Command \u4fee\u6539","text":"<p>\u6ce8\u610f\uff0c\u4ee5\u4e0b\u4fee\u6539\uff0c\u5fc5\u987b\u5148\u8fdb\u5165\u5230 normal mode</p>"},{"location":"CS/Vim/vim-cheatsheet/#motion","title":"\u8fd9\u91cc motion\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u52a8\u4f5c\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u79fb\u52a8\u6307\u5b9a\u5355\u4f4d","text":"<p>w: move the cursor one word forward\u6bcf\u4e00\u6b21\u79fb\u52a8\u4e00\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u7ed3\u675f\u540e\u5149\u6807\u90fd\u4f4d\u4e8e\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7684\u5f00\u5934, <code>nw</code> move n times e: move the cursor to the end of the first word forward.\u5e76\u4e14\u5149\u6807\u6bcf\u6b21\u90fd\u4f4d\u4e8e\u4e0b\u4e00\u4e2a\u5355\u8bcd\u90fd\u672b\u5c3e $: move the cursor to the end of the line. 0: move the curson to the start of the line, caret ^ \u4e5f\u53ef\u4ee5\u8d77\u5230\u540c\u6837\u7684\u529f\u80fd\u3002</p> <p>\u8fd9\u91cc\u80fd\u611f\u53d7\u5230Bash \u672c\u8eab\u4e5f\u662f a programming language\uff1a</p> <p>operator [number] motion \u5c31\u662f\u4e00\u4e2a\u5185\u7f6e\u7684function</p>"},{"location":"CS/Vim/vim-cheatsheet/#deleting-commands","title":"deleting commands","text":"<p><code>x</code>\uff1a\u5728 normal mode \u4e0b\u6309\u4e0b x \u952e\uff0c\u53ef\u4ee5\u5220\u9664\u5f53\u524d\u5149\u6807\u95ea\u70c1\u4e0b\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</p> <p>\u4f46\u662f\u5220\u9664\u4e0d\u6b62\u4e00\u4e2a character \u7684\u8bdd\uff0c\u8bed\u6cd5\u4f1a\u4e0d\u4e00\u6837\u3002</p> <p>operator [number] motion where  operator is what to do, such as <code>d</code> for delete, <code>c</code> for change [number] an optional count</p> <p>\u4e0b\u9762\u7684\u5220\u9664\u52a8\u4f5c\uff0c\u6ca1\u6709\u5e26\u6570\u5b57\uff0c\u9ed8\u8ba4\u662f 1\u3002 <code>dw</code>\u6216\u8005 <code>de</code>\uff1a\u5220\u9664\u4e00\u4e2a word\uff0c\u6709\u4e9b\u5fae\u4e0d\u540c</p> <p><code>dd</code>\uff1a\u5220\u9664\u4e00\u884c</p> <p><code>d$</code>\uff1a\u4ece\u5f53\u524d\u5149\u6807\u5220\u9664\u5230\u672c\u884c\u672b\u5c3e</p> <p>\u540c\u65f6\u5220\u9664\u597d\u51e0\u4e2a words \u6216\u8005 lines </p> <p>\u8b6c\u5982\uff1a <code>d2w</code>: \u5220\u9664\u4e24\u4e2a\u5168\u5927\u5199\u7684 words\uff08two UPPER CASE words\uff09 <code>2dd</code>\u6216\u8005 <code>d2d</code>: \u5220\u9664\u4e24\u884c</p>"},{"location":"CS/Vim/vim-cheatsheet/#dd-p","title":"dd + P\uff1a\u526a\u5207\u5f53\u524d\u884c\u518d\u7c98\u8d34","text":"<p>\u5f53\u8981\u628a\u67d0\u51e0\u884c line \u8c03\u6362\u4f4d\u7f6e\u7684\u65f6\u5019 \u5148\u628a\u5f53\u524d\u4e00\u884c\uff08dd\uff09\u6216\u8005\u591a\u884c\u6587\u5b57\u526a\u5207\uff08d+ n + d\uff09\uff0c\u7136\u540e\u79fb\u52a8\u5230\u8981\u653e\u7f6e\u7684\u884c\u6570\u7684\u4e0a\u4e00\u884c\uff0c\u518d\u70b9\u51fb <code>P</code>\uff08\u5176\u5b9e\u662f paste\uff09\uff0c\u5c31\u628a\u4e4b\u524d\u8c8c\u4f3c\u5220\u9664\u7684\u884c\u6570\u79fb\u52a8\u5230\u4e86\u65b0\u4f4d\u7f6e\u3002</p>"},{"location":"CS/Vim/vim-cheatsheet/#replace-command","title":"replace command","text":"<p>\u5148\u8981\u4ee5 normal mode\uff0c\u79fb\u52a8\u5230\u5bf9\u5e94\u7684\u5b57\u7b26\u4e0b\u65b9\u3002\u8bb0\u4f4f\u4e4b\u524d x \u662f\u5220\u9664\u5f53\u524d\u5149\u6807\u4e0b\u5b57\u7b26\u3002\u800c</p> <p>r + \u8981\u4fee\u6539\u7684\u5b57\u7b26\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u76f4\u63a5\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26\u3002</p>"},{"location":"CS/Vim/vim-cheatsheet/#ce-cc","title":"\u591a\u4e2a\u5b57\u7b26\u7684\u4fee\u6539 ce \u6216\u8005 cc","text":"<p>\u4ecd\u7136\u9075\u5faa \u4e0a\u9762 <code>operator [number] motion</code>\u7684\u8bed\u6cd5 \u8fd9\u91cc operator \u662f c (change), motion \u548c\u4e0a\u9762\u7c7b\u4f3c\uff1a w: to the beginning of the next word e: to the end of the next word\uff0c\u5982\u679c\u5149\u6807\u5728\u5355\u8bcd\u4e2d\u95f4\uff0c\u5176\u5b9e cw \u548c ce \u5dee\u522b\u4e0d\u5927\u3002 $: to the end of the line \u4e0a\u9762\u7684 r + \u5b57\u7b26 \u65b9\u6cd5\u9002\u5408\u4e2a\u522b\u5355\u8bcd\u62fc\u5199\u9519\u8bef\u7684\u4fee\u6539\uff0c\u4f46\u662f\u65e0\u6cd5\u66ff\u6362\u591a\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u662f\u591a\u4e2a\u5b57\u7b26\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u6548\u7387\u66f4\u9ad8\u3002 <code>ce</code>\uff1a\u5220\u9664\u5f53\u524d word\uff0c\u5e76\u8fdb\u5165 insert mode <code>cc</code>\uff1a\u5220\u9664\u5f53\u524d Line\uff0c\u5e76\u8fdb\u5165 insert mode\u3002</p>"},{"location":"CS/Vim/vim-cheatsheet/#4location-and-file-status","title":"4\u3001location and file status","text":"<p><code>gg</code>: to the beginning of the text.</p> <p><code>G</code>: to the end of the text.</p> <p><code>Ctrl+G</code>: indicates your current line and file status.</p> <p><code>integer + G</code>\uff1areturn to the specific line.</p>"},{"location":"CS/Vim/vim-cheatsheet/#5using-find","title":"5\u3001Using find","text":"<p>(1)in Normal Mode, /Enter find mode</p> <p>to search the same text again, type **n ** forward to the next find match\uff0c\u76f8\u5f53\u4e8e\u5728 word \u4e2d\u7528\u4e0a\u4e0b\u952e\u5934\u6765\u627e\u540c\u4e00\u5339\u914d\u3002</p> <p>type N to search backward to the previous find match</p>"},{"location":"CS/Vim/vim-cheatsheet/#vim","title":"\u4e8c\u3001\u5404\u8f6f\u4ef6\u4e2d\u4f7f\u7528\u7c7b\u4f3c VIM \u7684\u4f53\u9a8c","text":""},{"location":"CS/Vim/vim-cheatsheet/#1jupyterlab-desktop","title":"1\u3001Jupyterlab Desktop","text":"<p>\u5185\u7f6e\u4e86 Enable VIM mode\uff0c\u89c1<code>Settings- Enable Vim Mode</code></p> <p></p>"},{"location":"CS/Vim/vim-cheatsheet/#2-word-vim","title":"2\u3001\u5728\u5fae\u8f6f Word \u4e2d\u7528 VIM:","text":"<p>\u6211\u81ea\u5df1\u5199\u4e86\u63d2\u4ef6\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u6587\u7ae0\uff1ahttps://jackcheng.chat/2024/11/03/vim-word-experience/</p>"},{"location":"CS/Vim/vim-cheatsheet/#3chrome-vim","title":"3\u3001Chrome \u4e2d\u4f7f\u7528 VIM","text":"<p>https://vimium.github.io/ \u7528\u8fd9\u4e2a\u63d2\u4ef6\u3002</p> <p>Modifier keys are specified as , ,  for ctrl+x, meta+x, and alt+x respectively. <p>Navigating the current page:</p> Text Only<pre><code>?       show the help dialog for a list of all available keys\nh       scroll left\nj       scroll down\nk       scroll up\nl       scroll right\ngg      scroll to top of the page\nG       scroll to bottom of the page\nd       scroll down half a page\nu       scroll up half a page\nf       open a link in the current tab\nF       open a link in a new tab\nr       reload\ngs      view source\ni       enter insert mode -- all commands will be ignored until you hit esc to exit\nyy      copy the current url to the clipboard\nyf      copy a link url to the clipboard\ngf      cycle forward to the next frame\n</code></pre> <p>Navigating to new pages:</p> Text Only<pre><code>o       Open URL, bookmark, or history entry\nO       Open URL, bookmark, history entry in a new tab\nb       Open bookmark\nB       Open bookmark in a new tab\n</code></pre> <p>Using find:</p> Text Only<pre><code>/       enter find mode -- type your search query and hit enter to search or esc to cancel\nn       cycle forward to the next find match\nN       cycle backward to the previous find match\n</code></pre> <p>Navigating your history:</p> Text Only<pre><code>H       go back in history\nL       go forward in history\n</code></pre> <p>Manipulating tabs:</p> Text Only<pre><code>J, gT      go one tab left\nK, gt      go one tab right\ng0         go to the first tab\ng$         go to the last tab\nt          create tab\nx          close current tab\nX          restore closed tab (i.e. unwind the 'x' command)\nT          search through your open tabs\n</code></pre> <p>Additional advanced browsing commands:</p> Text Only<pre><code>]]      Follow the link labeled 'next' or '&gt;'. Helpful for browsing paginated sites.\n[[      Follow the link labeled 'previous' or '&lt;'. Helpful for browsing paginated sites.\n&lt;a-f&gt;   open multiple links in a new tab\ngi      focus the first (or n-th) text input box on the page\ngu      go up one level in the URL hierarchy\n</code></pre> <p>Vimium supports command repetition so, for example, hitting '5t' will open 5 tabs in rapid succession. ESC (or ) will clear any partial commands in the queue and will also exit insert and find modes."},{"location":"CS/Vim/vim-cheatsheet/#introduction-to-practical-vim-usage-for-beginners","title":"\u4e09\u3001Introduction to Practical Vim Usage for Beginners","text":"<p>Vim is a powerful text editor that can seem daunting at first, but learning it offers tremendous benefits for efficient and effective text editing. It's highly customizable, supports advanced editing capabilities, and is available on almost every Unix-based system, making it ideal for developers and power users alike. This guide introduces practical Vim commands that will get novice users comfortable with editing text, navigating files, and making the most of Vim's unique features.</p>"},{"location":"CS/Vim/vim-cheatsheet/#why-learn-vim","title":"Why Learn Vim?","text":"<ul> <li>Speed and Efficiency: Vim allows you to perform complex editing with a few keystrokes.</li> <li>Availability: Vim is available on most Unix systems by default, including MacOS and Linux servers.</li> <li>Customizability: Vim is highly configurable with plugins and scripts that can tailor the experience to your workflow.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#understanding-vim-modes","title":"Understanding Vim Modes","text":"<p>Vim has several modes, each suited for different tasks. The primary modes are: 1. Normal Mode: The default mode for navigation and basic commands. 2. Insert Mode: Used for typing and editing text. 3. Visual Mode: For selecting text. 4. Command Mode: For executing extended commands.</p> <p>Here\u2019s how to enter each mode: - Normal Mode: Press <code>Esc</code>. - Insert Mode: Press <code>i</code> (or <code>a</code> to insert after the cursor). - Visual Mode: Press <code>v</code>. - Command Mode: Press <code>:</code> in Normal Mode.</p>"},{"location":"CS/Vim/vim-cheatsheet/#basic-commands-for-navigation","title":"Basic Commands for Navigation","text":"<ol> <li>Moving Around:</li> <li> <p>h, j, k, l: Move left, down, up, and right respectively (replacing arrow keys).</p> <p>\u6309 <code>4 + j</code>\u4f1a\u5f80\u4e0b\u79fb\u52a8 4 \u884c</p> </li> <li> <p>w: Move to the beginning of the next word.</p> </li> <li> <p>b: Move to the beginning of the previous word.</p> </li> <li> <p>0: Move to the beginning of the line.</p> </li> <li> <p>$: Move to the end of the line. </p> </li> <li> <p>Scrolling:</p> </li> <li>Ctrl + u: Scroll up.</li> <li>Ctrl + d: Scroll down.</li> <li>G: Jump to the end of the file.</li> <li> <p>gg: Jump to the beginning of the file.</p> </li> <li> <p>Line Number Navigation:</p> </li> <li>:number: Jump to a specific line number (e.g., <code>:10</code> to go to line 10).</li> </ol>"},{"location":"CS/Vim/vim-cheatsheet/#editing-text","title":"Editing Text","text":"<ol> <li>Entering Insert Mode:</li> <li>i: Enter Insert Mode at the cursor position.</li> <li>a: Enter Insert Mode just after the cursor.</li> <li>o: Open a new line below the cursor and enter Insert Mode.</li> <li> <p>O: Open a new line above the cursor and enter Insert Mode.</p> </li> <li> <p>Deleting Text: normal mode \u4e0b\u64cd\u4f5c</p> </li> <li>x: Delete the character under the cursor.</li> <li>dd: Delete the entire line.</li> <li>dw: Delete a word.</li> <li> <p>d$: Delete from the cursor to the end of the line.</p> </li> <li> <p>Copying and Pasting: normal mode \u4e0b\u64cd\u4f5c</p> </li> <li>yy: Copy (yank) the entire line.</li> <li>y$: Yank from the cursor to the end of the line.</li> <li>p: Paste the yanked or deleted text after the cursor.</li> <li> <p>P: Paste before the cursor.</p> </li> <li> <p>Undo and Redo: \u64a4\u9500</p> </li> <li>u: Undo the last change.</li> <li>Ctrl + r: Redo the last undone change.</li> </ol>"},{"location":"CS/Vim/vim-cheatsheet/#searching-and-replacing-text","title":"Searching and Replacing Text","text":"<ol> <li>Searching:  normal mode \u4e0b\u64cd\u4f5c</li> <li>/text: Search for \"text\" forward.</li> <li>?text: Search for \"text\" backward.</li> <li>n: Move to the next occurrence.</li> <li> <p>N: Move to the previous occurrence.</p> </li> <li> <p>Replacing:</p> </li> <li>:s/old/new: Replace the first occurrence of \"old\" with \"new\" on the current line.</li> <li>:s/old/new/g: Replace all occurrences of \"old\" with \"new\" on the current line.</li> <li>:%s/old/new/g: Replace all occurrences of \"old\" with \"new\" in the entire file.</li> </ol>"},{"location":"CS/Vim/vim-cheatsheet/#saving-and-exiting","title":"Saving and Exiting","text":"<ol> <li>Saving:</li> <li>:w: Save the file.</li> <li> <p>:w filename: Save the file with a new filename.</p> </li> <li> <p>Exiting:</p> </li> <li>:q: Quit if no changes have been made.</li> <li>:q!: Quit without saving changes.</li> <li>:wq or ZZ: Save and quit.</li> </ol>"},{"location":"CS/Vim/vim-cheatsheet/#customizing-your-vim-experience","title":"Customizing Your Vim Experience","text":"<p>Vim supports a configuration file (<code>.vimrc</code>) for setting custom behaviors and adding plugins. For example, adding <code>set number</code> to <code>.vimrc</code> will display line numbers, making navigation easier.</p>"},{"location":"CS/Vim/vim-cheatsheet/#practice-tips-for-beginners","title":"Practice Tips for Beginners","text":"<ul> <li>Start Small: Begin by using Vim for simple text files.</li> <li>Learn Shortcuts Gradually: Focus on a few commands at a time to avoid overwhelming yourself.</li> <li>Practice Regularly: Use Vim whenever possible to build muscle memory and efficiency.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#conclusion","title":"Conclusion","text":"<p>With a bit of practice, Vim's commands become second nature, allowing you to edit text efficiently and with minimal reliance on the mouse. Vim\u2019s unique approach to text editing may take time to master, but its benefits in terms of speed, availability, and extensibility make it a powerful tool worth learning for any programmer or tech enthusiast.</p>"},{"location":"CS/Vim/vim-cheatsheet/#vimrc","title":"\u56db\u3001\u8bbe\u7f6e vimrc","text":"<p>Creating a <code>.vimrc</code> configuration file can greatly enhance your Vim experience, especially as a beginner. This file allows you to set custom behaviors and preferences, which can make Vim more intuitive and user-friendly.</p> <p>Here's a recommended <code>.vimrc</code> setup for beginners:</p> VimL<pre><code>\" Basic settings for beginner-friendly Vim usage\n\n\" Show line numbers\nset number\n\n\" Enable syntax highlighting\nsyntax on\n\n\" Highlight current line for better focus\nset cursorline\n\n\" Set tabs and indentation for consistency\nset tabstop=4       \" Number of spaces per tab\nset shiftwidth=4    \" Number of spaces for auto-indents\nset expandtab       \" Use spaces instead of tabs\n\n\" Enable incremental search (search as you type)\nset incsearch\n\n\" Ignore case in searches (case insensitive)\nset ignorecase\n\n\" Override ignorecase if search includes uppercase letters (smart case)\nset smartcase\n\n\" Show matching parentheses and brackets\nset showmatch\n\n\" Enable mouse support (helpful for beginners)\nset mouse=a\n\n\" Visual feedback for line wrap\nset wrap            \" Wrap long lines\nset linebreak       \" Break lines at word boundaries\n\n\" Better backspace behavior\nset backspace=indent,eol,start\n\n\" Enable clipboard for system copy-paste (works on most OS)\nset clipboard=unnamedplus\n\n\" Allow persistent undo, even after closing files\nset undofile\n\n\" Enable autocompletion menu\nset wildmenu\nset wildmode=list:longest\n\n\" Improve command-line completion with wildcards\nset wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.pyo,*.class\n\n\" Display unsaved changes with a symbol in the gutter\nset signcolumn=yes\n\n\" Show command in the bottom bar as you type\nset showcmd\n\n\" Set timeout for mapped sequences (useful for custom key mappings)\nset timeoutlen=500\n\n\" Customize the appearance of the status line\nset laststatus=2\nset ruler\n\n\" Disable error sounds\nset noerrorbells\nset visualbell\nset t_vb=\n\n\" Start in Normal mode when opening Vim\nautocmd BufEnter * startinsert\n\n\" Key mappings for improved efficiency\n\n\" Map `jj` to Escape in Insert mode for easier mode switching\ninoremap jj &lt;Esc&gt;\n\n\" Quick saving with `&lt;Leader&gt;w` (default leader key is `\\`)\nnnoremap &lt;Leader&gt;w :w&lt;CR&gt;\n\n\" Quick quitting with `&lt;Leader&gt;q`\nnnoremap &lt;Leader&gt;q :q&lt;CR&gt;\n\n\" Easy navigation between splits with Ctrl + arrow keys\nnnoremap &lt;C-Left&gt; &lt;C-w&gt;h\nnnoremap &lt;C-Down&gt; &lt;C-w&gt;j\nnnoremap &lt;C-Up&gt; &lt;C-w&gt;k\nnnoremap &lt;C-Right&gt; &lt;C-w&gt;l\n</code></pre>"},{"location":"CS/Vim/vim-cheatsheet/#explanation-of-key-vimrc-settings","title":"Explanation of Key <code>.vimrc</code> Settings","text":"<ul> <li>Line Numbers and Syntax Highlighting: These make it easier to read code and navigate.</li> <li>Tabs and Indentation: Setting <code>tabstop</code>, <code>shiftwidth</code>, and <code>expandtab</code> helps maintain consistent formatting.</li> <li>Search Customizations: <code>incsearch</code>, <code>ignorecase</code>, and <code>smartcase</code> make searches faster and more intuitive.</li> <li>Clipboard Integration: Allows Vim to use the system clipboard for copying and pasting.</li> <li>Undo History: <code>undofile</code> keeps undo history even after closing a file.</li> <li>Key Mappings: Mappings like <code>jj</code> for Escape in Insert mode make mode switching easier, while <code>&lt;Leader&gt;w</code> for saving and <code>&lt;Leader&gt;q</code> for quitting offer quick access to common commands.</li> <li>Split Navigation: The <code>Ctrl</code> + arrow mappings make moving between split windows intuitive.</li> </ul> <p>This configuration will make Vim more approachable, helping you focus on editing and learning Vim\u2019s basics without struggling with initial setup. You can add more advanced settings as you get comfortable with Vim.</p>"},{"location":"CS/Vim/vim-cheatsheet/#how-to-use-vim-like-pro","title":"\u4e94\u3001how to use Vim like Pro","text":"<p>Using Vim like a pro involves mastering navigation, editing, and customization to make the most out of this powerful text editor. Here\u2019s a comprehensive guide to get you working efficiently in Vim and moving beyond the basics.</p>"},{"location":"CS/Vim/vim-cheatsheet/#1-master-advanced-navigation","title":"1. Master Advanced Navigation","text":"<p>Efficient navigation is at the core of Vim. Here are some pro-level navigation techniques:</p> <ul> <li>Moving by Word: </li> <li><code>w</code>: Move forward to the start of the next word.</li> <li><code>b</code>: Move backward to the start of the previous word.</li> <li> <p><code>e</code>: Move to the end of the current word.</p> </li> <li> <p>Moving by Sentence and Paragraph:</p> </li> <li><code>(</code>: Jump to the beginning of the sentence.</li> <li><code>)</code>: Jump to the end of the sentence.</li> <li><code>{</code>: Jump to the start of the paragraph.</li> <li> <p><code>}</code>: Jump to the end of the paragraph.</p> </li> <li> <p>Line Navigation:</p> </li> <li><code>0</code>: Move to the beginning of the line.</li> <li><code>$</code>: Move to the end of the line.</li> <li> <p><code>^</code>: Move to the first non-blank character of the line.9g9G</p> </li> <li> <p>File Navigation:</p> </li> <li><code>gg</code>: Go to the beginning of the file.</li> <li><code>G</code>: Go to the end of the file.</li> <li><code>&lt;number&gt;G</code>: Go to a specific line number (e.g., <code>10G</code> to go to line 10).</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#2-utilize-visual-mode-for-efficient-text-selection","title":"2. Utilize Visual Mode for Efficient Text Selection","text":"<ul> <li>Visual Mode Types:</li> <li><code>v</code>: Enter character-wise Visual Mode.</li> <li><code>V</code>: Enter line-wise Visual Mode.</li> <li> <p><code>Ctrl + v</code>: Enter block Visual Mode, which is especially useful for selecting columns or editing vertical blocks of text.</p> </li> <li> <p>Manipulate Text in Visual Mode:</p> </li> <li>Select text and then press <code>y</code> to copy or <code>d</code> to cut the selection.</li> <li>Press <code>p</code> to paste after the current cursor position or <code>P</code> to paste before.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#3-take-advantage-of-registers","title":"3. Take Advantage of Registers","text":"<p>Vim stores copied or deleted text in registers. Using these registers can streamline repetitive text handling:</p> <ul> <li><code>\"0p</code>: Paste the last yanked (copied) text.</li> <li><code>\"1p</code>: Paste the last deleted text.</li> <li><code>\"+p</code>: Access the system clipboard (for copying to/from outside Vim).</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#4-use-macros-for-repetitive-tasks","title":"4. Use Macros for Repetitive Tasks","text":"<p>Macros allow you to record a sequence of commands and replay them. This is incredibly useful for repetitive tasks:</p> <ol> <li>Start recording with <code>q</code> followed by any letter (e.g., <code>qa</code> to record into register <code>a</code>).</li> <li>Perform your actions.</li> <li>Stop recording by pressing <code>q</code> again.</li> <li>Replay the macro with <code>@a</code>. You can repeat it multiple times by typing a number before the command (e.g., <code>5@a</code> to run the macro 5 times).</li> </ol>"},{"location":"CS/Vim/vim-cheatsheet/#5-search-and-replace-with-power","title":"5. Search and Replace with Power","text":"<ul> <li>Basic Search: <code>/pattern</code> to search forward and <code>?pattern</code> to search backward.</li> <li>Search and Replace Globally:</li> <li><code>:%s/old/new/g</code>: Replace all occurrences of <code>old</code> with <code>new</code> in the file.</li> <li><code>:%s/old/new/gc</code>: Replace with confirmation (Vim will ask you to confirm each change).</li> <li>Use Ranges: <code>:1,10s/old/new/g</code> will replace text only between lines 1 and 10.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#6-master-buffers-and-windows","title":"6. Master Buffers and Windows","text":"<ul> <li>Buffers: Vim can keep multiple files open simultaneously as buffers.</li> <li><code>:e filename</code>: Open a file in a new buffer.</li> <li><code>:bn</code> and <code>:bp</code>: Move to the next and previous buffers.</li> <li> <p><code>:bd</code>: Close a buffer.</p> </li> <li> <p>Splits: View multiple buffers side by side.</p> </li> <li><code>:vsplit filename</code>: Open a file in a vertical split.</li> <li><code>:split filename</code>: Open a file in a horizontal split.</li> <li>Use <code>Ctrl + w</code> followed by <code>h</code>, <code>j</code>, <code>k</code>, or <code>l</code> to navigate between splits.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#7-customize-with-plugins-and-vimrc","title":"7. Customize with Plugins and .vimrc","text":"<p>To unlock even more power, use plugins and customize your <code>.vimrc</code> file:</p> <ul> <li>Plugins:</li> <li>Use a plugin manager like vim-plug to easily install plugins.</li> <li> <p>Some popular plugins for pros:</p> <ul> <li>nerdtree: A file tree explorer.</li> <li>fzf.vim: Fuzzy file finder.</li> <li>vim-airline: Enhanced status bar.</li> <li>surround.vim: Easier manipulation of surrounding characters like parentheses or quotes.</li> </ul> </li> <li> <p>Sample .vimrc Settings for Pros:   VimL<pre><code>set number                  \" Show line numbers\nset relativenumber          \" Show relative line numbers for easy navigation\nset clipboard=unnamedplus   \" Use system clipboard\nset tabstop=4               \" Set tab width\nset shiftwidth=4            \" Indent width\nset expandtab               \" Use spaces instead of tabs\nset autoindent              \" Auto-indent new lines\nset cursorline              \" Highlight the cursor line\nsyntax on                   \" Enable syntax highlighting\n</code></pre></p> </li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#8-speed-up-your-workflow-with-useful-mappings","title":"8. Speed Up Your Workflow with Useful Mappings","text":"<p>Mappings can drastically reduce keystrokes:</p> <ul> <li> <p>Easy Save and Quit:</p> </li> <li> <p>nnoremap w :w allows you to save the current file by pressing w. <li>nnoremap q :q allows you to quit Vim by pressing q.     These mappings provide quick shortcuts for saving and quitting files in Vim. You can press, for example, \\w to save or \\q to quit (if \\ is the Leader key). VimL<pre><code>nnoremap &lt;Leader&gt;w :w&lt;CR&gt;\nnnoremap &lt;Leader&gt;q :q&lt;CR&gt;\n</code></pre> <ul> <li>Quick Window Navigation:</li> </ul> VimL<pre><code>nnoremap &lt;C-h&gt; &lt;C-w&gt;h\nnnoremap &lt;C-j&gt; &lt;C-w&gt;j\nnnoremap &lt;C-k&gt; &lt;C-w&gt;k\nnnoremap &lt;C-l&gt; &lt;C-w&gt;l\n</code></pre>"},{"location":"CS/Vim/vim-cheatsheet/#9-use-folding-for-complex-files","title":"9. Use Folding for Complex Files","text":"<p>Folding lets you collapse sections of code:</p> <ul> <li><code>za</code>: Toggle fold (open/close).</li> <li><code>zR</code>: Open all folds.</li> <li><code>zM</code>: Close all folds.</li> <li>Customize folding behavior with <code>set foldmethod=syntax</code> for code or <code>set foldmethod=indent</code> for plain text files.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#10-embrace-ex-commands","title":"10. Embrace Ex Commands","text":"<p>Ex commands give you fine-grained control over files and text:</p> <ul> <li>Write and Quit All: <code>:wa</code> (write all open buffers), <code>:xa</code> (save and quit all).</li> <li>Filter Text:</li> <li><code>:1,10!sort</code> sorts lines 1-10.</li> <li><code>:.,+5!grep pattern</code> filters lines from the current line to five lines below for a pattern.</li> </ul>"},{"location":"CS/Vim/vim-cheatsheet/#final-tips-for-mastering-vim","title":"Final Tips for Mastering Vim","text":"<ul> <li>Practice Regularly: Consistency is key to building muscle memory.</li> <li>Learn One New Command at a Time: Slowly build your command repertoire to avoid feeling overwhelmed.</li> <li>Explore Vim\u2019s Help: Access Vim\u2019s detailed help system with <code>:help command</code> (e.g., <code>:help search</code>).</li> <li>Challenge Yourself with Vim Adventures: This game-like tutorial (https://vim-adventures.com/) helps make learning fun.</li> </ul> <p>Mastering Vim takes time, but by focusing on these areas, you\u2019ll soon find yourself editing like a pro!</p>"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/","title":"Mac command cheetsheet","text":""},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#english-versions","title":"English Versions","text":""},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#preview","title":"Preview \u4e2d\u6d4f\u89c8\u56fe\u7247\uff1a","text":"<p>\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u6709\u591a\u5f20\u56fe\u7247\uff0c\u53ef\u4ee5\u9009\u591a\u5f20\u56fe\u7247\uff0c\u7136\u540e\u53f3\u952e\u2014\u2014\u5728 Preview \u4e2d\u6253\u5f00\u3002</p> <p>\u6253\u5f00\u7684\u6bcf\u5f20\u56fe\u7247\uff0c\u53ef\u4ee5\u7528 Command + = \u6765\u653e\u5927\uff0c\u901a\u8fc7 Command + - \u7f29\u5c0f\uff0c</p> <p>Command + C \u590d\u5236\u56fe\u7247\uff0c\u8fd9\u4e2a\u5c24\u5176\u91cd\u8981\u3002</p> <p>Letters are shown capitalized for readability only. Capslock should be off.</p>"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#shortcuts","title":"SHORTCUTS","text":"<p>A/E/L/U/K \u975e\u5e38\u5e38\u7528</p> Key/Command Description Ctrl + A Go to the beginning of the line you are currently typing on. This also works for most text input fields system wide. Netbeans being one exception Ctrl + E Go to the end of the line you are currently typing on. This also works for most text input fields system wide. Netbeans being one exception Ctrl + L Clears the Screen Cmd + K Clears the Screen Ctrl + U Cut everything backwards to beginning of line Ctrl + K Cut everything forward to end of line Ctrl + W Cut one word backwards using white space as delimiter Ctrl + Y Paste whatever was cut by the last cut command Ctrl + H Same as backspace Ctrl + C Kill whatever you are running. Also clears everything on current line Ctrl + D Exit the current shell when no process is running, or send EOF to a the running process Ctrl + Z Puts whatever you are running into a suspended background process. fg restores it Ctrl + _ Undo the last command. (Underscore. So it's actually Ctrl + Shift + minus) Ctrl + T Swap the last two characters before the cursor Ctrl + F Move cursor one character forward Ctrl + B Move cursor one character backward Option + \u2192 Move cursor one word forward Option + \u2190 Move cursor one word backward Esc + T Swap the last two words before the cursor Esc + Backspace Cut one word backwards using none alphabetic characters as delimiters Tab Auto-complete files and folder names"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#core-commands","title":"CORE COMMANDS","text":"Key/Command Description cd [folder] Change directory e.g. <code>cd Documents</code> cd Home directory cd ~ Home directory cd / Root of drive cd - Previous directory ls Short listing ls -l Long listing ls -a Listing incl. hidden files ls -lh Long listing with Human readable file sizes ls -R Entire content of folder recursively sudo [command] Run command with the security privileges of the superuser (Super User DO) open [file] Opens a file ( as if you double clicked it ) top Displays active processes. Press q to quit nano [file] Opens the file using the nano editor vim [file] Opens the file using the vim editor clear Clears the screen reset Resets the terminal display"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#chaining-commands","title":"CHAINING COMMANDS","text":"Key/Command Description [command-a]; [command-b] Run command A and then B, regardless of success of A [command-a] &amp;&amp; [command-b] Run command B if A succeeded [command-a] || [command-b] Run command B if A failed [command-a] &amp; Run command A in background"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#piping-commands","title":"PIPING COMMANDS","text":"Key/Command Description [command-a] | [command-b] Run command A and then pass the result to command B e.g ps auxwww | grep google"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#command-history","title":"COMMAND HISTORY","text":"Key/Command Description history n Shows the stuff typed \u2013 add a number to limit the last n items Ctrl + r Interactively search through previously typed commands ![value] Execute the last command typed that starts with \u2018value\u2019 ![value]:p Print to the console the last command typed that starts with \u2018value\u2019 !! Execute the last command typed !!:p Print to the console the last command typed"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#file-management","title":"FILE MANAGEMENT","text":"Key/Command Description touch [file] Create a new file pwd Full path to working directory . Current folder, e.g. <code>ls .</code> .. Parent/enclosing directory, e.g. <code>ls ..</code> ls -l .. Long listing of parent directory cd ../../ Move 2 levels up cat Concatenate to screen rm [file] Remove a file, e.g. <code>rm data.tmp</code> rm -i [file] Remove with confirmation rm -r [dir] Remove a directory and contents rm -f [file] Force removal without confirmation cp [file] [newfile] Copy file to file cp [file] [dir] Copy file to directory mv [file] [new filename] Move/Rename, e.g. <code>mv file1.ad /tmp</code> pbcopy &lt; [file] Copies file contents to clipboard pbpaste Paste clipboard contents pbpaste &gt; [file] Paste clipboard contents into file, <code>pbpaste &gt; paste-test.txt</code>"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#directory-management","title":"DIRECTORY MANAGEMENT","text":"Key/Command Description mkdir [dir] Create new directory mkdir -p [dir]/[dir] Create nested directories rmdir [dir] Remove directory ( only operates on empty directories ) rm -R [dir] Remove directory and contents less [file] Output file content delivered in screensize chunks [command] &gt; [file] Push output to file, keep in mind it will get overwritten [command] &gt;&gt; [file] Append output to existing file [command] &lt; [file] Tell command to read content from a file"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#search","title":"SEARCH","text":"Key/Command Description find [dir] -name [search_pattern] Search for files, e.g. <code>find /Users -name \"file.txt\"</code> grep [search_pattern] [file] Search for all lines that contain the pattern, e.g. <code>grep \"Tom\" file.txt</code> grep -r [search_pattern] [dir] Recursively search in all files in specified directory for all lines that contain the pattern grep -v [search_pattern] [file] Search for all lines that do NOT contain the pattern grep -i [search_pattern] [file] Search for all lines that contain the case-insensitive pattern mdfind [search_pattern] Spotlight search for files (names, content, other metadata), e.g. <code>mdfind skateboard</code> mdfind -onlyin [dir] -name [pattern] Spotlight search for files named like pattern in the given directory"},{"location":"Computer-literacy/Mac%20command%20cheetsheet/#help","title":"HELP","text":"Key/Command Description [command] -h Offers help [command] --help Offers help info [command] Offers help man [command] Show the help manual for [command] whatis [command] Gives a one-line description of [command] apropos [search-pattern] Searches for command with keywords in description"},{"location":"Computer-literacy/Markdown%20Cheatsheet/","title":"Markdown Cheatsheet","text":"<p>\u4e0b\u79fb\u4e00\u5c4f\uff1aFn+ \u2b07\ufe0f</p> <p>\u5f15\u7528\uff1aOption + Command+ Q</p>"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/","title":"iTerm2 \u5e38\u7528\u5feb\u6377\u952e","text":"Text Only<pre><code>eillsu\u603b\u7ed3\nhttps://github.com/eillsu/iTerm2-Chinese-Tutorial\n</code></pre>"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#_1","title":"\u6700\u5e38\u7528\u7684\u5feb\u6377\u952e","text":"\u5feb\u6377\u952e \u8bf4\u660e Ctrl + U \u6e05\u9664\u5f53\u524d\u884c Ctrl + A \u5230\u884c\u9996\u4f4d\u7f6e Ctrl + E \u5230\u884c\u5c3e\u4f4d\u7f6e Ctrl + W \u5220\u9664\u5149\u6807\u4e4b\u524d\u7684\u5185\u5bb9 Ctrl + K \u5220\u9664\u5149\u6807\u4e4b\u540e\u7684\u5185\u5bb9 Ctrl + - \u64a4\u9500 \u5411\u4e0a\\\u5411\u4e0b\u7bad\u5934 \u547d\u4ee4\u5386\u53f2"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#shell","title":"Shell","text":"\u5feb\u6377\u952e \u8bf4\u660e Command + N \u6253\u5f00\u65b0\u7a97\u53e3 Command + T \u6253\u5f00\u65b0\u6807\u7b7e\u9875 Command + Option + Shift + T \u6253\u5f00\u65b0\u6807\u7b7e\u9875\uff08\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\uff09 Command + Option + D \u6c34\u5e73\u5207\u5206\u5f53\u524d\u7a97\u53e3\uff08\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\uff09 Command + D \u5782\u76f4\u5207\u5206\u5f53\u524d\u7a97\u53e3\uff08\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\uff09 Command + W \u5173\u95ed\u5f53\u524d\u6807\u7b7e\u9875 Command + Shift + W \u5173\u95ed\u5f53\u524d\u7a97\u53e3 Command + Option + W \u5173\u95ed\u5f53\u524dTab\u4e2d\u7684\u6240\u6709\u7684Panes Command + P \u6253\u5370\u7ec8\u7aef\u5185\u5bb9 Command + \u6570\u5b57 \u6253\u5f00\u5bf9\u5e94\u7684\u6807\u7b7e\u9875 Command + Option + \u6570\u5b57 \u6253\u5f00\u5bf9\u5e94\u7684\u7a97\u53e3 Command + \u5de6\u3001\u53f3\u7bad\u5934 \u5de6\u53f3\u5207\u6362\u6807\u7b7e\u9875"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#edit","title":"Edit","text":"\u5feb\u6377\u952e \u8bf4\u660e Command + Z \u64a4\u9500\u5173\u95ed\u7684\u4f1a\u8bdd\uff08\u9ed8\u8ba45\u79d2\u5185\uff09 Command + Shift + Z \u91cd\u505a Command + X \u526a\u5207 Command + C \u590d\u5236 Command + Shift + C \u590d\u5236\u6a21\u5f0f Command + V \u7c98\u8d34 Command + A \u5168\u9009 Command + F \u67e5\u627e Command + K \u6e05\u9664\u7f13\u5b58"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#view","title":"View","text":"\u5feb\u6377\u952e \u8bf4\u660e Command + Enter \u5207\u6362\u5168\u5c4f\u6a21\u5f0f Command + U \u5207\u6362\u662f\u5426\u542f\u7528\u900f\u660e\u5ea6 Command + / \u5bfb\u627e\u5149\u6807 Command + \\ \u663e\u793a\u6ce8\u91ca Command + Shift + O \u5feb\u901f\u6253\u5f00 Command + + \u653e\u5927\u5b57\u4f53 Command + 0 \u9ed8\u8ba4\u5b57\u4f53\u5927\u5c0f Command + - \u7f29\u5c0f\u5b57\u4f53 Command + Option + B \u5373\u65f6\u91cd\u653e"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#session","title":"Session","text":"\u5feb\u6377\u952e \u8bf4\u660e Command + I \u7f16\u8f91\u5f53\u524d\u4f1a\u8bdd Command + Option + R \u8fd0\u884c\u534f\u540c\u5904\u7406 Command + ; \u81ea\u52a8\u8865\u5168 Command + Option + ; \u547d\u4ee4\u5386\u53f2 Command + Option + / \u6700\u8fd1\u4f7f\u7528\u7684\u6587\u4ef6\u5730\u5740 Command + Shift + H \u7c98\u8d34\u5386\u53f2 Command + R \u91cd\u7f6e\u6e05\u7a7a Command + Shift + B \u6253\u5f00\u5de5\u5177\u680f"},{"location":"Computer-literacy/iTerm2%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%20key%20shorcuts-cheatsheet/#window","title":"Window","text":"\u5feb\u6377\u952e \u8bf4\u660e Command + M \u7a97\u53e3\u6700\u5c0f\u5316 Command + Shift + 0 \u653e\u5927\u7a97\u53e3 Command  + Option + E Expos\u00e9 \u6240\u6709\u6807\u7b7e\u9875 Command + ] \u4e0b\u4e00\u4e2aPane Command + [ \u4e0a\u4e00\u4e2aPane Command + Option + F \u5bc6\u7801\u7ba1\u7406\u5668"},{"location":"Family-Education/","title":"\u5bb6\u5ead\u5efa\u8bbe","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"Family-Education/must-do-list-for-parents/","title":"\u5b50\u5973\u6210\u957f\u5404\u9636\u6bb5\u5bb6\u957f\u5fc5\u505a","text":""},{"location":"Family-Education/must-do-list-for-parents/#_1","title":"\u603b\u7ed3","text":""},{"location":"Family-Education/must-do-list-for-parents/#_2","title":"\u597d\u7684\u5bb6\u5ead\u6559\u80b2\u516c\u4f17\u53f7\uff1a","text":"<p>BetterRead</p> <p>\u674e\u7b11\u6765\uff1a\u5bcc\u8db3\u4eba\u751f\u8df5\u884c\u793e\u7fa4</p>"},{"location":"Family-Education/must-do-list-for-parents/#_3","title":"\u6700\u91cd\u8981\u7684\u662f\uff1a","text":"<p>\u53c2\u8003\u9646\u8c26\u548c\u674e\u7b11\u6765\u8001\u5e08\u7684\u8bf4\u6cd5:</p> <p>5 \u5c81\u662f\u5b69\u5b50\u5b66\u82f1\u8bed\u7684\u6700\u4f73\u5e74\u9f84\uff0c10 \u5c81\u524d\u628a\u5b69\u5b50\u82f1\u8bed\u7ec3\u597d \u4e0a\u5c0f\u5b66\u4e09\u5e74\u7ea7\u5f00\u59cb\u6559\u5b69\u5b50\u7f16\u7a0b</p> <p>\u672a\u6765\u662f\u827a\u672f\u5bb6\u7684\u5929\u4e0b</p>"},{"location":"Family-Education/must-do-list-for-parents/#1","title":"1.\u5728\u5b66\u9f84\u524d\u548c\u5c0f\u5b66\uff0c\u7ec3\u597d\u5b69\u5b50\u7684\u82f1\u8bed\u53e3\u8bed\uff0c\u542c\u8bf4","text":"<p>\u4e00\u5b9a\u8981\u8ba9\u5b69\u5b50\u597d\u597d\u5b66\u82f1\u8bed\uff0c\u628a\u82f1\u6587\u53e3\u8bed\u8bf4\u597d\uff0c\u8fd9\u662f\u53ea\u8981\u80af\u7ec3\uff0c\u5c31\u80fd\u628a 99% \u7684\u540c\u9f84\u5b69\u5b50\u7529\u5728\u8eab\u540e\u7684\u552f\u4e00\u4e00\u4e2a\u79d1\u76ee\u3002</p> <p>3\u3001\u4e0a\u5c0f\u5b66\u4e4b\u524d\uff0c\u8ba9\u5b69\u5b50\u591a\u542c\u82f1\u8bed\u5e7f\u64ad\u3001\u7ae5\u8c23\u3001\u7ae5\u8bdd\u3001\u7535\u89c6\u5267\uff0c\u542c\u4e0d\u542c\u5f97\u61c2\u6ca1\u5173\u7cfb\uff0c\u91cd\u8981\u662f\u5f00\u542f\u5b69\u5b50\u7684\u53cc\u8bed\u8bed\u97f3\u8fc7\u6ee4\u673a\u5236</p> <p>\u5bf9\u4e8e\u5a74\u513f\u6765\u8bf4\u4e5f\u662f\uff0c\u5728 18 \u4e2a\u6708\u4ee5\u524d\uff0c\u7ecf\u5e38\u64ad\u653e\u5404\u79cd\u82f1\u6587\u7ae5\u8bdd\u6545\u4e8b\uff0c\u5c0f\u8bf4\uff0c\u7535\u89c6\u5267\uff0c\u5230\u5c0f\u5b66\u5165\u5b66\u7684\u65f6\u5019\uff0c\u5b69\u5b50\u7684\u53cc\u8bed\u8bed\u97f3\u8fc7\u6ee4\u5668\u5c31\u56fa\u5316\u4e86</p> <p>\u6765\u81ea\u4e8e\u674e\u7b11\u6765\u300a\u4eba\u4eba\u90fd\u80fd\u7528\u82f1\u8bed\u300b\u7b2c\u4e09\u7ae0 \u8bed\u97f3</p> <p>\u91cd\u8981\u7684\u662f\uff0c\u4e0a\u5c0f\u5b66\u4e4b\u524d\uff0c\u8ba9\u5b69\u5b50\u7684\u82f1\u8bed\u63d0\u4e0a\u6765\u4e00\u4e2a\u53f0\u9636\u3002 \u674e\u7b11\u6765\uff1a\u5728\u5c0f\u5b66\u9636\u6bb5\uff0c\u5b66\u9f84\u524d\u9636\u6bb5\uff0c\u82f1\u8bed\u51e0\u4e4e\u662f\u552f\u4e00\u4e00\u4e2a\u53ea\u8981\u80af\u7ec3\u5c31\u80fd\u628a 99.99% \u7684\u4eba\u7529\u5728\u8eab\u540e\u7684\u79d1\u76ee\uff0c\u5e76\u4e14\u8fd8\u662f\u201c\u6c38\u8fdc\u7529\u5728\u8eab\u540e\u201d\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#2","title":"2.\u6211\u4eec\u8981\u6559\u7ed9\u5b69\u5b50\u7684\u4e1c\u897f","text":"<p>\u6765\u6e90\uff1a\u674e\u7b11\u6765 \u5bcc\u8db3\u8df5\u884c\u793e\u7fa4\u2014\u2014\u300a\u6211\u4eec\u8981\u6559\u4e0b\u4e00\u4ee3\u4ec0\u4e48\uff1f\u300b</p> <p>\u5b66\u6821\u7684\u6559\u80b2\u6709\u7528\uff0c\u5728\u6240\u6709\u7684\u6709\u7528\u7684\u4e1c\u897f\u4e2d\u5360\u6bd4\u8d8a\u6765\u8d8a\u4f4e\u3002 15 \u5c81\u4e4b\u524d\uff0c\u5b66\u4ec0\u4e48\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u5728\u90a3\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u628a\u8111\u5b50\u7ec3\u597d\u3002</p> <p>\u6211\u4eec\u8981\u6559\u7ed9\u5b69\u5b50\u7684\u4e1c\u897f\uff1a \u597d\u597d\u8bf4\u8bdd \u81ea\u7136\u8bed\u8a00\u7684\u4f7f\u7528\u80fd\u529b\uff0c\u5305\u62ec\u8bed\u6587\uff0c\u4e00\u5b9a\u8981\u6781\u5ea6\u91cd\u89c6\u8bed\u6587\u3002 \u4e0d\u4ec5\u8981\u6781\u5ea6\u91cd\u89c6\u8bed\u6587\uff0c\u8981\u50cf\u5b66\u8bed\u6587\u4e00\u6837\u5b66\u82f1\u8bed\u3002 \u8ba1\u7b97\u673a\u7f16\u7a0b\u3001\u8ba1\u7b97\u673a\u57fa\u7840\u7d20\u517b\uff08computer literacy\uff09\u57f9\u8bad\u7279\u522b\u91cd\u8981\u3002</p> <p>\u4ee5\u4e0a\u4e1c\u897f\u4e2d\uff0c\u6700\u91cd\u8981\u7684\u5e95\u5c42\u4e1c\u897f\u662f\uff1a\u6559\u4f1a\u5b69\u5b50\u5982\u4f55\u601d\u8003\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#315","title":"3.\u4e0d\u80fd\u8ba9\u5b69\u5b50\u8fc7\u65e9\u6709\u624b\u673a\uff0815 \u5c81\u4e4b\u524d\uff09\uff0c\u907f\u514d\u5927\u8111\u76ae\u5c42\u53d1\u80b2\u53d7\u5f71\u54cd\u3002","text":"<p>\u4eca\u5929\u6709\u592a\u591a\u5b69\u5b50\u592a\u65e9\u63a5\u89e6\u5230\u624b\u673a\u3002\u4f1a\u5f71\u54cd\u5927\u8111\u7684\u53d1\u80b2\u548c\u6784\u9020\u3002</p> <p>\u9000\u800c\u6c42\u5176\u6b21\uff0c\u5f53\u5b69\u5b50\u4e94\u516d\u5c81\u7684\u65f6\u5019\uff0c\u7ed9\u5b69\u5b50\u58a8\u6c34\u5c4f\u7535\u5b50\u8bbe\u5907\uff0c\u53ea\u80fd\u770b\u4e66\uff0c\u522b\u7684\u4e0d\u80fd\u5e72\u3002\u4e00\u5207\u8ddf\u793e\u4ea4\u76f8\u5173\u7684\u6682\u65f6\u653e\u5728\u4e00\u8fb9\u3002</p> <p>\u5230\u4e86 2-3 \u5e74\u7ea7\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u8bc6\u5b57\uff08\u80fd\u5199\u62fc\u97f3\u6587\u5b57\uff09\u4e86\uff0c\u7ed9\u4ed6\u4eec\u5e26\u952e\u76d8\u7684\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f iPad\uff0c\u63a5\u89e6\u8ba1\u7b97\u673a\u4e4b\u540e\uff0c\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u5b66\u7f16\u7a0b\uff0c\u5c31\u7b97\u6253\u6e38\u620f\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u6559\u5b69\u5b50\u600e\u4e48\u5199\u6e38\u620f\u3002</p> <p>\u8981\u6ce8\u610f\u5b69\u5b50\u773c\u775b\u7684\u4fdd\u62a4\uff0c\u4e00\u5b9a\u8981\u5e26\u7740\u9632\u84dd\u5149\u7684\u773c\u955c\uff0c\u6bcf\u5929\u7528\u7535\u8111\u65f6\u95f4\u63a7\u5236\u5728 2h \u4ee5\u5185\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#4","title":"4.\u4e0a\u5c0f\u5b66\u524d\uff0c\u7ed9\u5b69\u5b50\u8bb2\u8bb2\u987a\u5e8f\u3001\u5206\u652f\u3001\u5faa\u73af\u8fd9\u4e9b\u7a0b\u5e8f\u7684\u57fa\u672c\u903b\u8f91","text":""},{"location":"Family-Education/must-do-list-for-parents/#5","title":"5.\u5f53\u5b69\u5b50\u80fd\u542c\u61c2\u540e\uff0c\u7ed9\u5b69\u5b50\u8bb2\u8bb2\u5de5\u5177\u7684\u4f7f\u7528\uff1a","text":"<p>(1)\u8fd9\u4e2a\u5de5\u5177\u662f\u4ec0\u4e48</p> <p>(2)\u80fd\u7528\u6765\u505a\u4ec0\u4e48</p> <ul> <li>\u600e\u4e48\u7528\uff1f</li> <li>\u600e\u4e48\u7528\u66f4\u597d\uff1f</li> <li>\u600e\u4e48\u7528\u6700\u597d\uff1f</li> </ul> <p>(3)\u4e0d\u80fd\u7528\u6765\u505a\u4ec0\u4e48\uff1f</p> <ul> <li>\u754c\u9650\u662f\u4ec0\u4e48\uff1f</li> <li>\u5c40\u9650\u662f\u4ec0\u4e48\uff1f</li> <li>\u98ce\u9669\u662f\u4ec0\u4e48\uff1f</li> </ul> <p>\u6765\u81ea\u4e8e\u674e\u7b11\u6765\u4eba\u5de5\u667a\u80fd\u8bfe</p>"},{"location":"Family-Education/must-do-list-for-parents/#6","title":"6.\u4e0a\u5c0f\u5b66\uff0c\u5c31\u5f00\u59cb\u548c\u5b69\u5b50\u8bb2\uff0c\u600e\u4e48\u5b66\u4e60\uff1a","text":"<p>\u62ff\u5230\u4e00\u672c\u6559\u6750\u540e\uff0c\u5148\u628a\u8fd9\u4e2a\u6559\u6750\u91cc\u7684\u5173\u952e\u6982\u5ff5\uff0c\u53ca\u6982\u5ff5\u7684\u5b9a\u4e49\u6458\u6284\u51fa\u6765\uff0c\u5355\u72ec\u505a\u6210\u4e00\u4e24\u5f20\u7eb8\uff0c\u968f\u65f6\u6709\u7a7a\u6ca1\u7a7a\u5c31\u628a\u6982\u5ff5\u62ff\u51fa\u6765\u770b\uff0c\u751a\u81f3\u5230\u80cc\u4e0b\u6765\u7684\u7a0b\u5ea6\u3002</p> <p>\u7f57\u80d6\u300a\u9605\u8bfb\u7684\u65b9\u6cd5\u300b</p> <p>\u6709\u4f4d\u670b\u53cb\u7684\u5988\u5988\u662f\u4e2d\u5b66\u8001\u5e08\u3002\u4e0a\u5b66\u7684\u65f6\u5019\uff0c\u5988\u5988\u544a\u8bc9\u8fc7\u4ed6\u4e00\u4e2a\u5b66\u4e60\u7684\u7a8d\u95e8\uff1a\u65b0\u5b66\u671f\u5f00\u5b66\uff0c\u9886\u4e86\u65b0\u53d1\u7684\u8bfe\u672c\u4e4b\u540e\uff0c\u4e0d\u8981\u7b49\u8001\u5e08\u8bb2\uff0c\u81ea\u5df1\u5148\u4ece\u5934\u5230\u5c3e\u7ffb\u4e00\u904d\uff0c\u4e86\u89e3\u5176\u4e2d\u7684\u51e0\u4e2a\u5173\u952e\u6982\u5ff5\u3002\u4e0d\u6c42\u751a\u89e3\u4e5f\u884c\uff0c\u751f\u541e\u6d3b\u5265\u4e5f\u884c\u3002</p> <p>\u4f60\u4f1a\u53d1\u73b0\uff0c\u4e00\u95e8\u8bfe\u4e00\u5b66\u671f\u5176\u5b9e\u5c31\u8bb2\u533a\u533a\u51e0\u4e2a\u6982\u5ff5\u3002</p> <p>\u6bd4\u5982\uff0c\u9ad8\u4e00\u4e0a\u5b66\u671f\u7684\u7269\u7406\u8bfe\u672c\uff0c\u4e3b\u8981\u8bb2\u4e09\u4e2a\u6982\u5ff5\u2014\u2014\u725b\u987f\u7b2c\u4e00\u5b9a\u5f8b\u3001\u725b\u987f\u7b2c\u4e8c\u5b9a\u5f8b\u3001\u725b\u987f\u7b2c\u4e09\u5b9a\u5f8b\u3002</p> <p>\u5230\u4e86\u4e0b\u5b66\u671f\uff0c\u6838\u5fc3\u4e5f\u662f\u4e24\u4e2a\u6982\u5ff5\uff1a\u4e07\u6709\u5f15\u529b\u5b9a\u5f8b\u548c\u80fd\u91cf\u5b88\u6052\u5b9a\u5f8b\u3002</p> <p>\u5728\u8001\u5e08\u8bb2\u8bfe\u4e4b\u524d\uff0c\u8bd5\u7740\u628a\u8fd9\u4e9b\u8bcd\u7406\u89e3\u4e00\u904d\uff0c\u6293\u4f4f\u51e0\u4e2a\u5173\u952e\u7684\u7ebf\u5934\uff0c\u5b66\u8d77\u6765\u4f1a\u7279\u522b\u5feb\u3002</p> <p>\u8fd9\u4e9b\u7ebf\u5934\u5c31\u50cf\u4e00\u6761\u6761\u7ef3\u7d22\uff0c\u6709\u4e86\u5b83\u4eec\uff0c\u4ee4\u4eba\u6050\u60e7\u7684\u832b\u832b\u5927\u6d77\u5c31\u53d8\u6210\u4e86\u6ce2\u5e73\u6d6a\u9759\u7684\u6e38\u6cf3\u6c60\u3002</p> <p>\u82f1\u8bed\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662f\u591a\u542c\u591a\u8bfb\uff0c\u8bfb\u7684\u591a\u4e86\u81ea\u7136\u8bed\u4e49\u81ea\u89c1\u3002</p> <p>\u53c2\u8003\u300a\u4eba\u4eba\u90fd\u80fd\u7528\u82f1\u8bed\u300b</p>"},{"location":"Family-Education/must-do-list-for-parents/#7","title":"7.\u4e0d\u6eba\u7231\u5b69\u5b50\uff0c\u7ed9\u5b69\u5b50\u591a\u591a\u8f93\u5165\uff0c\u542c\u4e66\u4e5f\u597d\uff0c\u5e26\u4ed6\u51fa\u53bb\u957f\u89c1\u8bc6\u4e5f\u597d\u3002","text":"<p>\u4eca\u5929\u542c\u674e\u7b11\u67652024\u5e744\u6708\u5e95\u7684\u6708\u5ea6\u76f4\u64ad\uff0c\u4ed6\u5206\u4eab\u4e86\u4e00\u672c\u4e66\uff0c\u53eb\u505alive wired\uff0c\u8fd9\u672c\u4e66\u91cc\u9762\u63d0\u5230\u4e00\u4e2a\u89c2\u70b9\u5c31\u662f: \u6211\u4eec\u7684\u5927\u8111\u662f\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\uff0c\u8fdb\u800c\u8c08\u5230\u4e86\u5bb6\u5ead\u6559\u80b2\u3002</p> <p>https://www.amazon.com/Livewired-Inside-Story-Ever-Changing-Brain/dp/030790749X</p> <p>\u90a3\u4e48\u7ed9\u51fa\u7684\u89c2\u70b9\u662f\u4ec0\u4e48\u5462\uff1f\u5c31\u662f\u5728\u5bb6\u5ead\u6559\u80b2\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u662f\u5728\u5b69\u5b50\u6210\u957f\u8fc7\u7a0b\u4e2d\uff0c\u5929\u8d4b\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u672c\u8eab\u5927\u8111\u5c31\u6709\u5f88\u5f3a\u7684\u53ef\u5851\u6027\uff0c\u7136\u540e\u4e66\u4e2d\u4e3e\u4e86\u4e00\u4e9b\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4\u56fd\u5916\u6709\u7684\u4eba\u60a3\u4e86\u766b\u75eb\uff0c\u7136\u540e\u56e0\u6b64\u4ed6\u4ece\u5c0f\u88ab\u5207\u9664\u4e86\u4e00\u534a\u7684\u90a3\u4e2a\u5927\u8111\u76ae\u5c42\uff0c\u4f46\u662f\u4ed6\u957f\u5927\u4e4b\u540e\uff0c\u4ed6\u7adf\u7136\u8fd8\u80fd\u591f\u50cf\u6b63\u5e38\u4eba\u4e00\u6837\u751f\u6d3b\uff0c\u8bf4\u660e\u5927\u8111\u53ef\u5851\u6027\u975e\u5e38\u5f3a\u3002\u7b2c\u4e8c\u4e2a\uff0c\u5c31\u662f\u5728\u5b69\u5b50\u6210\u957f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u66f4\u91cd\u8981\u7684\u662f\u8981\u521b\u9020\u4e00\u4e2a\u597d\u7684\u73af\u5883\uff0c\u6452\u5f03\u4e0d\u592a\u597d\u7684\u6210\u957f\u73af\u5883\u3002\u90a3\u4e48\u674e\u7b11\u6765\u5177\u4f53\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002</p> <p>\u7b2c\u4e00\u4e2a\u662f\u5982\u679c\u80fd\u5e26\u5b69\u5b50\u51fa\u53bb\uff0c\u5c31\u5c3d\u53ef\u80fd\u7684\u5e26\u5b69\u5b50\u51fa\u53bb\uff0c\u8fd9\u4e2a\u4e5f\u662f\u4e00\u4e2a\u957f\u89c1\u8bc6\uff0c\u5bf9\u5b69\u5b50\u6765\u8bf4\u8f93\u5165\u7684\u8fc7\u7a0b\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u662f\u4ed6\u4eec\u8bf7\u4e86\u4fdd\u59c6\uff0c\u521b\u9020\u4e86\u4e00\u4e2a\u591a\u8bed\u8a00\u7684\u73af\u5883\uff0c\u4ed6\u7684\u4fdd\u59c6\u8bf4\u97e9\u8bed\u3002\u7136\u540e\u8fd8\u8bf7\u4fdd\u59c6\u6bcf\u5929\u5927\u58f0\u8bfb\u4e66\u81f3\u5c112h\uff0c\u4e0d\u7ba1\u5b69\u5b50\u80fd\u5426\u542c\u61c2\uff0c\u5236\u9020\u5927\u91cf\u8f93\u5165\u518d\u8bf4\u3002</p> <p>\u7b2c\u4e09\uff0c\u675c\u7edd\u4e0d\u592a\u597d\u7684\u6210\u957f\u73af\u5883\uff0c\u5c24\u5176\u662f\u4e0d\u8981\u6eba\u7231\u5b69\u5b50\uff0c\u5177\u4f53\u8868\u73b0\u5982\u5b69\u5b50\u54ed\u95f9\uff0c\u5927\u5bb6\u90fd\u4e0d\u7406\u5b83\uff0c\u8fd9\u6837\u5b69\u5b50\u54ed\u4e86\u4e00\u4f1a\u81ea\u5df1\u4e5f\u89c9\u5f97\u6ca1\u610f\u601d\uff0c\u7b49\u5230\u5b69\u5b50\u6b63\u5e38\u8bf4\u8bdd\u4e86\uff0c\u5927\u4eba\u518d\u8ddf\u5b69\u5b50\u6c9f\u901a\u3002\u8981\u505a\u5230\u8fd9\u70b9\u5e76\u975e\u90a3\u4e48\u5bb9\u6613\uff0c\u4e0d\u4ec5\u8981\u8ddf\u53e6\u4e00\u534a\u8bf4\u6e05\u695a\uff0c\u8fd8\u8981\u8ddf\u6211\u7684\u7236\u6bcd\u8bf4\u6e05\u695a\u8fd9\u6837\u505a\u7684\u597d\u5904\u3002\u518d\u6bd4\u5982\uff0c\u4ece\u5b69\u5b50\u4e0a\u5e7c\u513f\u56ed\u5f00\u59cb\uff0c\u5b69\u5b50\u7684\u4e66\u5305\u81ea\u5df1\u80cc\uff0c\u7236\u6bcd\u5c31\u4e0d\u8981\u7ed9\u5b69\u5b50\u4ec0\u4e48\u63d0\u8fd9\u63d0\u90a3\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u4e5f\u80fd\u8ba9\u4ed6\u66f4\u65e9\u7684\u517b\u6210\u72ec\u7acb\u81ea\u4e3b\u4e60\u60ef\u3002</p> <p>\u5f53\u7136\uff0c\u6eba\u7231\u8fd8\u6709\u5f88\u591a\u65b9\u9762\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u591a\u53bb\u770b\u770b\u5176\u4ed6\u7684\u7236\u6bcd\u554a\uff0c\u4e0d\u592a\u597d\u7684\u4e60\u60ef\uff0c\u8fd9\u4e2a\u4e5f\u8981\u5c3d\u53ef\u80fd\u907f\u514d\uff0c\u53cd\u6b63\u603b\u5f52\u5c31\u662f\u4e0d\u8981\u6eba\u7231\u5b69\u5b50\u3002</p> <p>\u4e0d\u5e26\u5b69\u5b50\u53bb\u5377\u8865\u4e60\u73ed</p> <p>\u56e0\u4e3a\u8865\u4e60\u73ed\u901a\u5e38\u4e0d\u662f\u56e0\u6750\u65bd\u6559\uff0c\u8001\u5e08\u8bb2\u7684\u592a\u6df1\uff0c\u5b69\u5b50\u4e5f\u542c\u4e0d\u61c2\uff0c\u8bb2\u5f97\u592a\u8f7b\uff0c\u53c8\u6ca1\u4ec0\u4e48\u7528\u3002\u6700\u597d\u662f\u8001\u5e08\u8bb2\u7684\uff0c\u5c31\u662f\u5b69\u5b50\u5b66\u79d1\u8584\u5f31\u7684\u73af\u8282\uff0c\u53ef\u8fd9\u6837\u7684\u8001\u5e08\uff0c\u80af\u5b9a\u662f\u79c1\u4eba\u5b9a\u5236\uff0c\u54ea\u6765\u8fd9\u6837\u7684\u597d\u8001\u5e08\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#8","title":"8.\u5b69\u5b50\u8bfe\u7a0b\u7684\u5b66\u4e60\uff0c\u5728\u53bb\u4e0a\u8bfe\u7684\u65f6\u5019\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002","text":"<p>\u610f\u601d\u662f\u8981\u7763\u4fc3\u81ea\u5df1\u7684\u5b69\u5b50\u5728\u4e0a\u4e00\u8282\u8bfe\u524d\uff0c\u4e00\u5b9a\u8981\u628a\u8981\u4e0a\u7684\u8bfe\u7a0b\u5168\u90fd\u901a\u8bfb\u81f3\u5c11\u4e00\u904d\uff0c\u4e0d\u901a\u8bfb\u4e0d\u8ba9 ta \u5403\u996d\u3002</p> <p>\u53ea\u8981\u662f\u9884\u4e60\u4e86\u7684\uff0c\u6ca1\u6709\u662f\u5b66\u6e23\u7684\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#9","title":"9.\u901a\u8fc7\u63d0\u95ee\u6765\u9a8c\u6536\u5b69\u5b50\u7684\u9884\u4e60\u6548\u679c\u3002","text":"<p>\u57fa\u7840\u903b\u8f91\u5c31\u662f\u5982\u4e0b\u56db\u4e2a\u65b9\u9762\uff1a</p> <ul> <li>\u5b9a\u4e49\uff1aX \u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff0cX \u7684\u5b9a\u4e49\u4e0d\u662f\u4ec0\u4e48</li> <li>\u5206\u7c7b\uff1aX\u5305\u62ec\u4ec0\u4e48\uff0cX \u4e0d\u5305\u62ec\u4ec0\u4e48\uff0cY \u662f\u5426\u5305\u62ec</li> <li>\u6bd4\u8f83\uff1aX \u4e0e Y \u7684\u533a\u522b\u662f\u4ec0\u4e48\uff0c\u90a3\u4e2a\u66f4\u5f3a\uff0c\u54ea\u4e2a\u66f4\u5dee\uff0c\u54ea\u4e2a\u66f4\u91cd\u8981\uff1b\u4ec0\u4e48\u6837\u7684\u60c5\u51b5\u4e0b\uff0cX \u4e0e Y \u600e\u4e48\u6837</li> <li>\u56e0\u679c\uff1aX \u662f Y \u7684\u539f\u56e0\u5417\uff0cX \u662f Y \u7684\u552f\u4e00\u539f\u56e0\uff0cX \u662f Y \u4e2d\u6700\u91cd\u8981\u7684\u539f\u56e0\u5417</li> </ul> <p>\u5e94\u7528\uff1aX \u600e\u4e48\u7528\u662f\u66f4\u6709\u6548\u7684</p> <p>\u4e3e\u4e00\u53cd\u4e09\uff1a\u8fd9\u4e2a\u9053\u7406\u8fd8\u80fd\u7528\u5728\u4ec0\u4e48\u5730\u65b9</p> <p>\u60f3\u5f97\u66f4\u4e3a\u91cd\u8981</p> <p>\u6ce8\u610f\uff1a\u4e0d\u80fd\u95ee\u7b54\u6848\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\uff0c\u8fd9\u4f1a\u964d\u4f4e\u4f60\u7684\u6743\u5a01\u529b\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#10ta","title":"10.\u5b69\u5b50\u8bfb\u5c0f\u5b66\uff0c\u4f1a\u7b97\u6570\u540e\uff0c\u7ed9ta\u8bb2\u7406\u8d22\u89c2\u5ff5\uff1a","text":"<p>\u2014\u2014\u6765\u81ea \u90b9\u5c0f\u5f3a \u5982\u4f55\u901a\u8fc7\u2018\u7238\u7238\u94f6\u884c\u2019\u57f9\u517b\u5b69\u5b50\u7684\u7406\u8d22\u89c2\u5ff5\uff1f \u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u4eca\u5e74\u8fc7\u5e74\u4eb2\u621a\u95f4\u8d70\u52a8\u7684\u5c11\u4e86\uff0c\u53d1\u62dc\u5e74\u77ed\u4fe1\u7684\u4e5f\u5c11\u4e86\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u5bb6\u5b69\u5b50\u8fd8\u662f\u6536\u5230\u4e86\u4e0d\u5c11\u538b\u5c81\u94b1\uff0c\u90a3\u4e48\u8fd9\u4e9b\u538b\u5c81\u94b1\u8be5\u600e\u4e48\u7ba1\u7406\u624d\u80fd\u589e\u52a0\u5b69\u5b50\u5bf9\u7406\u8d22\u7684\u8ba4\u8bc6\u5462\uff1f</p> <p>\u6211\u4eca\u5e74\u7684\u5c1d\u8bd5\u53ef\u4ee5\u4f9b\u4f60\u53c2\u8003\uff1a</p> <p>\uff081\uff09\u94fa\u57ab\uff1a\u67d0\u5929\u4ece\u4eb2\u621a\u5bb6\u56de\u6765\u4ee5\u540e\uff0c\u4e00\u8fb9\u6362\u8863\u670d\u6211\u5c31\u4e00\u8fb9\u95ee\u5b69\u5b50\uff0c\u4f60\u6536\u7684\u8fd9\u4e9b\u538b\u5c81\u94b1\u6253\u7b97\u600e\u4e48\u529e\uff1f\u5b69\u5b50\u56de\u7b54\u8bf4\uff1a\u5b58\u8d77\u6765\uff0c\u90a3\u4f60\u5b58\u8fd9\u4e9b\u94b1\u6253\u7b97\u5e72\u5565\u7528\u5462\uff1f\u5979\u56de\u7b54\uff1a\u4e70\u6211\u60f3\u4e70\u7684\u4e1c\u897f\uff0c\u7136\u540e\u6211\u53c8\u95ee\uff1a\u90a3\u4f60\u60f3\u4e0d\u60f3\u8ba9\u4f60\u7684\u94b1\u751f\u51fa\u66f4\u591a\u7684\u94b1\u5462\uff1f\u5b69\u5b50\u5f53\u7136\u5f88\u611f\u5174\u8da3\u4e86\uff0c\u4f46\u8fd9\u8fd8\u4e0d\u591f\uff0c\u5979\u603b\u62c5\u5fc3\u94b1\u653e\u6211\u8fd9\u91cc\u5c31\u4e0d\u7ed9\u5979\u4e86\uff0c\u7136\u540e\u6211\u8bf4\uff1a\u6211\u7ed9\u4f602%\u7684\u6708\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u62ff100\u5757\u653e\u6211\u8fd9\u91cc\uff0c\u6211\u5c31\u662f\u4f60\u7684\u94f6\u884c\uff0c1\u4e2a\u6708\u4e4b\u540e\uff0c\u4f60\u5c31\u80fd\u62ff\u5230102\u5757\uff0c10000\u5757\u653e\u6211\u8fd9\u91cc\uff0c1\u4e2a\u6708\u5c31\u80fd\u62ff\u523010200\u5757\uff0c\u5979\u542c\u7684\u773c\u775b\u53d1\u4eae\uff0c\u7136\u540e\u6211\u621b\u7136\u800c\u6b62\uff0c\u8bf4\uff1a\u201c\u4f60\u53ef\u4ee5\u81ea\u5df1\u597d\u597d\u8003\u8651\u4e0b\u201d</p> <p>\uff082\uff09\u8bb2\u89e3\uff1a\u7b2c\u4e8c\u5929\u65e9\u6668\uff0c\u5b69\u5b50\u8ddf\u6211\u8bf4\u5979\u628a\u8fd9\u4e2a\u4e8b\u513f\u601d\u8003\u4e86\u4e00\u665a\u4e0a\uff0c\u51b3\u5b9a\u8fd8\u662f\u628a\u94b1\u653e\u5230\u201c\u7238\u7238\u94f6\u884c\u201d\u91cc\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u624d\u5f00\u59cb\u5728\u767d\u677f\u4e0a\u8ddf\u5979\u8be6\u7ec6\u7684\u8bb2\uff0c\u6d41\u52a8\u8d44\u91d1\u3001\u50a8\u84c4\u91d1\u3001\u5229\u7387\u3001\u56de\u62a5\u3001\u94f6\u884c\u662f\u600e\u4e48\u8d5a\u94b1\u7684\uff0c\u8fd9\u4e9b\u4e1c\u897f\uff0c\u5b69\u5b50\u542c\u7684\u7279\u522b\u8ba4\u771f\u4ed4\u7ec6\uff0c\u7136\u540e\u8bf4\u6253\u7b97\u5b585000\u5757\u5230\u201c\u7238\u7238\u94f6\u884c\u201d\uff0c\u7136\u540e\u6211\u7ed9\u5979\u4e86\u4e00\u4e2a\u9009\u62e9\uff1a\u53ef\u4ee5\u56fa\u5b9a\u672c\u91d1\uff0c\u6309\u6708\u652f\u53d6\u5229\u606f\uff0c\u6bd4\u5982\u5b585000\uff0c\u6bcf\u6708\u90fd\u652f\u51fa100\u5229\u606f\uff0c\u4e5f\u53ef\u4ee5\u590d\u5229\uff0c\u79ef\u7d2f\u5230\u5e74\u5e95\u4e00\u6b21\u6027\u652f\u4ed8\uff0c\u5b69\u5b50\u9009\u62e9\u4e86\u524d\u8005\uff0c\u4f30\u8ba1\u8fd8\u662f\u60f3\u843d\u888b\u4e3a\u5b89\u5427\uff0c\u5bf9\u6211\u8fd8\u662f\u4e0d\u653e\u5fc3\u554a\uff0c\u54c8\u54c8</p> <p>\uff083\uff09\u534f\u8bae\uff1a\u4ee4\u6211\u60ca\u8bb6\u7684\u662f\uff0c\u5b69\u5b50\u4e3b\u52a8\u63d0\u51fa\u8981\u8ddf\u6211\u7b7e\u534f\u8bae\uff0c\u65e9\u5c31\u51c6\u5907\u597d\u4e86\u7b14\u548c\u7eb8\uff0c\u6211\u4eec\u5c31\u628a\u6700\u7b80\u5355\u7684\u672c\u91d1\u3001\u5229\u606f\u3001\u4ea4\u5272\u3001\u7ed3\u7b97\u5468\u671f\u3001\u7532\u65b9\u4e59\u65b9\u548c\u65e5\u671f\uff0c\u5199\u4e86\u4e0a\u53bb\uff0c\u5f53\u6211\u8981\u7528\u90b9\u5c0f\u5f3a\u7b7e\u540d\u7684\u65f6\u5019\uff0c\u5b69\u5b50\u62d2\u7edd\u4e86\uff0c\u5979\u575a\u6301\u8ba9\u6211\u7528\u771f\u540d\u7b7e\u540d\uff0c\u770b\u6765\u5979\u8fd8\u662f\u6709\u70b9\u5408\u7ea6\u610f\u8bc6\u7684</p> <p>\uff084\uff09\u4ea4\u5272\uff1a\u5979\u628a\u94b1\u4ece\u94b1\u5305\u91cc\u5c0f\u5fc3\u7ffc\u7ffc\u7684\u62ff\u51fa\u6765\uff0c\u4e00\u5f20\u4e00\u5f20\u7684\u6570\u5b8c\uff0c\u7136\u540e\u4ea4\u7ed9\u6211\uff0c\u6211\u8fd8\u7279\u522b\u5f3a\u8c03\u8bf4\u94b1\u8d22\u8981\u5f53\u9762\u70b9\u6e05\uff0c\u5f53\u5979\u7684\u9762\u70b9\u5b8c\uff0c\u88c5\u5230\u4e00\u4e2a\u76d2\u5b50\u91cc\uff0c\u5b69\u5b50\u8fd8\u5bb3\u6015\u6211\u628a\u76d2\u5b50\u5f04\u4e22\uff0c\u4e13\u95e8\u5728\u4e0a\u9762\u5199\u4e86\u5b57\uff1a\u201c\u94f6\u884c\uff0c\u683c\u683c\u7684\u94b1\uff01\u201d\u597d\u4e00\u4e2a\u611f\u53f9\u53f7\u5440\uff01</p> <p>\uff085\uff09\u6267\u884c\uff1a\u6267\u884c\u8d77\u6765\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u6211\u5728\u6ef4\u7b54\u6e05\u5355\u4e0a\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u5faa\u73af\u63d0\u9192\uff0c\u4ece\u4e0b\u4e2a\u6708\u768417\u53f7\u5f00\u59cb\uff0c\u7ed9\u5b69\u5b50\u652f\u4ed8\u5229\u606f</p> <p>\u6574\u4e2a\u4ea4\u6613\u4e0b\u6765\u6211\u4f53\u4f1a\u5230\uff1a\u8ddf\u5b69\u5b50\u505a\u5979\u611f\u5174\u8da3\u7684\u4e8b\u60c5\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u4e86\uff0c\u4e4b\u524d\u4e5f\u6709\u4e86\u89e3\u8fc7PBL\uff08\u9879\u76ee\u5f0f\u5b66\u4e60\uff09\uff0c\u8fd9\u6b21\u7b97\u662f\u4e00\u6b21\u5b9e\u8df5\u4e86\uff0c\u4f60\u662f\u600e\u4e48\u5728\u5408\u4f5c\u9879\u76ee\u4e2d\u8ddf\u5b69\u5b50\u4e00\u8d77\u5b66\u4e60\u6210\u957f\u7684\uff1f\u4e0d\u59a8\u4e5f\u53ef\u4ee5\u8bf4\u8bf4\u54e6</p>"},{"location":"Family-Education/must-do-list-for-parents/#11","title":"11.\u6559\u5b69\u5b50\u591a\u5206\u4eab","text":"<p>\u5bf9\u4e8e\u5b69\u5b50\uff0c\u5b69\u5b50\u4e0a\u5b66\u540e\uff0c\u8981\u544a\u8bc9TA\uff1a\u8981\u4e50\u4e8e\u5206\u4eab\uff0c\u8b6c\u5982\u4f60\u77e5\u9053\u4e00\u4e2a\u89e3\u9898\u65b9\u6cd5\uff0c\u4f60\u77e5\u9053\u5565\u5565\uff0c\u6709\u540c\u5b66\u95ee\u4f60\uff0c\u4f60\u4e00\u5b9a\u8981\u8010\u5fc3\u8bb2\u2014\u2014\u5bf9\u81ea\u5df1\u6709\u597d\u5904\u3002</p> <p>\u51fa\u81ea\uff1a\u674e\u7b11\u6765\u300a\u81ea\u5b66\u662f\u95e8\u624b\u827a\u300b\u7b2c17\u7ae0</p> <p>8\u3001\u674e\u7b11\u6765\u300a\u5bb6\u5ead\u6559\u80b2\u7684\u771f\u76f8\u300b\u3001\u300a\u4e13\u6ce8\u7684\u771f\u76f8\u300b\u8fd9\u95e8\u8bfe\u7a0b\u8981\u597d\u597d\u770b\u770b</p>"},{"location":"Family-Education/must-do-list-for-parents/#12","title":"12.\u8981\u81ea\u5df1\u4ee5\u8eab\u4f5c\u5219","text":"<p>\u4eb2\u81ea\u6f14\u793a\u6bcf\u5929\u4e13\u6ce83\u5c0f\u65f6\uff0c\u4e00\u5e74\u8fbe\u5230\u4e13\u4e1a\u6c34\u5e73\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u5b50\u5973\u8033\u6fe1\u76ee\u67d3\uff0c\u8fd9\u662f\u4e0d\u7528\u8fc7\u591a\u8a00\u8bed\u7684\u505a\u5230\uff0c\u4f1a\u8ba9\u53e6\u4e00\u534a\u4f69\u670d\uff0c\u8d62\u5f97\u5b50\u5973\u7684\u5c0a\u91cd\u3002</p> <p>\u300a\u4eba\u4eba\u90fd\u80fd\u7528\u82f1\u8bed-2024\u7248\u300b</p>"},{"location":"Family-Education/must-do-list-for-parents/#13","title":"13.\u4ece\u5c0f\u5c31\u8981\u8ba9\u5b69\u5b50\u77e5\u9053\uff0c\u4e0d\u662f\u6240\u6709\u4e1c\u897f\u4f60\u60f3\u8981\u5c31\u80fd\u5f97\u5230\u3002","text":"<p>\u8b6c\u5982\u6709\u7684\u5b69\u5b50\u60f3\u8981\u6c7d\u8f66\u6a21\u578b\uff0c\u7136\u540e\u7236\u6bcd\u5c3d\u91cf\u6ee1\u8db3\u5b69\u5b50\u7684\u9700\u6c42\uff0c\u4e8e\u662f\u8fd9\u4e2a\u5b69\u5b50\u7684\u5bb6\u91cc\u5145\u6ee1\u4e86\u5404\u79cd\u5404\u6837\u7684\u6c7d\u8f66\u6a21\u578b\u3002 \u8fd9\u4e2a\u6eba\u7231\u5b69\u5b50\u7684\u574f\u5904\u662f\uff1a\u5b69\u5b50\u7684\u6b32\u671b\u4e00\u6b21\u6bd4\u4e00\u6b21\u9ad8\uff0c\u5982\u679c\u4e00\u6b21\u4e0d\u6ee1\u8db3\uff0c\u5b69\u5b50\u5c31\u54ed\u95f9\u3002</p> <p>\u674e\u7b11\u6765\u4ece\u6765\u4e0d\u4f1a\u56e0\u4e3a\u5b69\u5b50\u559c\u6b22\uff0c\u5c31\u6ee1\u8db3\u5b69\u5b50\u3002</p> <p>\u5bb6\u957f\u53ea\u7ed9\u5b69\u5b50\u4e70\u5fc5\u8981\u7684\u4e1c\u897f\uff1a\u5403\u559d\u62c9\u6492\u7761\uff0c\u8863\u98df\u4f4f\u884c\u7b49\u751f\u6d3b\u6240\u5fc5\u9700\u3002 \u54ea\u6015\u6492\u5a07\u4e86\uff0c\u4e5f\u4e0d\u7ed9\u4e70\u3002\u4ece\u4e00\u5f00\u59cb\u5c31\u7ed9\u5b69\u5b50\u517b\u6210\u4efb\u4f55\u60f3\u8981\u5c31\u7ed9\u4f60\u4e70\u7684\u574f\u4e60\u60ef\u3002 \u5982\u679c\u559c\u6b22\u6050\u9f99\uff0c\u53ef\u4ee5\u7ed9\u5b69\u5b50\u4e70\u6050\u9f99\u7684\u4e66\u3002\u4e70\u6050\u9f99\u73a9\u5076\uff0c\u5bf9\u4e0d\u8d77\u6ca1\u6709\u3002\u975e\u60f3\u8981\uff0c\u81ea\u5df1\u60f3\u529e\u6cd5\u3002</p> <p>\u4f5c\u4e3a\u6210\u4eba\uff0c\u4e5f\u8981\u5206\u6e05\u60f3\u8981\u548c\u5fc5\u8981\u3002</p> <p>\u2014\u2014\u674e\u7b11\u6765\u300a\u5bb6\u5ead\u7684\u6559\u80b2\u300b1.6\u8282\u8bfe</p>"},{"location":"Family-Education/must-do-list-for-parents/#14","title":"14.\u4e0d\u8981\u53ea\u7ed9\u5b69\u5b50\u5c55\u73b0\u7f8e\u597d\u7684\u4e00\u9762\uff0c\u8fd8\u8981\u7ed9\u4ed6\u4eec\u8bb2\u574f\u4e8b\u60c5","text":"<p>\u9047\u5230\u574f\u4eba\uff0c\u574f\u4e8b\uff0c\u7136\u540e\u7ed9\u5b69\u5b50\u5206\u6790\u9047\u5230\u4e8b\u60c5\u600e\u4e48\u5904\u7406\u3002</p> <p>\u591a\u8bae\u8bba\u574f\u4e8b\uff0c\u591a\u8ba8\u8bba\u574f\u4eba\uff0c\u6559\u7ed9\u5b69\u5b50\u4e00\u4e9b\u65e0\u89e3\u7684\u56f0\u5883\u3002</p> <p>\u575a\u51b3\u4e0d\u8981\u7528\u7ae5\u8bdd\u53bb\u8499\u853d\u5b69\u5b50\u3002\u8b6c\u5982\u4e0d\u662f\u4e0d\u62a5\uff0c\u65f6\u5019\u672a\u5230\uff1b\u90aa\u4e0d\u538b\u6b63\uff0c\u8fd9\u4e2a\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u9a8c\u8bc1\u3002</p> <p>\u5b69\u5b503-5\u5c81\u7684\u65f6\u5019\uff0c\u5c31\u80fd\u601d\u8003\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u548c\u5b69\u5b50\u8ba8\u8bba\u8fd9\u4e2a\uff0c\u8bb2\u4e66</p> <p>\u4e2d\u56fd\u6cd5\u5236\u51fa\u7248\u793e\u300a\u5e74\u5ea6\u6848\u4f8b\u300b\uff0c23\u518c\u3002\u8fd9\u662f\u7edd\u5bf9\u5fc5\u987b\u7684\u3002\u5bb6\u957f\u4eec\u5fc5\u987b\u770b\uff0c\u6bcf\u4e2a\u6210\u5e74\u4eba\u90fd\u5e94\u8be5\u8ba4\u771f\u770b\u3002\u5bb6\u957f\u9605\u8bfb\u540e\uff0c\u5728\u5fc5\u8981\u65f6\u6311\u9009\u4e00\u4e9b\u6848\u4f8b\uff0c\u8bb2\u7ed9\u5b69\u5b50\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#15","title":"15.\u8fd9\u53e5\u8bdd\u8d8a\u65e9\u5bf9\u5b69\u5b50\u8bf4\u8d8a\u597d\uff1a\u4f60\u73b0\u5728\u662f\u5927\u4eba\u4e86\uff0c\u4f60\u8981\u81ea\u5df1\u51b3\u5b9a\uff1b\u4f60\u8981\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u5224\u65ad\uff0c\u90a3\u6211\u4eec\u4e00\u8d77\u8ba8\u8bba\u3002","text":"<p>\u5bf9\u5b69\u5b50\u8bf4\u505a\u51b3\u7b56\u7684\u4e09\u4e2a\u539f\u5219\uff1a\u8bf4\u627f\u62c5\u540e\u679c\u8c01\u505a\u9009\u62e9</p> <p>\u5bf92-3\u5c81\u7684\u5b69\u5b50\u5c31\u5e94\u8be5\u5f00\u59cb\u8bf4\u4e86</p> <p>\u2014\u2014\u674e\u7b11\u6765\u300a\u5bb6\u5ead\u7684\u6559\u80b2\u300b1.8 \u8282\u8bfe</p>"},{"location":"Family-Education/must-do-list-for-parents/#16","title":"16.\u51fa\u73b0\u95ee\u9898\uff0c\u5148\u53bb\u89e3\u51b3\u95ee\u9898\u3002","text":"<p>\u5bb6\u5ead\u6210\u5458\u4e4b\u95f4\uff0c\u8981\u76f8\u4e92\u6276\u6301\uff0c\u4e0d\u8981\u4e92\u76f8\u62b1\u6028\uff0c\u5148\u628a\u56f0\u5883\u5ea6\u8fc7\uff1b\u5fc5\u8981\u7684\u65f6\u5019\u8ffd\u7a76\u8d23\u4efb\uff0c\u4f46\u662f\u8ffd\u7a76\u8d23\u4efb\u662f\u4e3a\u4e86\u4e0b\u6b21\u505a\u66f4\u597d\u7684\u51b3\u7b56\u3002</p>"},{"location":"Family-Education/must-do-list-for-parents/#17","title":"17.\u8ba9\u5b69\u5b50\u4ece\u5c0f\u517b\u6210\u8dd1\u6b65\u7684\u4e60\u60ef","text":"<p>\u5b69\u5b50\u80fd\u6b63\u5e38\u8dd1\u7684\u65f6\u5019\uff0c\u5c3d\u91cf\u8ba9\u5b69\u5b50\u8dd1\uff0c\u5c0f\u5b69\u8dd11\u5e74\uff0c\u5c31\u4f1a\u8dd1\u4e00\u8f88\u5b50\u3002</p> <p>\u53ea\u8981\u5c0f\u5b69\u5b50\u80fd\u6b63\u5e38\u8d70\u8def\uff0c\u5c31\u8981\u65ad\u7edd\u62b1\u7740\u4ed6\u7684\u4e60\u60ef\u3002</p> <p>\u4ece15\u4e2a\u6708\u5f00\u59cb\u3002\u4e0d\u4f1a\u5141\u8bb8\u963f\u59e8\u3001\u7237\u7237\u5976\u5976\u62b1\u5b69\u5b50\uff0c\u5982\u679c\u5b69\u5b50\u7d2f\u4e86\uff0c\u53ef\u4ee5\u7b49\u4e00\u7b49\u5b69\u5b50\u3002</p> <p>\u674e\u7b11\u6765\u5b69\u5b5018-20\u4e2a\u6708\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5f92\u6b65\u8d702\u4e2a\u5c0f\u65f6\u3002</p> <p>\u674e\u7b11\u6765\u7684\u5b69\u5b50\u4e0d\u7528\u54c4</p> <p>\u5b69\u5b505-6\u5c81\u4e86\uff0c\u8fd8\u8ba9\u5b69\u5b50\u5750\u5a74\u513f\u8f66\u3002</p> <p>\u5efa\u8bae\u8ba9\u6240\u6709\u7684\u5b69\u5b50\u5b66\u4e00\u95e8\u640f\u51fb\u672f\uff0c\u5c24\u5176\u662f\u5973\u5b69\u5b50\u3002\u5973\u5b69\u5b50\u6709\u80fd\u529b\u4fdd\u62a4\u81ea\u5df1\u975e\u5e38\u91cd\u8981\u3002\u62f3\u51fb\u3001\u8dc6\u62f3\u9053\u3001\u5df4\u897f\u67d4\u672f\u9009\u4e00\u4e2a\u5c31\u53ef\u4ee5\u3002</p> <p>\u4e0d\u8981\u53d7\u4f20\u7edf\u89c2\u5ff5\u5f71\u54cd\uff0c\u8ba4\u4e3a\u5973\u5b69\u5b50\u8981\u67d4\u5f31\u70b9\u3002</p>"},{"location":"Family-Education/English/pronunciation/","title":"\u7559\u7740\u4ee5\u540e\u66f4\u65b0","text":"<p>This is a test.</p>"},{"location":"Family-Education/English/reading-list-for-each-stage/","title":"\u5b69\u5b50\u5404\u9636\u6bb5\u4e66\u5355","text":"<p>This is a reading list for each stage of English learning, whether you are 3-5 years old, 6-12 years old, or 13-18 years old. Even adults can benefit from this.</p> <p>When kids can learn Chinese PinYin, you should teach you kid how to program, but you need not to teach them Python or C, we can start by teaching them Scratch. Lego is also a good choice for them to learn programming.</p> <p>Before they go to middle school, you should teach him or her to manage their schedule using to-do list.Just like I am using Excel to manage my schedule.</p>"},{"location":"ME/","title":"\u6211","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"ME/ability/","title":"\u4e2a\u4eba\u80fd\u529b","text":""},{"location":"ME/ability/#_2","title":"\u8bed\u8a00","text":"<ul> <li>\u82f1\u8bed\u80fd\u529b\uff1a\u719f\u7ec3\u638c\u63e1\u542c\u8bf4\u8bfb\u5199\uff0c\u80fd\u591f\u4f7f\u7528\u82f1\u8bed\u8fdb\u884c\u65e5\u5e38\u4ea4\u6d41</li> </ul>"},{"location":"ME/ability/#_3","title":"\u5f00\u53d1","text":"<ul> <li>Python</li> </ul>"},{"location":"ME/ability/#_4","title":"\u521b\u4f5c","text":"<ul> <li>Markdown / HTML</li> <li>PowerPoint\uff1a\u8001\u677f\u5fa1\u7528 PPT \u5236\u4f5c</li> </ul>"},{"location":"ME/account/","title":"\u4e2a\u4eba\u516c\u4f17\u8d26\u53f7","text":"<ul> <li>GitHub<ul> <li>\u5f00\u6e90\u4ee3\u7801\u4ed3\u5e93</li> </ul> </li> <li>\u4e2a\u4eba\u7f51\u7ad9<ul> <li>\u535a\u5ba2\u3001\u6587\u7ae0</li> </ul> </li> <li>Weibo</li> </ul> <p>Note</p> <p>\u70b9\u51fb\u7f51\u7ad9\u53f3\u4e0b\u89d2\u7684\u56fe\u6807\u4e5f\u53ef\u4ee5\u5feb\u901f\u8df3\u8f6c</p>"},{"location":"ME/business-trip-necessities/","title":"\u51fa\u5dee\u5fc5\u5907\u7269\u54c1","text":"<p>\u8eab\u4efd\u8bc1</p> <p>\u65c5\u884c\u5305\u6216\u8005\u5546\u52a1\u5305\uff08\u5317\u4eac\u3001\u6df1\u5733\uff09</p> <p>\u5b89\u8010\u6652\uff0cOlay\u5c0f\u6837\uff0c\u4fdd\u6e7f\u971c\u5c0f\u6837\uff0c\u6d17\u9762\u5976\u5c0f\u6837</p> <p>\u7259\u818f\u7259\u5237</p> <p>\u522e\u80e1\u5200\uff0c\u5145\u6ee1\u7535</p> <p>\u5404\u79cd\u7ebf\uff1aiphone typec 2\u6839\uff0capple watch \u231a\u5145\u7535\u7ebf\uff0c\u5145\u7535\u5b9d\u7684\u7ebf\uff0c\u7528\u4e13\u95e8\u7684\u4e1c\u897f\u88c5\u7ebf</p> <p>\u5145\u7535\u5b9d1\u4e2a</p> <p>PC\uff0c\u7535\u6e90</p> <p>\u5185\u88e43\u4e2a\uff0c\u88e4\u5b501\u4e2a\u5907\u7528\uff0c\u957f\u88962\u5957\uff0c\u889c\u5b503\u53cc</p>"},{"location":"ME/contact/","title":"\u4e2a\u4eba\u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u90ae\u7bb1\uff1aanzchy@qq.com<ul> <li>\u90ae\u4ef6\u57fa\u672c\u4e0a\u4e00\u5929\u5185\u56de\u590d</li> </ul> </li> </ul>"},{"location":"ME/introduction/","title":"\u4e2a\u4eba\u4ecb\u7ecd","text":"<p>\u66f4\u65b0\u4e8e 241108</p>"},{"location":"ME/introduction/#_2","title":"\u4e2a\u4eba\u4fe1\u606f","text":"<ul> <li>\u59d3\u540d\uff1aJack Cheng</li> <li>\u6027\u522b\uff1a\u7537</li> </ul> <p>\u66f4\u591a\u70b9\u51fb\u67e5\u770b</p>"},{"location":"ME/introduction/#_3","title":"\u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u90ae\u7bb1\uff1aanzchy@qq.com</li> </ul> <p>\u66f4\u591a\u70b9\u51fb\u67e5\u770b</p>"},{"location":"ME/introduction/#_4","title":"\u516c\u4f17\u8d26\u53f7","text":"<ul> <li>GitHub</li> <li>Weibo</li> </ul> <p>\u66f4\u591a\u70b9\u51fb\u67e5\u770b</p>"},{"location":"ME/introduction/#_5","title":"\u4e2a\u4eba\u7279\u70b9","text":"<ul> <li>\u6709\u8f83\u5f3a\u7684\u5b66\u4e60\u94bb\u7814\u80fd\u529b  \u5bf9\u524d\u6cbf\u6280\u672f\u611f\u5174\u8da3</li> <li>\u7279\u957f\uff1a\u6444\u5f71</li> <li>\u7231\u597d\uff1a\u8dd1\u6b65\u3001\u9a91\u884c</li> </ul>"},{"location":"ME/introduction/#_6","title":"\u4e3b\u8981\u7ecf\u5386","text":"<p>\u70b9\u51fb\u67e5\u770b</p>"},{"location":"ME/introduction/#_7","title":"\u4e2a\u4eba\u80fd\u529b","text":"<p>\u70b9\u51fb\u67e5\u770b</p>"},{"location":"ME/support/","title":"\u6253\u8d4f\u652f\u6301","text":"<p>\u53ef\u4ee5\u7684\u8bdd\uff0c\u8bf7\u6211\u559d\u4e00\u676f\u5496\u5561\u5427\uff01</p> <p></p>"},{"location":"Reproduce/","title":"\u8f6c\u8f7d","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"WEBSITE/","title":"\u4f60\u597d","text":"<p>\u8fd9\u91cc\u662fJakcheng\u7684\u4e2a\u4eba\u7f51\u7ad9 https://learning.jackcheng.chat</p> <ul> <li>\u901a\u8fc7\u4e3b\u9898\u548c\u76ee\u5f55\u6d4f\u89c8\u6587\u7ae0\u3002<ul> <li>\u7535\u8111\u7aef\uff1a\u5728\u4e0a\u65b9\u6807\u7b7e\u680f\u9009\u62e9\u4e3b\u9898\uff0c\u5728\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0\u3002</li> <li>\u79fb\u52a8\u7aef\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u4e3b\u9898\u548c\u6587\u7ae0\u3002</li> </ul> </li> <li>\u641c\u7d22\u5173\u952e\u8bcd\u67e5\u627e\u6587\u7ae0\u3002</li> </ul>"},{"location":"WEBSITE/#_2","title":"\u4e2a\u4eba\u4fe1\u606f","text":"<p>\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b \u4e2a\u4eba\u4ecb\u7ecd</p>"},{"location":"WEBSITE/build/","title":"\u7f51\u7ad9\u6784\u5efa\u8bf4\u660e","text":""},{"location":"WEBSITE/build/#_2","title":"\u4ecb\u7ecd","text":"<p>\u6211\u4f7f\u7528 Material for MkDocs \u5c06 <code>Markdown\u6587\u4ef6</code> \u6e32\u67d3\u4e3a <code>HTML\u7f51\u9875</code> \u5e76\u4f7f\u7528 <code>GitHub Pages</code> \u8fdb\u884c\u53d1\u5e03</p> <p>Material for MkDocs \u6587\u6863</p> <p>\u8be6\u60c5\u53ef\u4ee5\u67e5\u770bGitHub Pages \u4e2a\u4eba\u7f51\u7ad9\u6784\u5efa\u4e0e\u53d1\u5e03</p>"},{"location":"WEBSITE/build/#_3","title":"\u4ed3\u5e93","text":"<p>\u6b64\u7f51\u7ad9\u7684 Markdown\u6e90\u6587\u4ef6 \u5b58\u50a8\u5728 Anzchy/learning.jackcheng.chat \u4ed3\u5e93\u4e2d\u3002</p>"},{"location":"WEBSITE/help/","title":"\u6587\u7ae0\u7f16\u5199\u5e2e\u52a9","text":""},{"location":"WEBSITE/help/#_2","title":"\u8bed\u8a00\u652f\u6301","text":"<p>\u5e76\u4e0d\u652f\u6301\u82f1\u6587\uff0c\u56e0\u4e3a\u6587\u7ae0\u4e3b\u8981\u4f7f\u7528\u4e2d\u6587\uff0c\u8bbf\u95ee\u8005\u4e3b\u8981\u662f\u4e2d\u56fd\u4eba\u3002</p>"},{"location":"WEBSITE/help/#index","title":"index","text":"<p>\u6700\u5f00\u59cb\u6253\u5f00\u7f51\u7ad9\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u94fe\u63a5 https://learning.jackcheng.chat/ \u8bbf\u95ee\u65f6\uff0c\u4f1a\u5148\u6253\u5f00 <code>/docs/index.md</code>\uff0c\u8fd9\u65f6\u8bbf\u95ee\u8005\u70b9\u51fb\u5de6\u4e0a\u89d2\u6309\u94ae\u5c55\u5f00\u76ee\u5f55\u4f1a\u5148\u770b\u5230\u5927\u7684\u5206\u7c7b\u3002</p> <p>\u56e0\u4e3a\u4e0d\u5e0c\u671b\u7528\u6237\u4e4b\u540e\u627e\u4e0d\u5230\u8fd9\u4e2a\u9875\u9762\uff0c\u6240\u4ee5 <code>/docs/WEBSITE/index.md</code> \u4e0b\u9762\u7684\u5185\u5bb9\u4e0e <code>/docs/index.md</code> \u7684\u5185\u5bb9\u4e00\u81f4\u3002</p> <p>\u6bcf\u4e2a nav \u7684 tab \u4e0b\u6709\u4e00\u4e2a <code>index.md</code>\uff0c\u70b9\u51fb tab \u4f1a\u5148\u8df3\u8f6c\u5230\u8fd9\u4e9b <code>index.md</code>\u3002</p> <p>\u6240\u4ee5 \u5982\u4e0b\u63d0\u793a\u53ef\u4ee5\u5ffd\u7565\uff1a</p> Text Only<pre><code>INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration:\n     - index.md\n</code></pre>"},{"location":"WEBSITE/help/#metadata","title":"metadata","text":"Text Only<pre><code>---\ntitle: &lt;title&gt;\ndescription: &lt;description&gt;\ntags:\n  - &lt;tag1&gt;\n  - &lt;tag2&gt;\n---\n</code></pre>"},{"location":"WEBSITE/help/#title","title":"title","text":"<p>\u6709\u4e09\u4e2a\u6807\u9898:</p> <ul> <li><code>nav-title</code>: \u5728 <code>mkdocs.yml</code> \u7684 <code>nav</code> \u4e2d\u6307\u5b9a\u7684\u6807\u9898<ul> <li>\u5bfc\u822a\u65f6\u663e\u793a\u7684\u6807\u9898\uff0c\u53ef\u4ee5\u56e0\u4e3a\u5c42\u6b21\u7ed3\u6784\u800c\u7701\u7565\u3002</li> </ul> </li> <li><code>meta-title</code>: \u6587\u7ae0\u5728\u6700\u4e0a\u65b9\u901a\u8fc7 <code>---</code> \u6bb5\u8bbe\u7f6e\u7684\u6807\u9898<ul> <li>\u4e0b\u6ed1\u540e\u51fa\u73b0\u7684\u6807\u9898\u4e3a\u6b64\u6807\u9898\u3002</li> </ul> </li> <li><code>h1-title</code>: \u6587\u7ae0\u7b2c\u4e00\u4e2a <code>#</code> \u6807\u9898<ul> <li>\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u6216\u8005\u6574\u7bc7\u6587\u7ae0\u90fd\u6ca1\u6709 \u53c2\u8003\uff0c\u5426\u5219\u53f3\u4fa7\u76ee\u5f55\u65e0\u6cd5\u6b63\u5e38\u663e\u793a\u3002</li> <li>\u5982\u679c\u8bbe\u7f6e\u4e86 <code>---</code> \u6bb5\u7684\u6807\u9898\uff0c\u53ef\u4ee5\u4e0d\u4f7f\u7528\u3002</li> <li>\u5982\u679c\u672a\u8bbe\u7f6e <code>---</code> \u6bb5\u7684\u6807\u9898\uff0c\u4e0b\u6ed1\u540e\u51fa\u73b0\u7684\u6807\u9898\u4e3a nav \u7684\u6807\u9898\u3002</li> <li>\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u6807\u9898\uff0c\u4f1a\u81ea\u52a8\u5c06 nav \u7684\u6807\u9898\u62ff\u8fc7\u6765\u3002</li> </ul> </li> </ul> <p>\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\uff0c\u8bbe\u7f6e\u7b80\u6d01\u7684 <code>nav-title</code> \u7528\u6765\u5bfc\u822a\uff0c<code>meta-title</code> \u548c <code>h1-title</code> \u4f7f\u7528\u76f8\u540c\u7684\u6807\u9898\u8868\u8ff0\u6587\u7ae0\u5185\u5bb9\u3002\u6216\u8005\u53ea\u8bbe\u7f6e <code>h1-title</code>\u3002</p>"},{"location":"WEBSITE/help/#_3","title":"\u56fe\u7247","text":"Text Only<pre><code>![](./media/xxx.png){width=\"300\"}\n\n![](./media/xxx.png){width=\"50%\"}\n</code></pre> <p>\u6ce8\u610f:</p> <ul> <li>\u6709\u4e9b\u5916\u94fe\u56fe\u7247\u6ca1\u6709 token \u662f\u65e0\u6cd5\u76f4\u63a5\u83b7\u53d6\u7684\u3002</li> <li>\u5982\u679c\u5e0c\u671b\u56fe\u7247\u5e76\u6392\uff0c\u5220\u6389\u4e24\u4e2a\u56fe\u7247\u4e2d\u95f4\u7684\u7a7a\u884c\u3002</li> </ul>"},{"location":"WEBSITE/test/","title":"\u6d4b\u8bd5\u6587\u6863","text":"<p>Here is an inline example, \\(\\pi(\\theta)\\), </p> <p>an equation,</p> \\[\\nabla f(x) \\in \\mathbb{R}^n,\\] <p>and a regular $ symbol.</p> <p></p> <p>https://github.com/anzchy/learning.jackcheng.chat</p> <p>https://github.com/anzchy/learning.jackcheng.chat</p> <p>bold iiii</p> <p>\\(\\vec{a}\\) \\(\\vec a\\)</p> <p>\\(\\boldsymbol u\\) \\(\\boldsymbol{a}\\)</p> <ul> <li>1<ul> <li>2<ul> <li>3<ul> <li>4</li> </ul> </li> </ul> </li> </ul> </li> <li>1<ul> <li>2<ul> <li>3<ul> <li>4</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p></p> <p></p> <p> </p>"},{"location":"Writing/","title":"\u968f\u7b14","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p> <p>this is a test.</p>"}]}